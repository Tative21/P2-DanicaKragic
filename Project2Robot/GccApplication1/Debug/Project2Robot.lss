
Project2Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000742c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001ec  20070000  0008742c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000083cc  200701f0  00087620  000101f0  2**3
                  ALLOC
  3 .stack        00002004  200785bc  0008f9ec  000101f0  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010215  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f136  00000000  00000000  00010270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000516f  00000000  00000000  0002f3a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a6b5  00000000  00000000  00034515  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000012e0  00000000  00000000  0003ebca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001168  00000000  00000000  0003feaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000e6a3  00000000  00000000  00041012  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f8fb  00000000  00000000  0004f6b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006a0fe  00000000  00000000  0006efb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003470  00000000  00000000  000d90b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007a5c0 	.word	0x2007a5c0
   80004:	00081f29 	.word	0x00081f29
   80008:	00081f25 	.word	0x00081f25
   8000c:	00081f25 	.word	0x00081f25
   80010:	00081f25 	.word	0x00081f25
   80014:	00081f25 	.word	0x00081f25
   80018:	00081f25 	.word	0x00081f25
	...
   8002c:	00082215 	.word	0x00082215
   80030:	00081f25 	.word	0x00081f25
   80034:	00000000 	.word	0x00000000
   80038:	00082291 	.word	0x00082291
   8003c:	000822cd 	.word	0x000822cd
   80040:	00081f25 	.word	0x00081f25
   80044:	00081f25 	.word	0x00081f25
   80048:	00081f25 	.word	0x00081f25
   8004c:	00081f25 	.word	0x00081f25
   80050:	00081f25 	.word	0x00081f25
   80054:	00081f25 	.word	0x00081f25
   80058:	00081f25 	.word	0x00081f25
   8005c:	00081f25 	.word	0x00081f25
   80060:	00081f25 	.word	0x00081f25
   80064:	00081f25 	.word	0x00081f25
   80068:	00000000 	.word	0x00000000
   8006c:	00081b11 	.word	0x00081b11
   80070:	00081b25 	.word	0x00081b25
   80074:	00081b39 	.word	0x00081b39
   80078:	00081b4d 	.word	0x00081b4d
	...
   80084:	00083729 	.word	0x00083729
   80088:	00081f25 	.word	0x00081f25
   8008c:	00081f25 	.word	0x00081f25
   80090:	00081f25 	.word	0x00081f25
   80094:	00081f25 	.word	0x00081f25
   80098:	00081f25 	.word	0x00081f25
   8009c:	00081f25 	.word	0x00081f25
   800a0:	00081f25 	.word	0x00081f25
   800a4:	00000000 	.word	0x00000000
   800a8:	00081f25 	.word	0x00081f25
   800ac:	00081f25 	.word	0x00081f25
   800b0:	00081f25 	.word	0x00081f25
   800b4:	00081f25 	.word	0x00081f25
   800b8:	00081f25 	.word	0x00081f25
   800bc:	00081f25 	.word	0x00081f25
   800c0:	00081f25 	.word	0x00081f25
   800c4:	00081f25 	.word	0x00081f25
   800c8:	00081f25 	.word	0x00081f25
   800cc:	00081f25 	.word	0x00081f25
   800d0:	00081f25 	.word	0x00081f25
   800d4:	00081f25 	.word	0x00081f25
   800d8:	00081f25 	.word	0x00081f25
   800dc:	00081f25 	.word	0x00081f25
   800e0:	00081f25 	.word	0x00081f25
   800e4:	00081f25 	.word	0x00081f25
   800e8:	00081f25 	.word	0x00081f25
   800ec:	00081f25 	.word	0x00081f25
   800f0:	00081f25 	.word	0x00081f25

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200701f0 	.word	0x200701f0
   80110:	00000000 	.word	0x00000000
   80114:	0008742c 	.word	0x0008742c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008742c 	.word	0x0008742c
   8013c:	200701f4 	.word	0x200701f4
   80140:	0008742c 	.word	0x0008742c
   80144:	00000000 	.word	0x00000000

00080148 <pin_edge_handler1>:
 The interrupt service routine.
 Reads the timer counter every time the ISR fires. Resets/restarts the clock
 and maintains a counter.
 **************************************************************************/
 void pin_edge_handler1()
 {
   80148:	b510      	push	{r4, lr}
	 timerLeftWheel = tc_read_cv(TC0, 0);
   8014a:	4c08      	ldr	r4, [pc, #32]	; (8016c <pin_edge_handler1+0x24>)
   8014c:	4620      	mov	r0, r4
   8014e:	2100      	movs	r1, #0
   80150:	4b07      	ldr	r3, [pc, #28]	; (80170 <pin_edge_handler1+0x28>)
   80152:	4798      	blx	r3
   80154:	4b07      	ldr	r3, [pc, #28]	; (80174 <pin_edge_handler1+0x2c>)
   80156:	6018      	str	r0, [r3, #0]
	 tc_start(TC0, 0);
   80158:	4620      	mov	r0, r4
   8015a:	2100      	movs	r1, #0
   8015c:	4b06      	ldr	r3, [pc, #24]	; (80178 <pin_edge_handler1+0x30>)
   8015e:	4798      	blx	r3
	 counterLeftWheel++;
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <pin_edge_handler1+0x34>)
   80162:	681a      	ldr	r2, [r3, #0]
   80164:	3201      	adds	r2, #1
   80166:	601a      	str	r2, [r3, #0]
   80168:	bd10      	pop	{r4, pc}
   8016a:	bf00      	nop
   8016c:	40080000 	.word	0x40080000
   80170:	00080ba1 	.word	0x00080ba1
   80174:	20078588 	.word	0x20078588
   80178:	00080b91 	.word	0x00080b91
   8017c:	20078590 	.word	0x20078590

00080180 <configure_tc_LeftWheel>:

 /**************************************************************************
 Initialize the timer counter.
 **************************************************************************/
 void configure_tc_LeftWheel(void)
 {
   80180:	b510      	push	{r4, lr}
	 pmc_set_writeprotect(false);
   80182:	2000      	movs	r0, #0
   80184:	4b07      	ldr	r3, [pc, #28]	; (801a4 <configure_tc_LeftWheel+0x24>)
   80186:	4798      	blx	r3
	 pmc_enable_periph_clk(ID_TC0);
   80188:	201b      	movs	r0, #27
   8018a:	4b07      	ldr	r3, [pc, #28]	; (801a8 <configure_tc_LeftWheel+0x28>)
   8018c:	4798      	blx	r3
	 tc_init(TC0,0,TC_CMR_TCCLKS_TIMER_CLOCK3);		 /* TC0, channel 0, TCLK1 and capturemode */
   8018e:	4c07      	ldr	r4, [pc, #28]	; (801ac <configure_tc_LeftWheel+0x2c>)
   80190:	4620      	mov	r0, r4
   80192:	2100      	movs	r1, #0
   80194:	2202      	movs	r2, #2
   80196:	4b06      	ldr	r3, [pc, #24]	; (801b0 <configure_tc_LeftWheel+0x30>)
   80198:	4798      	blx	r3
	 tc_set_block_mode(TC0,0);
   8019a:	4620      	mov	r0, r4
   8019c:	2100      	movs	r1, #0
   8019e:	4b05      	ldr	r3, [pc, #20]	; (801b4 <configure_tc_LeftWheel+0x34>)
   801a0:	4798      	blx	r3
   801a2:	bd10      	pop	{r4, pc}
   801a4:	00081ca1 	.word	0x00081ca1
   801a8:	00081c49 	.word	0x00081c49
   801ac:	40080000 	.word	0x40080000
   801b0:	00080b6d 	.word	0x00080b6d
   801b4:	00080b89 	.word	0x00080b89

000801b8 <configure_interrupt_pio_LeftWheel>:
 /**************************************************************************
 Configure the interrupt.
 Digital Pin 13
 **************************************************************************/
 void configure_interrupt_pio_LeftWheel(void)
 {
   801b8:	b530      	push	{r4, r5, lr}
   801ba:	b083      	sub	sp, #12
	 pmc_enable_periph_clk(ID_PIOB); //Enable the module clock
   801bc:	200c      	movs	r0, #12
   801be:	4b0e      	ldr	r3, [pc, #56]	; (801f8 <configure_interrupt_pio_LeftWheel+0x40>)
   801c0:	4798      	blx	r3
	 pio_set_input(PIOB, PIO_PB27,PIO_PULLUP);
   801c2:	4c0e      	ldr	r4, [pc, #56]	; (801fc <configure_interrupt_pio_LeftWheel+0x44>)
   801c4:	4620      	mov	r0, r4
   801c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801ca:	2201      	movs	r2, #1
   801cc:	4b0c      	ldr	r3, [pc, #48]	; (80200 <configure_interrupt_pio_LeftWheel+0x48>)
   801ce:	4798      	blx	r3
	 pio_handler_set(PIOB,ID_PIOB,PIO_PB27,PIO_IT_EDGE,pin_edge_handler1);
   801d0:	4b0c      	ldr	r3, [pc, #48]	; (80204 <configure_interrupt_pio_LeftWheel+0x4c>)
   801d2:	9300      	str	r3, [sp, #0]
   801d4:	4620      	mov	r0, r4
   801d6:	210c      	movs	r1, #12
   801d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   801dc:	2340      	movs	r3, #64	; 0x40
   801de:	4d0a      	ldr	r5, [pc, #40]	; (80208 <configure_interrupt_pio_LeftWheel+0x50>)
   801e0:	47a8      	blx	r5
	 pio_enable_interrupt(PIOB,PIO_PB27);
   801e2:	4620      	mov	r0, r4
   801e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801e8:	4b08      	ldr	r3, [pc, #32]	; (8020c <configure_interrupt_pio_LeftWheel+0x54>)
   801ea:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   801ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   801f0:	4b07      	ldr	r3, [pc, #28]	; (80210 <configure_interrupt_pio_LeftWheel+0x58>)
   801f2:	601a      	str	r2, [r3, #0]
	 NVIC_EnableIRQ(PIOB_IRQn);

 }
   801f4:	b003      	add	sp, #12
   801f6:	bd30      	pop	{r4, r5, pc}
   801f8:	00081c49 	.word	0x00081c49
   801fc:	400e1000 	.word	0x400e1000
   80200:	000817e5 	.word	0x000817e5
   80204:	00080149 	.word	0x00080149
   80208:	00081ad5 	.word	0x00081ad5
   8020c:	000818f9 	.word	0x000818f9
   80210:	e000e100 	.word	0xe000e100

00080214 <pin_edge_handler>:
 The interrupt service routine.
 Reads the timer counter every time the ISR fires. Resets/restarts the clock
 and maintains a counter.
 **************************************************************************/
 void pin_edge_handler()
 {
   80214:	b510      	push	{r4, lr}
	 timerRightWheel = tc_read_cv(TC2, 1);
   80216:	4c08      	ldr	r4, [pc, #32]	; (80238 <pin_edge_handler+0x24>)
   80218:	4620      	mov	r0, r4
   8021a:	2101      	movs	r1, #1
   8021c:	4b07      	ldr	r3, [pc, #28]	; (8023c <pin_edge_handler+0x28>)
   8021e:	4798      	blx	r3
   80220:	4b07      	ldr	r3, [pc, #28]	; (80240 <pin_edge_handler+0x2c>)
   80222:	6018      	str	r0, [r3, #0]
	 tc_start(TC2, 1);
   80224:	4620      	mov	r0, r4
   80226:	2101      	movs	r1, #1
   80228:	4b06      	ldr	r3, [pc, #24]	; (80244 <pin_edge_handler+0x30>)
   8022a:	4798      	blx	r3
	 counterRightWheel++;
   8022c:	4b06      	ldr	r3, [pc, #24]	; (80248 <pin_edge_handler+0x34>)
   8022e:	681a      	ldr	r2, [r3, #0]
   80230:	3201      	adds	r2, #1
   80232:	601a      	str	r2, [r3, #0]
   80234:	bd10      	pop	{r4, pc}
   80236:	bf00      	nop
   80238:	40088000 	.word	0x40088000
   8023c:	00080ba1 	.word	0x00080ba1
   80240:	2007859c 	.word	0x2007859c
   80244:	00080b91 	.word	0x00080b91
   80248:	20078594 	.word	0x20078594

0008024c <configure_tc_RightWheel>:

 /**************************************************************************
 Initialize the timer counter.
 **************************************************************************/
 void configure_tc_RightWheel(void)
 {
   8024c:	b510      	push	{r4, lr}
	 pmc_set_writeprotect(false);
   8024e:	2000      	movs	r0, #0
   80250:	4b07      	ldr	r3, [pc, #28]	; (80270 <configure_tc_RightWheel+0x24>)
   80252:	4798      	blx	r3
	 pmc_enable_periph_clk(ID_TC7);
   80254:	2022      	movs	r0, #34	; 0x22
   80256:	4b07      	ldr	r3, [pc, #28]	; (80274 <configure_tc_RightWheel+0x28>)
   80258:	4798      	blx	r3
	 tc_init(TC2,1,TC_CMR_TCCLKS_TIMER_CLOCK3);		 /* TC2, channel 1, TCLK3 and capturemode */
   8025a:	4c07      	ldr	r4, [pc, #28]	; (80278 <configure_tc_RightWheel+0x2c>)
   8025c:	4620      	mov	r0, r4
   8025e:	2101      	movs	r1, #1
   80260:	2202      	movs	r2, #2
   80262:	4b06      	ldr	r3, [pc, #24]	; (8027c <configure_tc_RightWheel+0x30>)
   80264:	4798      	blx	r3
	 tc_set_block_mode(TC2,1);
   80266:	4620      	mov	r0, r4
   80268:	2101      	movs	r1, #1
   8026a:	4b05      	ldr	r3, [pc, #20]	; (80280 <configure_tc_RightWheel+0x34>)
   8026c:	4798      	blx	r3
   8026e:	bd10      	pop	{r4, pc}
   80270:	00081ca1 	.word	0x00081ca1
   80274:	00081c49 	.word	0x00081c49
   80278:	40088000 	.word	0x40088000
   8027c:	00080b6d 	.word	0x00080b6d
   80280:	00080b89 	.word	0x00080b89

00080284 <configure_interrupt_pio_RightWheel>:
 /**************************************************************************
 Configure the interrupt.
 Digital Pin 12
 **************************************************************************/
 void configure_interrupt_pio_RightWheel(void)
 {
   80284:	b530      	push	{r4, r5, lr}
   80286:	b083      	sub	sp, #12
	 pmc_enable_periph_clk(ID_PIOD); //Enable the module clock
   80288:	200e      	movs	r0, #14
   8028a:	4b0e      	ldr	r3, [pc, #56]	; (802c4 <configure_interrupt_pio_RightWheel+0x40>)
   8028c:	4798      	blx	r3
	 pio_set_input(PIOD, PIO_PD8,PIO_PULLUP);
   8028e:	4c0e      	ldr	r4, [pc, #56]	; (802c8 <configure_interrupt_pio_RightWheel+0x44>)
   80290:	4620      	mov	r0, r4
   80292:	f44f 7180 	mov.w	r1, #256	; 0x100
   80296:	2201      	movs	r2, #1
   80298:	4b0c      	ldr	r3, [pc, #48]	; (802cc <configure_interrupt_pio_RightWheel+0x48>)
   8029a:	4798      	blx	r3
	 pio_handler_set(PIOD,ID_PIOD,PIO_PD8,PIO_IT_EDGE,pin_edge_handler);
   8029c:	4b0c      	ldr	r3, [pc, #48]	; (802d0 <configure_interrupt_pio_RightWheel+0x4c>)
   8029e:	9300      	str	r3, [sp, #0]
   802a0:	4620      	mov	r0, r4
   802a2:	210e      	movs	r1, #14
   802a4:	f44f 7280 	mov.w	r2, #256	; 0x100
   802a8:	2340      	movs	r3, #64	; 0x40
   802aa:	4d0a      	ldr	r5, [pc, #40]	; (802d4 <configure_interrupt_pio_RightWheel+0x50>)
   802ac:	47a8      	blx	r5
	 pio_enable_interrupt(PIOD,PIO_PD8);
   802ae:	4620      	mov	r0, r4
   802b0:	f44f 7180 	mov.w	r1, #256	; 0x100
   802b4:	4b08      	ldr	r3, [pc, #32]	; (802d8 <configure_interrupt_pio_RightWheel+0x54>)
   802b6:	4798      	blx	r3
   802b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   802bc:	4b07      	ldr	r3, [pc, #28]	; (802dc <configure_interrupt_pio_RightWheel+0x58>)
   802be:	601a      	str	r2, [r3, #0]
	 NVIC_EnableIRQ(PIOD_IRQn);

 }
   802c0:	b003      	add	sp, #12
   802c2:	bd30      	pop	{r4, r5, pc}
   802c4:	00081c49 	.word	0x00081c49
   802c8:	400e1400 	.word	0x400e1400
   802cc:	000817e5 	.word	0x000817e5
   802d0:	00080215 	.word	0x00080215
   802d4:	00081ad5 	.word	0x00081ad5
   802d8:	000818f9 	.word	0x000818f9
   802dc:	e000e100 	.word	0xe000e100

000802e0 <InitPIN40>:

/************************************************************************
Initiation of digital pin 40 on the Arduino Due board for PWM.
************************************************************************/
void InitPIN40(void)
{
   802e0:	b538      	push	{r3, r4, r5, lr}
	PWMPin40.channel = PWM_CHANNEL_3;
   802e2:	490d      	ldr	r1, [pc, #52]	; (80318 <InitPIN40+0x38>)
   802e4:	2403      	movs	r4, #3
   802e6:	600c      	str	r4, [r1, #0]
	PWMPin40.ul_prescaler = PWM_CMR_CPRE_CLKA;
   802e8:	220b      	movs	r2, #11
   802ea:	604a      	str	r2, [r1, #4]
	PWMPin40.ul_duty = 0;
   802ec:	2200      	movs	r2, #0
   802ee:	60ca      	str	r2, [r1, #12]
	PWMPin40.ul_period = 19999;
   802f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
   802f4:	610a      	str	r2, [r1, #16]
	pwm_channel_init(PWM, &PWMPin40);
   802f6:	4d09      	ldr	r5, [pc, #36]	; (8031c <InitPIN40+0x3c>)
   802f8:	4628      	mov	r0, r5
   802fa:	4b09      	ldr	r3, [pc, #36]	; (80320 <InitPIN40+0x40>)
   802fc:	4798      	blx	r3
	pio_set_peripheral(PIOC, PIO_PERIPH_B, PIO_PC8B_PWML3);
   802fe:	4809      	ldr	r0, [pc, #36]	; (80324 <InitPIN40+0x44>)
   80300:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80304:	f44f 7280 	mov.w	r2, #256	; 0x100
   80308:	4b07      	ldr	r3, [pc, #28]	; (80328 <InitPIN40+0x48>)
   8030a:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   8030c:	4628      	mov	r0, r5
   8030e:	4621      	mov	r1, r4
   80310:	4b06      	ldr	r3, [pc, #24]	; (8032c <InitPIN40+0x4c>)
   80312:	4798      	blx	r3
   80314:	bd38      	pop	{r3, r4, r5, pc}
   80316:	bf00      	nop
   80318:	2007855c 	.word	0x2007855c
   8031c:	40094000 	.word	0x40094000
   80320:	00081d5d 	.word	0x00081d5d
   80324:	400e1200 	.word	0x400e1200
   80328:	000817a5 	.word	0x000817a5
   8032c:	00081e85 	.word	0x00081e85

00080330 <InitPIN38>:
}

/************************************************************************
Initiation of digital pin 40 on the Arduino Due board for PWM.
************************************************************************/
void InitPIN38(void){
   80330:	b538      	push	{r3, r4, r5, lr}
	PWMPin38.channel = PWM_CHANNEL_2;
   80332:	490c      	ldr	r1, [pc, #48]	; (80364 <InitPIN38+0x34>)
   80334:	2402      	movs	r4, #2
   80336:	600c      	str	r4, [r1, #0]
	PWMPin38.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80338:	220b      	movs	r2, #11
   8033a:	604a      	str	r2, [r1, #4]
	PWMPin38.ul_duty = 0;
   8033c:	2200      	movs	r2, #0
   8033e:	60ca      	str	r2, [r1, #12]
	PWMPin38.ul_period = 19999;
   80340:	f644 621f 	movw	r2, #19999	; 0x4e1f
   80344:	610a      	str	r2, [r1, #16]
	pwm_channel_init(PWM, &PWMPin38);
   80346:	4d08      	ldr	r5, [pc, #32]	; (80368 <InitPIN38+0x38>)
   80348:	4628      	mov	r0, r5
   8034a:	4b08      	ldr	r3, [pc, #32]	; (8036c <InitPIN38+0x3c>)
   8034c:	4798      	blx	r3
	pio_set_peripheral(PIOC, PIO_PERIPH_B, PIO_PC6B_PWML2);
   8034e:	4808      	ldr	r0, [pc, #32]	; (80370 <InitPIN38+0x40>)
   80350:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80354:	2240      	movs	r2, #64	; 0x40
   80356:	4b07      	ldr	r3, [pc, #28]	; (80374 <InitPIN38+0x44>)
   80358:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   8035a:	4628      	mov	r0, r5
   8035c:	4621      	mov	r1, r4
   8035e:	4b06      	ldr	r3, [pc, #24]	; (80378 <InitPIN38+0x48>)
   80360:	4798      	blx	r3
   80362:	bd38      	pop	{r3, r4, r5, pc}
   80364:	20078534 	.word	0x20078534
   80368:	40094000 	.word	0x40094000
   8036c:	00081d5d 	.word	0x00081d5d
   80370:	400e1200 	.word	0x400e1200
   80374:	000817a5 	.word	0x000817a5
   80378:	00081e85 	.word	0x00081e85

0008037c <PWMInit>:
pwm_channel_t PWMPin38;

/************************************************************************
Configuration of the Pulse Width Modulation (PWM).
************************************************************************/
void PWMInit(void){
   8037c:	b530      	push	{r4, r5, lr}
   8037e:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   80380:	2024      	movs	r0, #36	; 0x24
   80382:	4b0d      	ldr	r3, [pc, #52]	; (803b8 <PWMInit+0x3c>)
   80384:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_3);
   80386:	4c0d      	ldr	r4, [pc, #52]	; (803bc <PWMInit+0x40>)
   80388:	4620      	mov	r0, r4
   8038a:	2103      	movs	r1, #3
   8038c:	4d0c      	ldr	r5, [pc, #48]	; (803c0 <PWMInit+0x44>)
   8038e:	47a8      	blx	r5
	pwm_channel_disable(PWM, PWM_CHANNEL_2);
   80390:	4620      	mov	r0, r4
   80392:	2102      	movs	r1, #2
   80394:	47a8      	blx	r5
	
	pwm_clock_t clock_setting = {
   80396:	4b0b      	ldr	r3, [pc, #44]	; (803c4 <PWMInit+0x48>)
   80398:	9301      	str	r3, [sp, #4]
   8039a:	2300      	movs	r3, #0
   8039c:	9302      	str	r3, [sp, #8]
   8039e:	4b0a      	ldr	r3, [pc, #40]	; (803c8 <PWMInit+0x4c>)
   803a0:	9303      	str	r3, [sp, #12]
		.ul_clka = 50 * 19999,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   803a2:	4620      	mov	r0, r4
   803a4:	a901      	add	r1, sp, #4
   803a6:	4b09      	ldr	r3, [pc, #36]	; (803cc <PWMInit+0x50>)
   803a8:	4798      	blx	r3
	
	InitPIN40();
   803aa:	4b09      	ldr	r3, [pc, #36]	; (803d0 <PWMInit+0x54>)
   803ac:	4798      	blx	r3
	InitPIN38();
   803ae:	4b09      	ldr	r3, [pc, #36]	; (803d4 <PWMInit+0x58>)
   803b0:	4798      	blx	r3
}
   803b2:	b005      	add	sp, #20
   803b4:	bd30      	pop	{r4, r5, pc}
   803b6:	bf00      	nop
   803b8:	00081c49 	.word	0x00081c49
   803bc:	40094000 	.word	0x40094000
   803c0:	00081e91 	.word	0x00081e91
   803c4:	000f420e 	.word	0x000f420e
   803c8:	0501bd00 	.word	0x0501bd00
   803cc:	00081d1d 	.word	0x00081d1d
   803d0:	000802e1 	.word	0x000802e1
   803d4:	00080331 	.word	0x00080331

000803d8 <LeftWheelPWM>:

/************************************************************************
* Updates the output value for the left wheel.
/************************************************************************/
void LeftWheelPWM(uint32_t dutyCycle)
{
   803d8:	b508      	push	{r3, lr}
   803da:	4602      	mov	r2, r0
pwm_channel_update_duty(PWM, &PWMPin40, dutyCycle);
   803dc:	4802      	ldr	r0, [pc, #8]	; (803e8 <LeftWheelPWM+0x10>)
   803de:	4903      	ldr	r1, [pc, #12]	; (803ec <LeftWheelPWM+0x14>)
   803e0:	4b03      	ldr	r3, [pc, #12]	; (803f0 <LeftWheelPWM+0x18>)
   803e2:	4798      	blx	r3
   803e4:	bd08      	pop	{r3, pc}
   803e6:	bf00      	nop
   803e8:	40094000 	.word	0x40094000
   803ec:	2007855c 	.word	0x2007855c
   803f0:	00081e61 	.word	0x00081e61

000803f4 <RightWheelPWM>:
}

/************************************************************************
* Updates the output value for the right wheel.
/************************************************************************/
void RightWheelPWM(uint32_t dutyCycle){
   803f4:	b508      	push	{r3, lr}
   803f6:	4602      	mov	r2, r0
pwm_channel_update_duty(PWM, &PWMPin38, dutyCycle);
   803f8:	4802      	ldr	r0, [pc, #8]	; (80404 <RightWheelPWM+0x10>)
   803fa:	4903      	ldr	r1, [pc, #12]	; (80408 <RightWheelPWM+0x14>)
   803fc:	4b03      	ldr	r3, [pc, #12]	; (8040c <RightWheelPWM+0x18>)
   803fe:	4798      	blx	r3
   80400:	bd08      	pop	{r3, pc}
   80402:	bf00      	nop
   80404:	40094000 	.word	0x40094000
   80408:	20078534 	.word	0x20078534
   8040c:	00081e61 	.word	0x00081e61

00080410 <setupUART>:
#include "SerialUART.h"

/************************************************************************
Configuration of the UART.
***********************************************************************/
void setupUART(void){
   80410:	b530      	push	{r4, r5, lr}
   80412:	b085      	sub	sp, #20
	pio_configure(PINS_UART_PIO, PINS_UART_TYPE, PINS_UART_MASK, PIO_DEFAULT);
   80414:	4c12      	ldr	r4, [pc, #72]	; (80460 <setupUART+0x50>)
   80416:	4620      	mov	r0, r4
   80418:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8041c:	f44f 7240 	mov.w	r2, #768	; 0x300
   80420:	2300      	movs	r3, #0
   80422:	4d10      	ldr	r5, [pc, #64]	; (80464 <setupUART+0x54>)
   80424:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_UART);
   80426:	2008      	movs	r0, #8
   80428:	4b0f      	ldr	r3, [pc, #60]	; (80468 <setupUART+0x58>)
   8042a:	4798      	blx	r3
	const sam_uart_opt_t uart0_settings = { sysclk_get_cpu_hz(), CONF_UART_BAUDRATE, UART_MR_PAR_NO };
   8042c:	4b0f      	ldr	r3, [pc, #60]	; (8046c <setupUART+0x5c>)
   8042e:	9301      	str	r3, [sp, #4]
   80430:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80434:	9302      	str	r3, [sp, #8]
   80436:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8043a:	9303      	str	r3, [sp, #12]
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8043c:	f44f 7380 	mov.w	r3, #256	; 0x100
   80440:	6663      	str	r3, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80442:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80444:	6263      	str	r3, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80446:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8044a:	6f23      	ldr	r3, [r4, #112]	; 0x70
   8044c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80450:	6723      	str	r3, [r4, #112]	; 0x70
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
	uart_init(UART, &uart0_settings);
   80452:	4807      	ldr	r0, [pc, #28]	; (80470 <setupUART+0x60>)
   80454:	a901      	add	r1, sp, #4
   80456:	4b07      	ldr	r3, [pc, #28]	; (80474 <setupUART+0x64>)
   80458:	4798      	blx	r3
}
   8045a:	b005      	add	sp, #20
   8045c:	bd30      	pop	{r4, r5, pc}
   8045e:	bf00      	nop
   80460:	400e0e00 	.word	0x400e0e00
   80464:	00081841 	.word	0x00081841
   80468:	00081c49 	.word	0x00081c49
   8046c:	0501bd00 	.word	0x0501bd00
   80470:	400e0800 	.word	0x400e0800
   80474:	00081e9d 	.word	0x00081e9d

00080478 <TaskMatLab>:

/************************************
Sends values to matlab using printf
*************************************/
void TaskMatLab(void *p)
{
   80478:	b5f0      	push	{r4, r5, r6, r7, lr}
   8047a:	b083      	sub	sp, #12

	portTickType xLastWakeTime;
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
   8047c:	4b0c      	ldr	r3, [pc, #48]	; (804b0 <TaskMatLab+0x38>)
   8047e:	4798      	blx	r3
   80480:	9001      	str	r0, [sp, #4]

	while(1)
	{
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80482:	4f0c      	ldr	r7, [pc, #48]	; (804b4 <TaskMatLab+0x3c>)

		printf("%d\n",sendmatlab);
   80484:	4d0c      	ldr	r5, [pc, #48]	; (804b8 <TaskMatLab+0x40>)
   80486:	4e0d      	ldr	r6, [pc, #52]	; (804bc <TaskMatLab+0x44>)
	xLastWakeTime = xTaskGetTickCount();

	while(1)
	{
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80488:	a801      	add	r0, sp, #4
   8048a:	2132      	movs	r1, #50	; 0x32
   8048c:	47b8      	blx	r7

		printf("%d\n",sendmatlab);
   8048e:	4628      	mov	r0, r5
   80490:	6831      	ldr	r1, [r6, #0]
   80492:	4c0b      	ldr	r4, [pc, #44]	; (804c0 <TaskMatLab+0x48>)
   80494:	47a0      	blx	r4
		printf("%d\n",bv);
   80496:	4628      	mov	r0, r5
   80498:	4b0a      	ldr	r3, [pc, #40]	; (804c4 <TaskMatLab+0x4c>)
   8049a:	6819      	ldr	r1, [r3, #0]
   8049c:	47a0      	blx	r4
		printf("%d\n",errortomat);
   8049e:	4628      	mov	r0, r5
   804a0:	4b09      	ldr	r3, [pc, #36]	; (804c8 <TaskMatLab+0x50>)
   804a2:	6819      	ldr	r1, [r3, #0]
   804a4:	47a0      	blx	r4
		printf("%d\n",averagehastighet);
   804a6:	4628      	mov	r0, r5
   804a8:	4b08      	ldr	r3, [pc, #32]	; (804cc <TaskMatLab+0x54>)
   804aa:	6819      	ldr	r1, [r3, #0]
   804ac:	47a0      	blx	r4
   804ae:	e7eb      	b.n	80488 <TaskMatLab+0x10>
   804b0:	00082cb1 	.word	0x00082cb1
   804b4:	00082ef9 	.word	0x00082ef9
   804b8:	0008711c 	.word	0x0008711c
   804bc:	20070210 	.word	0x20070210
   804c0:	00083b71 	.word	0x00083b71
   804c4:	20070214 	.word	0x20070214
   804c8:	20070218 	.word	0x20070218
   804cc:	2007020c 	.word	0x2007020c

000804d0 <valuesforPWMRight>:
}

/*********************************************
Function for translating actual speed values to PWM signals.
***********************************************/
void valuesforPWMRight(float finalULeft){
   804d0:	b570      	push	{r4, r5, r6, lr}
	
	if(finalULeft <= 0.017){
   804d2:	4b8d      	ldr	r3, [pc, #564]	; (80708 <valuesforPWMRight+0x238>)
   804d4:	4798      	blx	r3
   804d6:	4604      	mov	r4, r0
   804d8:	460d      	mov	r5, r1
   804da:	a365      	add	r3, pc, #404	; (adr r3, 80670 <valuesforPWMRight+0x1a0>)
   804dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   804e0:	4e8a      	ldr	r6, [pc, #552]	; (8070c <valuesforPWMRight+0x23c>)
   804e2:	47b0      	blx	r6
   804e4:	b120      	cbz	r0, 804f0 <valuesforPWMRight+0x20>
		RightWheelPWM(1500);
   804e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
   804ea:	4b89      	ldr	r3, [pc, #548]	; (80710 <valuesforPWMRight+0x240>)
   804ec:	4798      	blx	r3
   804ee:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft >= 0.018 && finalULeft <= 0.029){
   804f0:	4620      	mov	r0, r4
   804f2:	4629      	mov	r1, r5
   804f4:	a360      	add	r3, pc, #384	; (adr r3, 80678 <valuesforPWMRight+0x1a8>)
   804f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   804fa:	4e86      	ldr	r6, [pc, #536]	; (80714 <valuesforPWMRight+0x244>)
   804fc:	47b0      	blx	r6
   804fe:	b160      	cbz	r0, 8051a <valuesforPWMRight+0x4a>
   80500:	4620      	mov	r0, r4
   80502:	4629      	mov	r1, r5
   80504:	a35e      	add	r3, pc, #376	; (adr r3, 80680 <valuesforPWMRight+0x1b0>)
   80506:	e9d3 2300 	ldrd	r2, r3, [r3]
   8050a:	4e80      	ldr	r6, [pc, #512]	; (8070c <valuesforPWMRight+0x23c>)
   8050c:	47b0      	blx	r6
   8050e:	b120      	cbz	r0, 8051a <valuesforPWMRight+0x4a>
		RightWheelPWM(1390);
   80510:	f240 506e 	movw	r0, #1390	; 0x56e
   80514:	4b7e      	ldr	r3, [pc, #504]	; (80710 <valuesforPWMRight+0x240>)
   80516:	4798      	blx	r3
   80518:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft >= 0.03 && finalULeft <= 0.055){
   8051a:	4620      	mov	r0, r4
   8051c:	4629      	mov	r1, r5
   8051e:	a35a      	add	r3, pc, #360	; (adr r3, 80688 <valuesforPWMRight+0x1b8>)
   80520:	e9d3 2300 	ldrd	r2, r3, [r3]
   80524:	4e7b      	ldr	r6, [pc, #492]	; (80714 <valuesforPWMRight+0x244>)
   80526:	47b0      	blx	r6
   80528:	b160      	cbz	r0, 80544 <valuesforPWMRight+0x74>
   8052a:	4620      	mov	r0, r4
   8052c:	4629      	mov	r1, r5
   8052e:	a358      	add	r3, pc, #352	; (adr r3, 80690 <valuesforPWMRight+0x1c0>)
   80530:	e9d3 2300 	ldrd	r2, r3, [r3]
   80534:	4e75      	ldr	r6, [pc, #468]	; (8070c <valuesforPWMRight+0x23c>)
   80536:	47b0      	blx	r6
   80538:	b120      	cbz	r0, 80544 <valuesforPWMRight+0x74>
		RightWheelPWM(1370);
   8053a:	f240 505a 	movw	r0, #1370	; 0x55a
   8053e:	4b74      	ldr	r3, [pc, #464]	; (80710 <valuesforPWMRight+0x240>)
   80540:	4798      	blx	r3
   80542:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft >= 0.056 && finalULeft <= 0.085){
   80544:	4620      	mov	r0, r4
   80546:	4629      	mov	r1, r5
   80548:	a353      	add	r3, pc, #332	; (adr r3, 80698 <valuesforPWMRight+0x1c8>)
   8054a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8054e:	4e71      	ldr	r6, [pc, #452]	; (80714 <valuesforPWMRight+0x244>)
   80550:	47b0      	blx	r6
   80552:	b160      	cbz	r0, 8056e <valuesforPWMRight+0x9e>
   80554:	4620      	mov	r0, r4
   80556:	4629      	mov	r1, r5
   80558:	a351      	add	r3, pc, #324	; (adr r3, 806a0 <valuesforPWMRight+0x1d0>)
   8055a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8055e:	4e6b      	ldr	r6, [pc, #428]	; (8070c <valuesforPWMRight+0x23c>)
   80560:	47b0      	blx	r6
   80562:	b120      	cbz	r0, 8056e <valuesforPWMRight+0x9e>
		RightWheelPWM(1350);
   80564:	f240 5046 	movw	r0, #1350	; 0x546
   80568:	4b69      	ldr	r3, [pc, #420]	; (80710 <valuesforPWMRight+0x240>)
   8056a:	4798      	blx	r3
   8056c:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft >= 0.086 && finalULeft <= 0.128){
   8056e:	4620      	mov	r0, r4
   80570:	4629      	mov	r1, r5
   80572:	a34d      	add	r3, pc, #308	; (adr r3, 806a8 <valuesforPWMRight+0x1d8>)
   80574:	e9d3 2300 	ldrd	r2, r3, [r3]
   80578:	4e66      	ldr	r6, [pc, #408]	; (80714 <valuesforPWMRight+0x244>)
   8057a:	47b0      	blx	r6
   8057c:	b160      	cbz	r0, 80598 <valuesforPWMRight+0xc8>
   8057e:	4620      	mov	r0, r4
   80580:	4629      	mov	r1, r5
   80582:	a34b      	add	r3, pc, #300	; (adr r3, 806b0 <valuesforPWMRight+0x1e0>)
   80584:	e9d3 2300 	ldrd	r2, r3, [r3]
   80588:	4e60      	ldr	r6, [pc, #384]	; (8070c <valuesforPWMRight+0x23c>)
   8058a:	47b0      	blx	r6
   8058c:	b120      	cbz	r0, 80598 <valuesforPWMRight+0xc8>
		RightWheelPWM(1330);
   8058e:	f240 5032 	movw	r0, #1330	; 0x532
   80592:	4b5f      	ldr	r3, [pc, #380]	; (80710 <valuesforPWMRight+0x240>)
   80594:	4798      	blx	r3
   80596:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft >= 0.129 && finalULeft <= 0.155){
   80598:	4620      	mov	r0, r4
   8059a:	4629      	mov	r1, r5
   8059c:	a346      	add	r3, pc, #280	; (adr r3, 806b8 <valuesforPWMRight+0x1e8>)
   8059e:	e9d3 2300 	ldrd	r2, r3, [r3]
   805a2:	4e5c      	ldr	r6, [pc, #368]	; (80714 <valuesforPWMRight+0x244>)
   805a4:	47b0      	blx	r6
   805a6:	b160      	cbz	r0, 805c2 <valuesforPWMRight+0xf2>
   805a8:	4620      	mov	r0, r4
   805aa:	4629      	mov	r1, r5
   805ac:	a344      	add	r3, pc, #272	; (adr r3, 806c0 <valuesforPWMRight+0x1f0>)
   805ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   805b2:	4e56      	ldr	r6, [pc, #344]	; (8070c <valuesforPWMRight+0x23c>)
   805b4:	47b0      	blx	r6
   805b6:	b120      	cbz	r0, 805c2 <valuesforPWMRight+0xf2>
		RightWheelPWM(1310);
   805b8:	f240 501e 	movw	r0, #1310	; 0x51e
   805bc:	4b54      	ldr	r3, [pc, #336]	; (80710 <valuesforPWMRight+0x240>)
   805be:	4798      	blx	r3
   805c0:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft >= 0.156 && finalULeft <= 0.182){
   805c2:	4620      	mov	r0, r4
   805c4:	4629      	mov	r1, r5
   805c6:	a340      	add	r3, pc, #256	; (adr r3, 806c8 <valuesforPWMRight+0x1f8>)
   805c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   805cc:	4e51      	ldr	r6, [pc, #324]	; (80714 <valuesforPWMRight+0x244>)
   805ce:	47b0      	blx	r6
   805d0:	b160      	cbz	r0, 805ec <valuesforPWMRight+0x11c>
   805d2:	4620      	mov	r0, r4
   805d4:	4629      	mov	r1, r5
   805d6:	a33e      	add	r3, pc, #248	; (adr r3, 806d0 <valuesforPWMRight+0x200>)
   805d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   805dc:	4e4b      	ldr	r6, [pc, #300]	; (8070c <valuesforPWMRight+0x23c>)
   805de:	47b0      	blx	r6
   805e0:	b120      	cbz	r0, 805ec <valuesforPWMRight+0x11c>
		RightWheelPWM(1290);
   805e2:	f240 500a 	movw	r0, #1290	; 0x50a
   805e6:	4b4a      	ldr	r3, [pc, #296]	; (80710 <valuesforPWMRight+0x240>)
   805e8:	4798      	blx	r3
   805ea:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft >= 0.183 && finalULeft <= 0.220){
   805ec:	4620      	mov	r0, r4
   805ee:	4629      	mov	r1, r5
   805f0:	a339      	add	r3, pc, #228	; (adr r3, 806d8 <valuesforPWMRight+0x208>)
   805f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   805f6:	4e47      	ldr	r6, [pc, #284]	; (80714 <valuesforPWMRight+0x244>)
   805f8:	47b0      	blx	r6
   805fa:	b160      	cbz	r0, 80616 <valuesforPWMRight+0x146>
   805fc:	4620      	mov	r0, r4
   805fe:	4629      	mov	r1, r5
   80600:	a337      	add	r3, pc, #220	; (adr r3, 806e0 <valuesforPWMRight+0x210>)
   80602:	e9d3 2300 	ldrd	r2, r3, [r3]
   80606:	4e41      	ldr	r6, [pc, #260]	; (8070c <valuesforPWMRight+0x23c>)
   80608:	47b0      	blx	r6
   8060a:	b120      	cbz	r0, 80616 <valuesforPWMRight+0x146>
		RightWheelPWM(1270);
   8060c:	f240 40f6 	movw	r0, #1270	; 0x4f6
   80610:	4b3f      	ldr	r3, [pc, #252]	; (80710 <valuesforPWMRight+0x240>)
   80612:	4798      	blx	r3
   80614:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft >= 0.221 && finalULeft <= 0.267){
   80616:	4620      	mov	r0, r4
   80618:	4629      	mov	r1, r5
   8061a:	a333      	add	r3, pc, #204	; (adr r3, 806e8 <valuesforPWMRight+0x218>)
   8061c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80620:	4e3c      	ldr	r6, [pc, #240]	; (80714 <valuesforPWMRight+0x244>)
   80622:	47b0      	blx	r6
   80624:	b160      	cbz	r0, 80640 <valuesforPWMRight+0x170>
   80626:	4620      	mov	r0, r4
   80628:	4629      	mov	r1, r5
   8062a:	a331      	add	r3, pc, #196	; (adr r3, 806f0 <valuesforPWMRight+0x220>)
   8062c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80630:	4e36      	ldr	r6, [pc, #216]	; (8070c <valuesforPWMRight+0x23c>)
   80632:	47b0      	blx	r6
   80634:	b120      	cbz	r0, 80640 <valuesforPWMRight+0x170>
		RightWheelPWM(1250);
   80636:	f240 40e2 	movw	r0, #1250	; 0x4e2
   8063a:	4b35      	ldr	r3, [pc, #212]	; (80710 <valuesforPWMRight+0x240>)
   8063c:	4798      	blx	r3
   8063e:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft >= 0.268 && finalULeft <= 0.334){
   80640:	4620      	mov	r0, r4
   80642:	4629      	mov	r1, r5
   80644:	a32c      	add	r3, pc, #176	; (adr r3, 806f8 <valuesforPWMRight+0x228>)
   80646:	e9d3 2300 	ldrd	r2, r3, [r3]
   8064a:	4e32      	ldr	r6, [pc, #200]	; (80714 <valuesforPWMRight+0x244>)
   8064c:	47b0      	blx	r6
   8064e:	2800      	cmp	r0, #0
   80650:	d062      	beq.n	80718 <valuesforPWMRight+0x248>
   80652:	4620      	mov	r0, r4
   80654:	4629      	mov	r1, r5
   80656:	a32a      	add	r3, pc, #168	; (adr r3, 80700 <valuesforPWMRight+0x230>)
   80658:	e9d3 2300 	ldrd	r2, r3, [r3]
   8065c:	4e2b      	ldr	r6, [pc, #172]	; (8070c <valuesforPWMRight+0x23c>)
   8065e:	47b0      	blx	r6
   80660:	2800      	cmp	r0, #0
   80662:	d059      	beq.n	80718 <valuesforPWMRight+0x248>
		RightWheelPWM(1230);
   80664:	f240 40ce 	movw	r0, #1230	; 0x4ce
   80668:	4b29      	ldr	r3, [pc, #164]	; (80710 <valuesforPWMRight+0x240>)
   8066a:	4798      	blx	r3
   8066c:	bd70      	pop	{r4, r5, r6, pc}
   8066e:	bf00      	nop
   80670:	b020c49c 	.word	0xb020c49c
   80674:	3f916872 	.word	0x3f916872
   80678:	8d4fdf3b 	.word	0x8d4fdf3b
   8067c:	3f926e97 	.word	0x3f926e97
   80680:	0e560419 	.word	0x0e560419
   80684:	3f9db22d 	.word	0x3f9db22d
   80688:	eb851eb8 	.word	0xeb851eb8
   8068c:	3f9eb851 	.word	0x3f9eb851
   80690:	c28f5c29 	.word	0xc28f5c29
   80694:	3fac28f5 	.word	0x3fac28f5
   80698:	3126e979 	.word	0x3126e979
   8069c:	3facac08 	.word	0x3facac08
   806a0:	5c28f5c3 	.word	0x5c28f5c3
   806a4:	3fb5c28f 	.word	0x3fb5c28f
   806a8:	9374bc6a 	.word	0x9374bc6a
   806ac:	3fb60418 	.word	0x3fb60418
   806b0:	d2f1a9fc 	.word	0xd2f1a9fc
   806b4:	3fc0624d 	.word	0x3fc0624d
   806b8:	6e978d50 	.word	0x6e978d50
   806bc:	3fc08312 	.word	0x3fc08312
   806c0:	3d70a3d7 	.word	0x3d70a3d7
   806c4:	3fc3d70a 	.word	0x3fc3d70a
   806c8:	d916872b 	.word	0xd916872b
   806cc:	3fc3f7ce 	.word	0x3fc3f7ce
   806d0:	a7ef9db2 	.word	0xa7ef9db2
   806d4:	3fc74bc6 	.word	0x3fc74bc6
   806d8:	43958106 	.word	0x43958106
   806dc:	3fc76c8b 	.word	0x3fc76c8b
   806e0:	c28f5c29 	.word	0xc28f5c29
   806e4:	3fcc28f5 	.word	0x3fcc28f5
   806e8:	5e353f7d 	.word	0x5e353f7d
   806ec:	3fcc49ba 	.word	0x3fcc49ba
   806f0:	2b020c4a 	.word	0x2b020c4a
   806f4:	3fd11687 	.word	0x3fd11687
   806f8:	78d4fdf4 	.word	0x78d4fdf4
   806fc:	3fd126e9 	.word	0x3fd126e9
   80700:	89374bc7 	.word	0x89374bc7
   80704:	3fd56041 	.word	0x3fd56041
   80708:	000864fd 	.word	0x000864fd
   8070c:	00086a9d 	.word	0x00086a9d
   80710:	000803f5 	.word	0x000803f5
   80714:	00086ab1 	.word	0x00086ab1
	}
	else if(finalULeft >= 0.335 && finalULeft <= 0.372){
   80718:	4620      	mov	r0, r4
   8071a:	4629      	mov	r1, r5
   8071c:	a310      	add	r3, pc, #64	; (adr r3, 80760 <valuesforPWMRight+0x290>)
   8071e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80722:	4e13      	ldr	r6, [pc, #76]	; (80770 <valuesforPWMRight+0x2a0>)
   80724:	47b0      	blx	r6
   80726:	b160      	cbz	r0, 80742 <valuesforPWMRight+0x272>
   80728:	4620      	mov	r0, r4
   8072a:	4629      	mov	r1, r5
   8072c:	a30e      	add	r3, pc, #56	; (adr r3, 80768 <valuesforPWMRight+0x298>)
   8072e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80732:	4e10      	ldr	r6, [pc, #64]	; (80774 <valuesforPWMRight+0x2a4>)
   80734:	47b0      	blx	r6
   80736:	b120      	cbz	r0, 80742 <valuesforPWMRight+0x272>
		RightWheelPWM(1210);
   80738:	f240 40ba 	movw	r0, #1210	; 0x4ba
   8073c:	4b0e      	ldr	r3, [pc, #56]	; (80778 <valuesforPWMRight+0x2a8>)
   8073e:	4798      	blx	r3
   80740:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if(finalULeft > 0.372){
   80742:	4620      	mov	r0, r4
   80744:	4629      	mov	r1, r5
   80746:	a308      	add	r3, pc, #32	; (adr r3, 80768 <valuesforPWMRight+0x298>)
   80748:	e9d3 2300 	ldrd	r2, r3, [r3]
   8074c:	4c0b      	ldr	r4, [pc, #44]	; (8077c <valuesforPWMRight+0x2ac>)
   8074e:	47a0      	blx	r4
   80750:	b118      	cbz	r0, 8075a <valuesforPWMRight+0x28a>
		RightWheelPWM(1200);
   80752:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   80756:	4b08      	ldr	r3, [pc, #32]	; (80778 <valuesforPWMRight+0x2a8>)
   80758:	4798      	blx	r3
   8075a:	bd70      	pop	{r4, r5, r6, pc}
   8075c:	f3af 8000 	nop.w
   80760:	d70a3d71 	.word	0xd70a3d71
   80764:	3fd570a3 	.word	0x3fd570a3
   80768:	16872b02 	.word	0x16872b02
   8076c:	3fd7ced9 	.word	0x3fd7ced9
   80770:	00086ab1 	.word	0x00086ab1
   80774:	00086a9d 	.word	0x00086a9d
   80778:	000803f5 	.word	0x000803f5
   8077c:	00086ac5 	.word	0x00086ac5

00080780 <TaskPIDRight>:
for running the wheel with a PID-regulator. It calls on a function containing
the actual PID and another function translating actual speed values to PWM
signals.
**************************************************************************/
void TaskPIDRight(void *p)
{
   80780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80784:	b083      	sub	sp, #12
	
	uint32_t joystick_y;
	uint32_t joystick_x;
	portTickType xLastWakeTime; //Last time the task was active.
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
   80786:	4b49      	ldr	r3, [pc, #292]	; (808ac <TaskPIDRight+0x12c>)
   80788:	4798      	blx	r3
   8078a:	9001      	str	r0, [sp, #4]
	int averageSensorValue = 0;
   8078c:	2500      	movs	r5, #0
	uint32_t temp = 0;
	while(1){
		xSampleTime = (portTickType)sampleTimeRight;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime); //Wait for the next cycle the task will be active.
		
		if((desiredValueRight > 0.0) && (desiredValueRight < 5)){
   8078e:	2700      	movs	r7, #0
	xLastWakeTime = xTaskGetTickCount();
	int averageSensorValue = 0;
	uint32_t temp = 0;
	while(1){
		xSampleTime = (portTickType)sampleTimeRight;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime); //Wait for the next cycle the task will be active.
   80790:	a801      	add	r0, sp, #4
   80792:	2132      	movs	r1, #50	; 0x32
   80794:	4b46      	ldr	r3, [pc, #280]	; (808b0 <TaskPIDRight+0x130>)
   80796:	4798      	blx	r3
		
		if((desiredValueRight > 0.0) && (desiredValueRight < 5)){
   80798:	4b46      	ldr	r3, [pc, #280]	; (808b4 <TaskPIDRight+0x134>)
   8079a:	681e      	ldr	r6, [r3, #0]
   8079c:	4630      	mov	r0, r6
   8079e:	4639      	mov	r1, r7
   807a0:	4b45      	ldr	r3, [pc, #276]	; (808b8 <TaskPIDRight+0x138>)
   807a2:	4798      	blx	r3
   807a4:	2800      	cmp	r0, #0
   807a6:	d066      	beq.n	80876 <TaskPIDRight+0xf6>
   807a8:	4630      	mov	r0, r6
   807aa:	4944      	ldr	r1, [pc, #272]	; (808bc <TaskPIDRight+0x13c>)
   807ac:	4b44      	ldr	r3, [pc, #272]	; (808c0 <TaskPIDRight+0x140>)
   807ae:	4798      	blx	r3
   807b0:	2800      	cmp	r0, #0
   807b2:	d060      	beq.n	80876 <TaskPIDRight+0xf6>
			filterRight[POSITIONS-1] = hastighetRightWheel;
   807b4:	f8df b114 	ldr.w	fp, [pc, #276]	; 808cc <TaskPIDRight+0x14c>
   807b8:	4b42      	ldr	r3, [pc, #264]	; (808c4 <TaskPIDRight+0x144>)
   807ba:	6818      	ldr	r0, [r3, #0]
   807bc:	4b42      	ldr	r3, [pc, #264]	; (808c8 <TaskPIDRight+0x148>)
   807be:	4798      	blx	r3
   807c0:	f8cb 000c 	str.w	r0, [fp, #12]
   807c4:	f1ab 0404 	sub.w	r4, fp, #4
   807c8:	f10b 0b0c 	add.w	fp, fp, #12
			
			for(int i = 0; i<POSITIONS; i++)
			{
				averageSensorValue =  (averageSensorValue + filterRight[i]);
   807cc:	f8df a100 	ldr.w	sl, [pc, #256]	; 808d0 <TaskPIDRight+0x150>
   807d0:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8090c <TaskPIDRight+0x18c>
   807d4:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80910 <TaskPIDRight+0x190>
   807d8:	4628      	mov	r0, r5
   807da:	47d0      	blx	sl
   807dc:	f854 1f04 	ldr.w	r1, [r4, #4]!
   807e0:	47c8      	blx	r9
   807e2:	47c0      	blx	r8
		vTaskDelayUntil(&xLastWakeTime, xSampleTime); //Wait for the next cycle the task will be active.
		
		if((desiredValueRight > 0.0) && (desiredValueRight < 5)){
			filterRight[POSITIONS-1] = hastighetRightWheel;
			
			for(int i = 0; i<POSITIONS; i++)
   807e4:	455c      	cmp	r4, fp
   807e6:	d1f8      	bne.n	807da <TaskPIDRight+0x5a>
			{
				averageSensorValue =  (averageSensorValue + filterRight[i]);
			}
			
			averageSensorValue =  (averageSensorValue / POSITIONS);
   807e8:	4603      	mov	r3, r0
   807ea:	2800      	cmp	r0, #0
   807ec:	bfb8      	it	lt
   807ee:	1cc3      	addlt	r3, r0, #3
   807f0:	109d      	asrs	r5, r3, #2
			
			for(int i = 0; i<POSITIONS-1; i++)
			{
				filterRight[i] = filterRight[i+1];
   807f2:	4b36      	ldr	r3, [pc, #216]	; (808cc <TaskPIDRight+0x14c>)
   807f4:	685a      	ldr	r2, [r3, #4]
   807f6:	601a      	str	r2, [r3, #0]
   807f8:	689a      	ldr	r2, [r3, #8]
   807fa:	605a      	str	r2, [r3, #4]
   807fc:	68da      	ldr	r2, [r3, #12]
   807fe:	609a      	str	r2, [r3, #8]
			}
			
			filterRight[POSITIONS-1] = 0;
   80800:	60df      	str	r7, [r3, #12]
			currentVRight = averageSensorValue;
   80802:	4628      	mov	r0, r5
   80804:	4b32      	ldr	r3, [pc, #200]	; (808d0 <TaskPIDRight+0x150>)
   80806:	4798      	blx	r3
   80808:	4b32      	ldr	r3, [pc, #200]	; (808d4 <TaskPIDRight+0x154>)
   8080a:	6018      	str	r0, [r3, #0]
			errorRight =  (float) ((float)desiredValueRight - (float)currentVRight/1000);
   8080c:	4932      	ldr	r1, [pc, #200]	; (808d8 <TaskPIDRight+0x158>)
   8080e:	4b33      	ldr	r3, [pc, #204]	; (808dc <TaskPIDRight+0x15c>)
   80810:	4798      	blx	r3
   80812:	4601      	mov	r1, r0
   80814:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 80914 <TaskPIDRight+0x194>
   80818:	4630      	mov	r0, r6
   8081a:	47d0      	blx	sl
   8081c:	4604      	mov	r4, r0
   8081e:	4b30      	ldr	r3, [pc, #192]	; (808e0 <TaskPIDRight+0x160>)
   80820:	6018      	str	r0, [r3, #0]

			prevErrorRight = errorRight;
   80822:	4b30      	ldr	r3, [pc, #192]	; (808e4 <TaskPIDRight+0x164>)
   80824:	6018      	str	r0, [r3, #0]
			wRight = wRight + errorRight;
   80826:	4e30      	ldr	r6, [pc, #192]	; (808e8 <TaskPIDRight+0x168>)
   80828:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8090c <TaskPIDRight+0x18c>
   8082c:	6831      	ldr	r1, [r6, #0]
   8082e:	47c0      	blx	r8
   80830:	4681      	mov	r9, r0
   80832:	6030      	str	r0, [r6, #0]
	float derivingPart;
	float signal;

	proportionalPart = (float)currErr;
	integralPart = (float)(sumErr * (sampTime/k_i));
	derivingPart = ((float)currErr - (float)prevErr) * (float)(k_d / sampTime);
   80834:	4620      	mov	r0, r4
   80836:	4621      	mov	r1, r4
   80838:	47d0      	blx	sl
   8083a:	4e2c      	ldr	r6, [pc, #176]	; (808ec <TaskPIDRight+0x16c>)
   8083c:	492c      	ldr	r1, [pc, #176]	; (808f0 <TaskPIDRight+0x170>)
   8083e:	47b0      	blx	r6
   80840:	4682      	mov	sl, r0
	float integralPart;
	float derivingPart;
	float signal;

	proportionalPart = (float)currErr;
	integralPart = (float)(sumErr * (sampTime/k_i));
   80842:	4648      	mov	r0, r9
   80844:	492b      	ldr	r1, [pc, #172]	; (808f4 <TaskPIDRight+0x174>)
   80846:	47b0      	blx	r6
   80848:	4601      	mov	r1, r0
	derivingPart = ((float)currErr - (float)prevErr) * (float)(k_d / sampTime);
	signal = (float)k_p * ((float)(proportionalPart + integralPart + derivingPart));
   8084a:	4620      	mov	r0, r4
   8084c:	47c0      	blx	r8
   8084e:	4601      	mov	r1, r0
   80850:	4650      	mov	r0, sl
   80852:	47c0      	blx	r8
   80854:	4928      	ldr	r1, [pc, #160]	; (808f8 <TaskPIDRight+0x178>)
   80856:	47b0      	blx	r6
   80858:	4604      	mov	r4, r0

			prevErrorRight = errorRight;
			wRight = wRight + errorRight;

			finalURight = (float)CalcSignalRight(samplingTimeRight, kpRight, kiRight, kdRight, errorRight, prevErrorRight, wRight);
			if(finalURight < 0)
   8085a:	4639      	mov	r1, r7
   8085c:	4b18      	ldr	r3, [pc, #96]	; (808c0 <TaskPIDRight+0x140>)
   8085e:	4798      	blx	r3
   80860:	b910      	cbnz	r0, 80868 <TaskPIDRight+0xe8>
			errorRight =  (float) ((float)desiredValueRight - (float)currentVRight/1000);

			prevErrorRight = errorRight;
			wRight = wRight + errorRight;

			finalURight = (float)CalcSignalRight(samplingTimeRight, kpRight, kiRight, kdRight, errorRight, prevErrorRight, wRight);
   80862:	4b26      	ldr	r3, [pc, #152]	; (808fc <TaskPIDRight+0x17c>)
   80864:	601c      	str	r4, [r3, #0]
   80866:	e001      	b.n	8086c <TaskPIDRight+0xec>
			if(finalURight < 0)
			{
				finalURight = 0;
   80868:	4b24      	ldr	r3, [pc, #144]	; (808fc <TaskPIDRight+0x17c>)
   8086a:	601f      	str	r7, [r3, #0]
			}
			valuesforPWMRight(finalURight);
   8086c:	4b23      	ldr	r3, [pc, #140]	; (808fc <TaskPIDRight+0x17c>)
   8086e:	6818      	ldr	r0, [r3, #0]
   80870:	4b23      	ldr	r3, [pc, #140]	; (80900 <TaskPIDRight+0x180>)
   80872:	4798      	blx	r3
   80874:	e78c      	b.n	80790 <TaskPIDRight+0x10>
			//temp = finalURight * 1000;
			//SendControlSignalLeftPID(temp, desiredValueRight,errorRight,averageSensorValue); // this function is used to set the values which will be sent to matlab.
		}else if (desiredValueRight == 0)
   80876:	4630      	mov	r0, r6
   80878:	4639      	mov	r1, r7
   8087a:	4b22      	ldr	r3, [pc, #136]	; (80904 <TaskPIDRight+0x184>)
   8087c:	4798      	blx	r3
   8087e:	b138      	cbz	r0, 80890 <TaskPIDRight+0x110>
		{
			wRight = 0;
   80880:	4b19      	ldr	r3, [pc, #100]	; (808e8 <TaskPIDRight+0x168>)
   80882:	601f      	str	r7, [r3, #0]
			finalURight = 0.0;
   80884:	4b1d      	ldr	r3, [pc, #116]	; (808fc <TaskPIDRight+0x17c>)
   80886:	601f      	str	r7, [r3, #0]
			valuesforPWMRight(finalURight);
   80888:	4638      	mov	r0, r7
   8088a:	4b1d      	ldr	r3, [pc, #116]	; (80900 <TaskPIDRight+0x180>)
   8088c:	4798      	blx	r3
   8088e:	e77f      	b.n	80790 <TaskPIDRight+0x10>
		}else if(desiredValueRight == 5)
   80890:	4630      	mov	r0, r6
   80892:	490a      	ldr	r1, [pc, #40]	; (808bc <TaskPIDRight+0x13c>)
   80894:	4b1b      	ldr	r3, [pc, #108]	; (80904 <TaskPIDRight+0x184>)
   80896:	4798      	blx	r3
   80898:	2800      	cmp	r0, #0
   8089a:	f43f af79 	beq.w	80790 <TaskPIDRight+0x10>
		{
			wRight  = 0;
   8089e:	4b12      	ldr	r3, [pc, #72]	; (808e8 <TaskPIDRight+0x168>)
   808a0:	601f      	str	r7, [r3, #0]
			RightWheelPWM(1690);
   808a2:	f240 609a 	movw	r0, #1690	; 0x69a
   808a6:	4b18      	ldr	r3, [pc, #96]	; (80908 <TaskPIDRight+0x188>)
   808a8:	4798      	blx	r3
   808aa:	e771      	b.n	80790 <TaskPIDRight+0x10>
   808ac:	00082cb1 	.word	0x00082cb1
   808b0:	00082ef9 	.word	0x00082ef9
   808b4:	20070228 	.word	0x20070228
   808b8:	000870bd 	.word	0x000870bd
   808bc:	40a00000 	.word	0x40a00000
   808c0:	00087081 	.word	0x00087081
   808c4:	20078584 	.word	0x20078584
   808c8:	00086c95 	.word	0x00086c95
   808cc:	2007022c 	.word	0x2007022c
   808d0:	00086c9d 	.word	0x00086c9d
   808d4:	20070220 	.word	0x20070220
   808d8:	447a0000 	.word	0x447a0000
   808dc:	00086ead 	.word	0x00086ead
   808e0:	2007023c 	.word	0x2007023c
   808e4:	2007021c 	.word	0x2007021c
   808e8:	20070224 	.word	0x20070224
   808ec:	00086d45 	.word	0x00086d45
   808f0:	bf4b4b72 	.word	0xbf4b4b72
   808f4:	3c8a2fde 	.word	0x3c8a2fde
   808f8:	3f294706 	.word	0x3f294706
   808fc:	20070240 	.word	0x20070240
   80900:	000804d1 	.word	0x000804d1
   80904:	0008706d 	.word	0x0008706d
   80908:	000803f5 	.word	0x000803f5
   8090c:	00086b35 	.word	0x00086b35
   80910:	000870d1 	.word	0x000870d1
   80914:	00086b31 	.word	0x00086b31

00080918 <getDesiredValueRight>:
/*********************************************************
 Returns desiredValue.
**********************************************************/
float getDesiredValueRight(void){
	return desiredValueRight;
}
   80918:	4b01      	ldr	r3, [pc, #4]	; (80920 <getDesiredValueRight+0x8>)
   8091a:	6818      	ldr	r0, [r3, #0]
   8091c:	4770      	bx	lr
   8091e:	bf00      	nop
   80920:	20070228 	.word	0x20070228

00080924 <setDesiredValueRight>:

/*********************************************************
 Sets value for drive forward and backwards and the setpoint for PID-regulator
**********************************************************/
void setDesiredValueRight(float tempdesire){
	desiredValueRight = tempdesire;
   80924:	4b01      	ldr	r3, [pc, #4]	; (8092c <setDesiredValueRight+0x8>)
   80926:	6018      	str	r0, [r3, #0]
   80928:	4770      	bx	lr
   8092a:	bf00      	nop
   8092c:	20070228 	.word	0x20070228

00080930 <TaskUltraLjud>:

/*
 This function contains the necessary logic for avoiding obstacles
*/
void TaskUltraLjud (void *p)
{
   80930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80934:	b083      	sub	sp, #12
	portTickType xLastWakeTime; //Last time the task was active.
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount(); 
   80936:	4b83      	ldr	r3, [pc, #524]	; (80b44 <TaskUltraLjud+0x214>)
   80938:	4798      	blx	r3
   8093a:	9001      	str	r0, [sp, #4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8093c:	4b82      	ldr	r3, [pc, #520]	; (80b48 <TaskUltraLjud+0x218>)
   8093e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80942:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80944:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80948:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8094c:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8094e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80956:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80958:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8095c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80960:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80962:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80966:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8096a:	2280      	movs	r2, #128	; 0x80
   8096c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8096e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80972:	f44f 7280 	mov.w	r2, #256	; 0x100
   80976:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80978:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8097c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80980:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80984:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80986:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pinMode(pin13,OUTPUT);
	
	while (1)
	{
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);//Wait for the next cycle the task will be active.
   8098a:	4e70      	ldr	r6, [pc, #448]	; (80b4c <TaskUltraLjud+0x21c>)
		
		if(standby == 0){
   8098c:	4d70      	ldr	r5, [pc, #448]	; (80b50 <TaskUltraLjud+0x220>)
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8098e:	4c6e      	ldr	r4, [pc, #440]	; (80b48 <TaskUltraLjud+0x218>)
					setDesiredValueLeft(0);
					setDesiredValueRight(0);
				}
				if((getPin(pin3) == HIGH) && (getPin(pin5) == HIGH)){ // Right and Center ultrasound detects obstacle
					drive = 1;
					setDesiredValueLeft(5);
   80990:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80b5c <TaskUltraLjud+0x22c>
					setDesiredValueRight(0);
   80994:	2700      	movs	r7, #0
				setDesiredValueLeft(0);
				setDesiredValueRight(0);
				} else if( getPin(pin5) == HIGH){						// Only Right ultrasound detects obstacle
				drive = 1;
				setDesiredValueLeft(0);
				setDesiredValueRight(0.3);
   80996:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80b60 <TaskUltraLjud+0x230>
	pinMode(pin13,OUTPUT);
	
	while (1)
	{
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);//Wait for the next cycle the task will be active.
   8099a:	a801      	add	r0, sp, #4
   8099c:	2196      	movs	r1, #150	; 0x96
   8099e:	47b0      	blx	r6
		
		if(standby == 0){
   809a0:	682b      	ldr	r3, [r5, #0]
   809a2:	2b00      	cmp	r3, #0
   809a4:	d1f9      	bne.n	8099a <TaskUltraLjud+0x6a>
   809a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			if((getPin(pin5) == HIGH) && (getPin(pin4) == HIGH) &&  (getPin(pin3) == HIGH)){ // All ultrasound detects obstacle
   809a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   809ac:	d01a      	beq.n	809e4 <TaskUltraLjud+0xb4>
   809ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   809b0:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   809b4:	d016      	beq.n	809e4 <TaskUltraLjud+0xb4>
   809b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   809b8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   809bc:	d012      	beq.n	809e4 <TaskUltraLjud+0xb4>
				drive=1;
   809be:	2201      	movs	r2, #1
   809c0:	4b64      	ldr	r3, [pc, #400]	; (80b54 <TaskUltraLjud+0x224>)
   809c2:	601a      	str	r2, [r3, #0]
				setDesiredValueLeft(5);
   809c4:	4640      	mov	r0, r8
   809c6:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80b64 <TaskUltraLjud+0x234>
   809ca:	47d8      	blx	fp
				setDesiredValueRight(5);
   809cc:	4640      	mov	r0, r8
   809ce:	f8df a198 	ldr.w	sl, [pc, #408]	; 80b68 <TaskUltraLjud+0x238>
   809d2:	47d0      	blx	sl
				vTaskDelay(100);
   809d4:	2064      	movs	r0, #100	; 0x64
   809d6:	4b60      	ldr	r3, [pc, #384]	; (80b58 <TaskUltraLjud+0x228>)
   809d8:	4798      	blx	r3
				setDesiredValueLeft(0);
   809da:	4638      	mov	r0, r7
   809dc:	47d8      	blx	fp
				setDesiredValueRight(0);
   809de:	4638      	mov	r0, r7
   809e0:	47d0      	blx	sl
   809e2:	e7da      	b.n	8099a <TaskUltraLjud+0x6a>
   809e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				} else if(((getPin(pin4) == HIGH) && (getPin(pin3) == HIGH)) || ((getPin(pin3) == HIGH) && (getPin(pin5) == HIGH)) || ((getPin(pin4) == HIGH) && (getPin(pin5) == HIGH))){
   809e6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   809ea:	d003      	beq.n	809f4 <TaskUltraLjud+0xc4>
   809ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   809ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   809f2:	d10f      	bne.n	80a14 <TaskUltraLjud+0xe4>
   809f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   809f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   809fa:	d003      	beq.n	80a04 <TaskUltraLjud+0xd4>
   809fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   809fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   80a02:	d107      	bne.n	80a14 <TaskUltraLjud+0xe4>
   80a04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a06:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   80a0a:	d043      	beq.n	80a94 <TaskUltraLjud+0x164>
   80a0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   80a12:	d03f      	beq.n	80a94 <TaskUltraLjud+0x164>
   80a14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				
				if((getPin(pin4) == HIGH) && (getPin(pin3) == HIGH)){  // Left and Center ultrasound detects obstacle
   80a16:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   80a1a:	d015      	beq.n	80a48 <TaskUltraLjud+0x118>
   80a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a1e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   80a22:	d011      	beq.n	80a48 <TaskUltraLjud+0x118>
					drive = 1;
   80a24:	2201      	movs	r2, #1
   80a26:	4b4b      	ldr	r3, [pc, #300]	; (80b54 <TaskUltraLjud+0x224>)
   80a28:	601a      	str	r2, [r3, #0]
					setDesiredValueLeft(0);
   80a2a:	4638      	mov	r0, r7
   80a2c:	f8df b134 	ldr.w	fp, [pc, #308]	; 80b64 <TaskUltraLjud+0x234>
   80a30:	47d8      	blx	fp
					setDesiredValueRight(5);
   80a32:	4640      	mov	r0, r8
   80a34:	f8df a130 	ldr.w	sl, [pc, #304]	; 80b68 <TaskUltraLjud+0x238>
   80a38:	47d0      	blx	sl
					vTaskDelay(100);
   80a3a:	2064      	movs	r0, #100	; 0x64
   80a3c:	4b46      	ldr	r3, [pc, #280]	; (80b58 <TaskUltraLjud+0x228>)
   80a3e:	4798      	blx	r3
					setDesiredValueLeft(0);
   80a40:	4638      	mov	r0, r7
   80a42:	47d8      	blx	fp
					setDesiredValueRight(0);
   80a44:	4638      	mov	r0, r7
   80a46:	47d0      	blx	sl
   80a48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				}
				if((getPin(pin3) == HIGH) && (getPin(pin5) == HIGH)){ // Right and Center ultrasound detects obstacle
   80a4a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   80a4e:	d015      	beq.n	80a7c <TaskUltraLjud+0x14c>
   80a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   80a56:	d011      	beq.n	80a7c <TaskUltraLjud+0x14c>
					drive = 1;
   80a58:	2201      	movs	r2, #1
   80a5a:	4b3e      	ldr	r3, [pc, #248]	; (80b54 <TaskUltraLjud+0x224>)
   80a5c:	601a      	str	r2, [r3, #0]
					setDesiredValueLeft(5);
   80a5e:	4640      	mov	r0, r8
   80a60:	f8df b100 	ldr.w	fp, [pc, #256]	; 80b64 <TaskUltraLjud+0x234>
   80a64:	47d8      	blx	fp
					setDesiredValueRight(0);
   80a66:	4638      	mov	r0, r7
   80a68:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 80b68 <TaskUltraLjud+0x238>
   80a6c:	47d0      	blx	sl
					vTaskDelay(100);
   80a6e:	2064      	movs	r0, #100	; 0x64
   80a70:	4b39      	ldr	r3, [pc, #228]	; (80b58 <TaskUltraLjud+0x228>)
   80a72:	4798      	blx	r3
					setDesiredValueLeft(0);
   80a74:	4638      	mov	r0, r7
   80a76:	47d8      	blx	fp
					setDesiredValueRight(0);
   80a78:	4638      	mov	r0, r7
   80a7a:	47d0      	blx	sl
   80a7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				}
				if((getPin(pin4) == HIGH) && (getPin(pin5) == HIGH)){ // Both Right and Left Ultrasound detects obstacle
   80a7e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   80a82:	d08a      	beq.n	8099a <TaskUltraLjud+0x6a>
   80a84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   80a8a:	d086      	beq.n	8099a <TaskUltraLjud+0x6a>
					drive  = 0;
   80a8c:	2200      	movs	r2, #0
   80a8e:	4b31      	ldr	r3, [pc, #196]	; (80b54 <TaskUltraLjud+0x224>)
   80a90:	601a      	str	r2, [r3, #0]
   80a92:	e782      	b.n	8099a <TaskUltraLjud+0x6a>
   80a94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				}
				} else if(getPin(pin3) == HIGH){						//  Only center ultrasound detects obstacle
   80a96:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   80a9a:	d012      	beq.n	80ac2 <TaskUltraLjud+0x192>
				drive = 1;
   80a9c:	2201      	movs	r2, #1
   80a9e:	4b2d      	ldr	r3, [pc, #180]	; (80b54 <TaskUltraLjud+0x224>)
   80aa0:	601a      	str	r2, [r3, #0]
				setDesiredValueLeft(0.3);
   80aa2:	4648      	mov	r0, r9
   80aa4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80b64 <TaskUltraLjud+0x234>
   80aa8:	47d8      	blx	fp
				setDesiredValueRight(0);
   80aaa:	4638      	mov	r0, r7
   80aac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80b68 <TaskUltraLjud+0x238>
   80ab0:	47d0      	blx	sl
				vTaskDelay(100);
   80ab2:	2064      	movs	r0, #100	; 0x64
   80ab4:	4b28      	ldr	r3, [pc, #160]	; (80b58 <TaskUltraLjud+0x228>)
   80ab6:	4798      	blx	r3
				setDesiredValueLeft(0);
   80ab8:	4638      	mov	r0, r7
   80aba:	47d8      	blx	fp
				setDesiredValueRight(0);
   80abc:	4638      	mov	r0, r7
   80abe:	47d0      	blx	sl
   80ac0:	e76b      	b.n	8099a <TaskUltraLjud+0x6a>
   80ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				} else if(getPin(pin4) == HIGH){						// Only Left ultrasound detects obstacle
   80ac4:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   80ac8:	d012      	beq.n	80af0 <TaskUltraLjud+0x1c0>
				drive = 1;
   80aca:	2201      	movs	r2, #1
   80acc:	4b21      	ldr	r3, [pc, #132]	; (80b54 <TaskUltraLjud+0x224>)
   80ace:	601a      	str	r2, [r3, #0]
				setDesiredValueLeft(0.3);
   80ad0:	4648      	mov	r0, r9
   80ad2:	f8df b090 	ldr.w	fp, [pc, #144]	; 80b64 <TaskUltraLjud+0x234>
   80ad6:	47d8      	blx	fp
				setDesiredValueRight(0);
   80ad8:	4638      	mov	r0, r7
   80ada:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80b68 <TaskUltraLjud+0x238>
   80ade:	47d0      	blx	sl
				vTaskDelay(100);
   80ae0:	2064      	movs	r0, #100	; 0x64
   80ae2:	4b1d      	ldr	r3, [pc, #116]	; (80b58 <TaskUltraLjud+0x228>)
   80ae4:	4798      	blx	r3
				setDesiredValueLeft(0);
   80ae6:	4638      	mov	r0, r7
   80ae8:	47d8      	blx	fp
				setDesiredValueRight(0);
   80aea:	4638      	mov	r0, r7
   80aec:	47d0      	blx	sl
   80aee:	e754      	b.n	8099a <TaskUltraLjud+0x6a>
   80af0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				} else if( getPin(pin5) == HIGH){						// Only Right ultrasound detects obstacle
   80af2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   80af6:	d012      	beq.n	80b1e <TaskUltraLjud+0x1ee>
				drive = 1;
   80af8:	2201      	movs	r2, #1
   80afa:	4b16      	ldr	r3, [pc, #88]	; (80b54 <TaskUltraLjud+0x224>)
   80afc:	601a      	str	r2, [r3, #0]
				setDesiredValueLeft(0);
   80afe:	4638      	mov	r0, r7
   80b00:	f8df b060 	ldr.w	fp, [pc, #96]	; 80b64 <TaskUltraLjud+0x234>
   80b04:	47d8      	blx	fp
				setDesiredValueRight(0.3);
   80b06:	4648      	mov	r0, r9
   80b08:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80b68 <TaskUltraLjud+0x238>
   80b0c:	47d0      	blx	sl
				vTaskDelay(100);
   80b0e:	2064      	movs	r0, #100	; 0x64
   80b10:	4b11      	ldr	r3, [pc, #68]	; (80b58 <TaskUltraLjud+0x228>)
   80b12:	4798      	blx	r3
				setDesiredValueLeft(0);
   80b14:	4638      	mov	r0, r7
   80b16:	47d8      	blx	fp
				setDesiredValueRight(0);
   80b18:	4638      	mov	r0, r7
   80b1a:	47d0      	blx	sl
   80b1c:	e73d      	b.n	8099a <TaskUltraLjud+0x6a>
   80b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			}
			else if ((getPin(pin5) == LOW) && (getPin(pin4) == LOW) &&  (getPin(pin3) == LOW)){ // When no ultrasound detects  obstacle
   80b20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   80b24:	f47f af39 	bne.w	8099a <TaskUltraLjud+0x6a>
   80b28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80b2a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   80b2e:	f47f af34 	bne.w	8099a <TaskUltraLjud+0x6a>
   80b32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80b34:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   80b38:	f47f af2f 	bne.w	8099a <TaskUltraLjud+0x6a>
				drive =0;
   80b3c:	2200      	movs	r2, #0
   80b3e:	4b05      	ldr	r3, [pc, #20]	; (80b54 <TaskUltraLjud+0x224>)
   80b40:	601a      	str	r2, [r3, #0]
   80b42:	e72a      	b.n	8099a <TaskUltraLjud+0x6a>
   80b44:	00082cb1 	.word	0x00082cb1
   80b48:	400e1200 	.word	0x400e1200
   80b4c:	00082ef9 	.word	0x00082ef9
   80b50:	20070250 	.word	0x20070250
   80b54:	20070244 	.word	0x20070244
   80b58:	00082f89 	.word	0x00082f89
   80b5c:	40a00000 	.word	0x40a00000
   80b60:	3e99999a 	.word	0x3e99999a
   80b64:	00081415 	.word	0x00081415
   80b68:	00080925 	.word	0x00080925

00080b6c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80b6c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80b6e:	0189      	lsls	r1, r1, #6
   80b70:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80b72:	2402      	movs	r4, #2
   80b74:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80b76:	f04f 31ff 	mov.w	r1, #4294967295
   80b7a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80b7c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80b7e:	605a      	str	r2, [r3, #4]
}
   80b80:	f85d 4b04 	ldr.w	r4, [sp], #4
   80b84:	4770      	bx	lr
   80b86:	bf00      	nop

00080b88 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   80b88:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   80b8c:	4770      	bx	lr
   80b8e:	bf00      	nop

00080b90 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80b90:	0189      	lsls	r1, r1, #6
   80b92:	2305      	movs	r3, #5
   80b94:	5043      	str	r3, [r0, r1]
   80b96:	4770      	bx	lr

00080b98 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80b98:	0189      	lsls	r1, r1, #6
   80b9a:	2302      	movs	r3, #2
   80b9c:	5043      	str	r3, [r0, r1]
   80b9e:	4770      	bx	lr

00080ba0 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80ba0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80ba4:	6908      	ldr	r0, [r1, #16]
}
   80ba6:	4770      	bx	lr

00080ba8 <TaskCalculateLeftWheel>:

/**********************************************
Calculate the velocity for left wheel.
***********************************************/
void TaskCalculateLeftWheel(void *p)
{
   80ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80bac:	b085      	sub	sp, #20

	portTickType xLastWakeTime;
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
   80bae:	4b35      	ldr	r3, [pc, #212]	; (80c84 <TaskCalculateLeftWheel+0xdc>)
   80bb0:	4798      	blx	r3
   80bb2:	9003      	str	r0, [sp, #12]
	
	while(1)
	{
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80bb4:	4f34      	ldr	r7, [pc, #208]	; (80c88 <TaskCalculateLeftWheel+0xe0>)
		
		if  (getDesiredValueLeft() <4 && getDesiredValueLeft() >= 0){ //If desired value for driving forward
   80bb6:	4d35      	ldr	r5, [pc, #212]	; (80c8c <TaskCalculateLeftWheel+0xe4>)
   80bb8:	f04f 4681 	mov.w	r6, #1082130432	; 0x40800000

			if((distanceLeftWheel > 0) && (sekLeftWheel > 0)){
				hastighetLeftWheel = (((float)((float)distanceLeftWheel/(float)sekLeftWheel)*1000)); //velocity
			}
			}else{ //reset
			sekLeftWheel = 0;
   80bbc:	2400      	movs	r4, #0
				distanceLeftWheel = (((float)( (float)counterLeftWheel/36) * (float) omkretsHjul)*1000); //distance
				sekLeftWheel += ((float)timerLeftWheel/(float)hzforcpu) * 1000;	//time
			}

			if((distanceLeftWheel > 0) && (sekLeftWheel > 0)){
				hastighetLeftWheel = (((float)((float)distanceLeftWheel/(float)sekLeftWheel)*1000)); //velocity
   80bbe:	f8df a114 	ldr.w	sl, [pc, #276]	; 80cd4 <TaskCalculateLeftWheel+0x12c>
	xLastWakeTime = xTaskGetTickCount();
	
	while(1)
	{
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80bc2:	a803      	add	r0, sp, #12
   80bc4:	2106      	movs	r1, #6
   80bc6:	47b8      	blx	r7
		
		if  (getDesiredValueLeft() <4 && getDesiredValueLeft() >= 0){ //If desired value for driving forward
   80bc8:	47a8      	blx	r5
   80bca:	4631      	mov	r1, r6
   80bcc:	4b30      	ldr	r3, [pc, #192]	; (80c90 <TaskCalculateLeftWheel+0xe8>)
   80bce:	4798      	blx	r3
   80bd0:	2800      	cmp	r0, #0
   80bd2:	d04a      	beq.n	80c6a <TaskCalculateLeftWheel+0xc2>
   80bd4:	47a8      	blx	r5
   80bd6:	4621      	mov	r1, r4
   80bd8:	4b2e      	ldr	r3, [pc, #184]	; (80c94 <TaskCalculateLeftWheel+0xec>)
   80bda:	4798      	blx	r3
   80bdc:	2800      	cmp	r0, #0
   80bde:	d044      	beq.n	80c6a <TaskCalculateLeftWheel+0xc2>
			if(counterLeftWheel != 0){
   80be0:	4b2d      	ldr	r3, [pc, #180]	; (80c98 <TaskCalculateLeftWheel+0xf0>)
   80be2:	6818      	ldr	r0, [r3, #0]
   80be4:	b318      	cbz	r0, 80c2e <TaskCalculateLeftWheel+0x86>
				distanceLeftWheel = (((float)( (float)counterLeftWheel/36) * (float) omkretsHjul)*1000); //distance
   80be6:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80cd8 <TaskCalculateLeftWheel+0x130>
   80bea:	47c8      	blx	r9
   80bec:	492b      	ldr	r1, [pc, #172]	; (80c9c <TaskCalculateLeftWheel+0xf4>)
   80bee:	4b2c      	ldr	r3, [pc, #176]	; (80ca0 <TaskCalculateLeftWheel+0xf8>)
   80bf0:	4798      	blx	r3
   80bf2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80cc0 <TaskCalculateLeftWheel+0x118>
   80bf6:	4b2b      	ldr	r3, [pc, #172]	; (80ca4 <TaskCalculateLeftWheel+0xfc>)
   80bf8:	6819      	ldr	r1, [r3, #0]
   80bfa:	47c0      	blx	r8
   80bfc:	4651      	mov	r1, sl
   80bfe:	47c0      	blx	r8
   80c00:	4b29      	ldr	r3, [pc, #164]	; (80ca8 <TaskCalculateLeftWheel+0x100>)
   80c02:	6018      	str	r0, [r3, #0]
				sekLeftWheel += ((float)timerLeftWheel/(float)hzforcpu) * 1000;	//time
   80c04:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80cbc <TaskCalculateLeftWheel+0x114>
   80c08:	4b28      	ldr	r3, [pc, #160]	; (80cac <TaskCalculateLeftWheel+0x104>)
   80c0a:	6818      	ldr	r0, [r3, #0]
   80c0c:	47c8      	blx	r9
   80c0e:	9001      	str	r0, [sp, #4]
   80c10:	4b27      	ldr	r3, [pc, #156]	; (80cb0 <TaskCalculateLeftWheel+0x108>)
   80c12:	6818      	ldr	r0, [r3, #0]
   80c14:	47c8      	blx	r9
   80c16:	4601      	mov	r1, r0
   80c18:	9801      	ldr	r0, [sp, #4]
   80c1a:	4b21      	ldr	r3, [pc, #132]	; (80ca0 <TaskCalculateLeftWheel+0xf8>)
   80c1c:	4798      	blx	r3
   80c1e:	4651      	mov	r1, sl
   80c20:	47c0      	blx	r8
   80c22:	f8db 1000 	ldr.w	r1, [fp]
   80c26:	4b23      	ldr	r3, [pc, #140]	; (80cb4 <TaskCalculateLeftWheel+0x10c>)
   80c28:	4798      	blx	r3
   80c2a:	f8cb 0000 	str.w	r0, [fp]
			}

			if((distanceLeftWheel > 0) && (sekLeftWheel > 0)){
   80c2e:	4b1e      	ldr	r3, [pc, #120]	; (80ca8 <TaskCalculateLeftWheel+0x100>)
   80c30:	f8d3 8000 	ldr.w	r8, [r3]
   80c34:	4640      	mov	r0, r8
   80c36:	4621      	mov	r1, r4
   80c38:	4b1f      	ldr	r3, [pc, #124]	; (80cb8 <TaskCalculateLeftWheel+0x110>)
   80c3a:	4798      	blx	r3
   80c3c:	2800      	cmp	r0, #0
   80c3e:	d0c0      	beq.n	80bc2 <TaskCalculateLeftWheel+0x1a>
   80c40:	4b1e      	ldr	r3, [pc, #120]	; (80cbc <TaskCalculateLeftWheel+0x114>)
   80c42:	f8d3 9000 	ldr.w	r9, [r3]
   80c46:	4648      	mov	r0, r9
   80c48:	4621      	mov	r1, r4
   80c4a:	4b1b      	ldr	r3, [pc, #108]	; (80cb8 <TaskCalculateLeftWheel+0x110>)
   80c4c:	4798      	blx	r3
   80c4e:	2800      	cmp	r0, #0
   80c50:	d0b7      	beq.n	80bc2 <TaskCalculateLeftWheel+0x1a>
				hastighetLeftWheel = (((float)((float)distanceLeftWheel/(float)sekLeftWheel)*1000)); //velocity
   80c52:	4640      	mov	r0, r8
   80c54:	4649      	mov	r1, r9
   80c56:	4b12      	ldr	r3, [pc, #72]	; (80ca0 <TaskCalculateLeftWheel+0xf8>)
   80c58:	4798      	blx	r3
   80c5a:	4651      	mov	r1, sl
   80c5c:	4b18      	ldr	r3, [pc, #96]	; (80cc0 <TaskCalculateLeftWheel+0x118>)
   80c5e:	4798      	blx	r3
   80c60:	4b18      	ldr	r3, [pc, #96]	; (80cc4 <TaskCalculateLeftWheel+0x11c>)
   80c62:	4798      	blx	r3
   80c64:	4b18      	ldr	r3, [pc, #96]	; (80cc8 <TaskCalculateLeftWheel+0x120>)
   80c66:	6018      	str	r0, [r3, #0]
   80c68:	e7ab      	b.n	80bc2 <TaskCalculateLeftWheel+0x1a>
			}
			}else{ //reset
			sekLeftWheel = 0;
   80c6a:	4b14      	ldr	r3, [pc, #80]	; (80cbc <TaskCalculateLeftWheel+0x114>)
   80c6c:	601c      	str	r4, [r3, #0]
			distanceLeftWheel = 0;
   80c6e:	4b0e      	ldr	r3, [pc, #56]	; (80ca8 <TaskCalculateLeftWheel+0x100>)
   80c70:	601c      	str	r4, [r3, #0]
			counterLeftWheel = 0;
   80c72:	2100      	movs	r1, #0
   80c74:	4b08      	ldr	r3, [pc, #32]	; (80c98 <TaskCalculateLeftWheel+0xf0>)
   80c76:	6019      	str	r1, [r3, #0]
			timerLeftWheel = 0;
   80c78:	4b0c      	ldr	r3, [pc, #48]	; (80cac <TaskCalculateLeftWheel+0x104>)
   80c7a:	6019      	str	r1, [r3, #0]
			tc_stop(TC0,0);
   80c7c:	4813      	ldr	r0, [pc, #76]	; (80ccc <TaskCalculateLeftWheel+0x124>)
   80c7e:	4b14      	ldr	r3, [pc, #80]	; (80cd0 <TaskCalculateLeftWheel+0x128>)
   80c80:	4798      	blx	r3
   80c82:	e79e      	b.n	80bc2 <TaskCalculateLeftWheel+0x1a>
   80c84:	00082cb1 	.word	0x00082cb1
   80c88:	00082ef9 	.word	0x00082ef9
   80c8c:	00081409 	.word	0x00081409
   80c90:	00087081 	.word	0x00087081
   80c94:	000870a9 	.word	0x000870a9
   80c98:	20078590 	.word	0x20078590
   80c9c:	42100000 	.word	0x42100000
   80ca0:	00086ead 	.word	0x00086ead
   80ca4:	2007012c 	.word	0x2007012c
   80ca8:	20070248 	.word	0x20070248
   80cac:	20078588 	.word	0x20078588
   80cb0:	20070130 	.word	0x20070130
   80cb4:	00086b35 	.word	0x00086b35
   80cb8:	000870bd 	.word	0x000870bd
   80cbc:	2007858c 	.word	0x2007858c
   80cc0:	00086d45 	.word	0x00086d45
   80cc4:	000870d1 	.word	0x000870d1
   80cc8:	200785a8 	.word	0x200785a8
   80ccc:	40080000 	.word	0x40080000
   80cd0:	00080b99 	.word	0x00080b99
   80cd4:	447a0000 	.word	0x447a0000
   80cd8:	00086c95 	.word	0x00086c95

00080cdc <TaskCalculateRightWheel>:

/************************************************
* Calculate velocity for right wheel
*************************************************/
void TaskCalculateRightWheel(void *p)
{
   80cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ce0:	b085      	sub	sp, #20

	portTickType xLastWakeTime;
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
   80ce2:	4b36      	ldr	r3, [pc, #216]	; (80dbc <TaskCalculateRightWheel+0xe0>)
   80ce4:	4798      	blx	r3
   80ce6:	9003      	str	r0, [sp, #12]

	while(1)
	{
		xSampleTime = (portTickType)sampleTimeRight;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80ce8:	4f35      	ldr	r7, [pc, #212]	; (80dc0 <TaskCalculateRightWheel+0xe4>)
		
		if(getDesiredValueRight() <4 && getDesiredValueRight() >= 0){//If desired value for driving forward
   80cea:	4d36      	ldr	r5, [pc, #216]	; (80dc4 <TaskCalculateRightWheel+0xe8>)
   80cec:	f04f 4681 	mov.w	r6, #1082130432	; 0x40800000

			if((distanceRightWheel > 0) && (sekRightWheel > 0)){
				hastighetRightWheel = (((float)((float)distanceRightWheel/(float)sekRightWheel)*1000)); //velocity
			}
			}else{ // reset
			sekRightWheel = 0;
   80cf0:	2400      	movs	r4, #0
				distanceRightWheel = (float) ((((float) counterRightWheel/36) * (float) omkretsHjulRight)*1000); //distance
				sekRightWheel += ((float)timerRightWheel/(float)hzforcpuRight) * 1000; // time
			}

			if((distanceRightWheel > 0) && (sekRightWheel > 0)){
				hastighetRightWheel = (((float)((float)distanceRightWheel/(float)sekRightWheel)*1000)); //velocity
   80cf2:	f8df a118 	ldr.w	sl, [pc, #280]	; 80e0c <TaskCalculateRightWheel+0x130>
	xLastWakeTime = xTaskGetTickCount();

	while(1)
	{
		xSampleTime = (portTickType)sampleTimeRight;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80cf6:	a803      	add	r0, sp, #12
   80cf8:	2106      	movs	r1, #6
   80cfa:	47b8      	blx	r7
		
		if(getDesiredValueRight() <4 && getDesiredValueRight() >= 0){//If desired value for driving forward
   80cfc:	47a8      	blx	r5
   80cfe:	4631      	mov	r1, r6
   80d00:	4b31      	ldr	r3, [pc, #196]	; (80dc8 <TaskCalculateRightWheel+0xec>)
   80d02:	4798      	blx	r3
   80d04:	2800      	cmp	r0, #0
   80d06:	d04a      	beq.n	80d9e <TaskCalculateRightWheel+0xc2>
   80d08:	47a8      	blx	r5
   80d0a:	4621      	mov	r1, r4
   80d0c:	4b2f      	ldr	r3, [pc, #188]	; (80dcc <TaskCalculateRightWheel+0xf0>)
   80d0e:	4798      	blx	r3
   80d10:	2800      	cmp	r0, #0
   80d12:	d044      	beq.n	80d9e <TaskCalculateRightWheel+0xc2>
			if(counterRightWheel != 0){
   80d14:	4b2e      	ldr	r3, [pc, #184]	; (80dd0 <TaskCalculateRightWheel+0xf4>)
   80d16:	6818      	ldr	r0, [r3, #0]
   80d18:	b318      	cbz	r0, 80d62 <TaskCalculateRightWheel+0x86>
				distanceRightWheel = (float) ((((float) counterRightWheel/36) * (float) omkretsHjulRight)*1000); //distance
   80d1a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80e10 <TaskCalculateRightWheel+0x134>
   80d1e:	47c8      	blx	r9
   80d20:	492c      	ldr	r1, [pc, #176]	; (80dd4 <TaskCalculateRightWheel+0xf8>)
   80d22:	4b2d      	ldr	r3, [pc, #180]	; (80dd8 <TaskCalculateRightWheel+0xfc>)
   80d24:	4798      	blx	r3
   80d26:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80df8 <TaskCalculateRightWheel+0x11c>
   80d2a:	4b2c      	ldr	r3, [pc, #176]	; (80ddc <TaskCalculateRightWheel+0x100>)
   80d2c:	6819      	ldr	r1, [r3, #0]
   80d2e:	47c0      	blx	r8
   80d30:	4651      	mov	r1, sl
   80d32:	47c0      	blx	r8
   80d34:	4b2a      	ldr	r3, [pc, #168]	; (80de0 <TaskCalculateRightWheel+0x104>)
   80d36:	6018      	str	r0, [r3, #0]
				sekRightWheel += ((float)timerRightWheel/(float)hzforcpuRight) * 1000; // time
   80d38:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80df4 <TaskCalculateRightWheel+0x118>
   80d3c:	4b29      	ldr	r3, [pc, #164]	; (80de4 <TaskCalculateRightWheel+0x108>)
   80d3e:	6818      	ldr	r0, [r3, #0]
   80d40:	47c8      	blx	r9
   80d42:	9001      	str	r0, [sp, #4]
   80d44:	4b28      	ldr	r3, [pc, #160]	; (80de8 <TaskCalculateRightWheel+0x10c>)
   80d46:	6818      	ldr	r0, [r3, #0]
   80d48:	47c8      	blx	r9
   80d4a:	4601      	mov	r1, r0
   80d4c:	9801      	ldr	r0, [sp, #4]
   80d4e:	4b22      	ldr	r3, [pc, #136]	; (80dd8 <TaskCalculateRightWheel+0xfc>)
   80d50:	4798      	blx	r3
   80d52:	4651      	mov	r1, sl
   80d54:	47c0      	blx	r8
   80d56:	f8db 1000 	ldr.w	r1, [fp]
   80d5a:	4b24      	ldr	r3, [pc, #144]	; (80dec <TaskCalculateRightWheel+0x110>)
   80d5c:	4798      	blx	r3
   80d5e:	f8cb 0000 	str.w	r0, [fp]
			}

			if((distanceRightWheel > 0) && (sekRightWheel > 0)){
   80d62:	4b1f      	ldr	r3, [pc, #124]	; (80de0 <TaskCalculateRightWheel+0x104>)
   80d64:	f8d3 8000 	ldr.w	r8, [r3]
   80d68:	4640      	mov	r0, r8
   80d6a:	4621      	mov	r1, r4
   80d6c:	4b20      	ldr	r3, [pc, #128]	; (80df0 <TaskCalculateRightWheel+0x114>)
   80d6e:	4798      	blx	r3
   80d70:	2800      	cmp	r0, #0
   80d72:	d0c0      	beq.n	80cf6 <TaskCalculateRightWheel+0x1a>
   80d74:	4b1f      	ldr	r3, [pc, #124]	; (80df4 <TaskCalculateRightWheel+0x118>)
   80d76:	f8d3 9000 	ldr.w	r9, [r3]
   80d7a:	4648      	mov	r0, r9
   80d7c:	4621      	mov	r1, r4
   80d7e:	4b1c      	ldr	r3, [pc, #112]	; (80df0 <TaskCalculateRightWheel+0x114>)
   80d80:	4798      	blx	r3
   80d82:	2800      	cmp	r0, #0
   80d84:	d0b7      	beq.n	80cf6 <TaskCalculateRightWheel+0x1a>
				hastighetRightWheel = (((float)((float)distanceRightWheel/(float)sekRightWheel)*1000)); //velocity
   80d86:	4640      	mov	r0, r8
   80d88:	4649      	mov	r1, r9
   80d8a:	4b13      	ldr	r3, [pc, #76]	; (80dd8 <TaskCalculateRightWheel+0xfc>)
   80d8c:	4798      	blx	r3
   80d8e:	4651      	mov	r1, sl
   80d90:	4b19      	ldr	r3, [pc, #100]	; (80df8 <TaskCalculateRightWheel+0x11c>)
   80d92:	4798      	blx	r3
   80d94:	4b19      	ldr	r3, [pc, #100]	; (80dfc <TaskCalculateRightWheel+0x120>)
   80d96:	4798      	blx	r3
   80d98:	4b19      	ldr	r3, [pc, #100]	; (80e00 <TaskCalculateRightWheel+0x124>)
   80d9a:	6018      	str	r0, [r3, #0]
   80d9c:	e7ab      	b.n	80cf6 <TaskCalculateRightWheel+0x1a>
			}
			}else{ // reset
			sekRightWheel = 0;
   80d9e:	4b15      	ldr	r3, [pc, #84]	; (80df4 <TaskCalculateRightWheel+0x118>)
   80da0:	601c      	str	r4, [r3, #0]
			distanceRightWheel = 0;
   80da2:	4b0f      	ldr	r3, [pc, #60]	; (80de0 <TaskCalculateRightWheel+0x104>)
   80da4:	601c      	str	r4, [r3, #0]
			counterRightWheel = 0;
   80da6:	2300      	movs	r3, #0
   80da8:	4a09      	ldr	r2, [pc, #36]	; (80dd0 <TaskCalculateRightWheel+0xf4>)
   80daa:	6013      	str	r3, [r2, #0]
			timerRightWheel = 0;
   80dac:	4a0d      	ldr	r2, [pc, #52]	; (80de4 <TaskCalculateRightWheel+0x108>)
   80dae:	6013      	str	r3, [r2, #0]
			tc_stop(TC2,1);
   80db0:	4814      	ldr	r0, [pc, #80]	; (80e04 <TaskCalculateRightWheel+0x128>)
   80db2:	2101      	movs	r1, #1
   80db4:	4b14      	ldr	r3, [pc, #80]	; (80e08 <TaskCalculateRightWheel+0x12c>)
   80db6:	4798      	blx	r3
   80db8:	e79d      	b.n	80cf6 <TaskCalculateRightWheel+0x1a>
   80dba:	bf00      	nop
   80dbc:	00082cb1 	.word	0x00082cb1
   80dc0:	00082ef9 	.word	0x00082ef9
   80dc4:	00080919 	.word	0x00080919
   80dc8:	00087081 	.word	0x00087081
   80dcc:	000870a9 	.word	0x000870a9
   80dd0:	20078594 	.word	0x20078594
   80dd4:	42100000 	.word	0x42100000
   80dd8:	00086ead 	.word	0x00086ead
   80ddc:	20070134 	.word	0x20070134
   80de0:	2007024c 	.word	0x2007024c
   80de4:	2007859c 	.word	0x2007859c
   80de8:	20070138 	.word	0x20070138
   80dec:	00086b35 	.word	0x00086b35
   80df0:	000870bd 	.word	0x000870bd
   80df4:	20078598 	.word	0x20078598
   80df8:	00086d45 	.word	0x00086d45
   80dfc:	000870d1 	.word	0x000870d1
   80e00:	20078584 	.word	0x20078584
   80e04:	40088000 	.word	0x40088000
   80e08:	00080b99 	.word	0x00080b99
   80e0c:	447a0000 	.word	0x447a0000
   80e10:	00086c95 	.word	0x00086c95

00080e14 <TaskDriveLeftRight>:

/**************************************************************************
Task for driving left, right or forward.
**************************************************************************/
void TaskDriveLeftRight(void *p)
{
   80e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e18:	b083      	sub	sp, #12
	portTickType xLastWakeTime; //Last time the task was active.
	portTickType xSampleTime;
	
	xLastWakeTime = xTaskGetTickCount();
   80e1a:	4b5d      	ldr	r3, [pc, #372]	; (80f90 <TaskDriveLeftRight+0x17c>)
   80e1c:	4798      	blx	r3
   80e1e:	9001      	str	r0, [sp, #4]
				setDesiredValueRight(0.3);
				standby = 0;
			}
			else if((joystick_x < 750) && (joystick_y == 0)) // Backwards
			{
				setDesiredValueLeft(5);
   80e20:	f8df b198 	ldr.w	fp, [pc, #408]	; 80fbc <TaskDriveLeftRight+0x1a8>
				setDesiredValueLeft(0.1);
				setDesiredValueRight(0.3);
				standby = 0;
			}else if((joystick_x < 215 && joystick_x >= 0) && (joystick_y < 1480 && joystick_y > 450)) // Drive Hard Left
			{
				setDesiredValueLeft(0.1);
   80e24:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80fc0 <TaskDriveLeftRight+0x1ac>
				setDesiredValueRight(0.3);
   80e28:	4e5a      	ldr	r6, [pc, #360]	; (80f94 <TaskDriveLeftRight+0x180>)
				setDesiredValueRight(0.05);
				standby = 0;
			}
			else if((joystick_x < 565 && joystick_x > 350) && (joystick_y > 1400)) // Drive Light Left
			{
				setDesiredValueLeft(0.2);
   80e2a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80fc4 <TaskDriveLeftRight+0x1b0>
				setDesiredValueLeft(0.3);
				setDesiredValueRight(0.1);
				standby = 0;
				} else if((joystick_x> 1335) && (joystick_y < 1000 && joystick_y > 690)){ // Drive Hard Right
				setDesiredValueLeft(0.3);
				setDesiredValueRight(0.05);
   80e2e:	f8df a198 	ldr.w	sl, [pc, #408]	; 80fc8 <TaskDriveLeftRight+0x1b4>
			joystick_x = ReadAnalog0();
			joystick_y = ReadAnalog1();

			if(((joystick_x > 585) && (joystick_x < 680)) && ((joystick_y > 595) && (joystick_y < 680)) ) // default(standby)
			{
				setDesiredValueLeft(0);
   80e32:	2700      	movs	r7, #0
	
	xLastWakeTime = xTaskGetTickCount();

	while(1){
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime); //Wait for the next cycle the task will be active.
   80e34:	4d58      	ldr	r5, [pc, #352]	; (80f98 <TaskDriveLeftRight+0x184>)
		
		if((drive != 1)){
   80e36:	4c59      	ldr	r4, [pc, #356]	; (80f9c <TaskDriveLeftRight+0x188>)
	
	xLastWakeTime = xTaskGetTickCount();

	while(1){
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime); //Wait for the next cycle the task will be active.
   80e38:	a801      	add	r0, sp, #4
   80e3a:	2164      	movs	r1, #100	; 0x64
   80e3c:	47a8      	blx	r5
		
		if((drive != 1)){
   80e3e:	6823      	ldr	r3, [r4, #0]
   80e40:	2b01      	cmp	r3, #1
   80e42:	d0f9      	beq.n	80e38 <TaskDriveLeftRight+0x24>
			joystick_x = ReadAnalog0();
   80e44:	4b56      	ldr	r3, [pc, #344]	; (80fa0 <TaskDriveLeftRight+0x18c>)
   80e46:	4798      	blx	r3
   80e48:	4c56      	ldr	r4, [pc, #344]	; (80fa4 <TaskDriveLeftRight+0x190>)
   80e4a:	6020      	str	r0, [r4, #0]
			joystick_y = ReadAnalog1();
   80e4c:	4b56      	ldr	r3, [pc, #344]	; (80fa8 <TaskDriveLeftRight+0x194>)
   80e4e:	4798      	blx	r3
   80e50:	4b56      	ldr	r3, [pc, #344]	; (80fac <TaskDriveLeftRight+0x198>)
   80e52:	6018      	str	r0, [r3, #0]

			if(((joystick_x > 585) && (joystick_x < 680)) && ((joystick_y > 595) && (joystick_y < 680)) ) // default(standby)
   80e54:	6823      	ldr	r3, [r4, #0]
   80e56:	f2a3 224a 	subw	r2, r3, #586	; 0x24a
   80e5a:	2a5d      	cmp	r2, #93	; 0x5d
   80e5c:	d80d      	bhi.n	80e7a <TaskDriveLeftRight+0x66>
   80e5e:	f5a0 7215 	sub.w	r2, r0, #596	; 0x254
   80e62:	2a53      	cmp	r2, #83	; 0x53
   80e64:	d809      	bhi.n	80e7a <TaskDriveLeftRight+0x66>
			{
				setDesiredValueLeft(0);
   80e66:	4638      	mov	r0, r7
   80e68:	4b51      	ldr	r3, [pc, #324]	; (80fb0 <TaskDriveLeftRight+0x19c>)
   80e6a:	4798      	blx	r3
				setDesiredValueRight(0);
   80e6c:	4638      	mov	r0, r7
   80e6e:	4b51      	ldr	r3, [pc, #324]	; (80fb4 <TaskDriveLeftRight+0x1a0>)
   80e70:	4798      	blx	r3
				standby = 1;
   80e72:	2201      	movs	r2, #1
   80e74:	4b50      	ldr	r3, [pc, #320]	; (80fb8 <TaskDriveLeftRight+0x1a4>)
   80e76:	601a      	str	r2, [r3, #0]
   80e78:	e7dc      	b.n	80e34 <TaskDriveLeftRight+0x20>
				
			}
			else if((joystick_y > 1390) && (joystick_x > 631 && joystick_x < 710))	//Drive forward at full speed.
   80e7a:	f240 526e 	movw	r2, #1390	; 0x56e
   80e7e:	4290      	cmp	r0, r2
   80e80:	d917      	bls.n	80eb2 <TaskDriveLeftRight+0x9e>
   80e82:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
   80e86:	2a4d      	cmp	r2, #77	; 0x4d
   80e88:	d87c      	bhi.n	80f84 <TaskDriveLeftRight+0x170>
			{
				setDesiredValueLeft(0.3);
   80e8a:	4630      	mov	r0, r6
   80e8c:	4b48      	ldr	r3, [pc, #288]	; (80fb0 <TaskDriveLeftRight+0x19c>)
   80e8e:	4798      	blx	r3
				setDesiredValueRight(0.3);
   80e90:	4630      	mov	r0, r6
   80e92:	4b48      	ldr	r3, [pc, #288]	; (80fb4 <TaskDriveLeftRight+0x1a0>)
   80e94:	4798      	blx	r3
				standby = 0;
   80e96:	2200      	movs	r2, #0
   80e98:	4b47      	ldr	r3, [pc, #284]	; (80fb8 <TaskDriveLeftRight+0x1a4>)
   80e9a:	601a      	str	r2, [r3, #0]
   80e9c:	e7ca      	b.n	80e34 <TaskDriveLeftRight+0x20>
			}
			else if((joystick_x > 1000 && joystick_x < 1200) && joystick_y > 1390)	// Drive Light Right
			{
				setDesiredValueLeft(0.3);
   80e9e:	4630      	mov	r0, r6
   80ea0:	4b43      	ldr	r3, [pc, #268]	; (80fb0 <TaskDriveLeftRight+0x19c>)
   80ea2:	4798      	blx	r3
				setDesiredValueRight(0.2);
   80ea4:	4648      	mov	r0, r9
   80ea6:	4b43      	ldr	r3, [pc, #268]	; (80fb4 <TaskDriveLeftRight+0x1a0>)
   80ea8:	4798      	blx	r3
				standby = 0;
   80eaa:	2200      	movs	r2, #0
   80eac:	4b42      	ldr	r3, [pc, #264]	; (80fb8 <TaskDriveLeftRight+0x1a4>)
   80eae:	601a      	str	r2, [r3, #0]
   80eb0:	e7c0      	b.n	80e34 <TaskDriveLeftRight+0x20>
			}
			else if((joystick_x > 1250) && (joystick_y > 1400))						// Drive  Medium Right
   80eb2:	f240 42e2 	movw	r2, #1250	; 0x4e2
   80eb6:	4293      	cmp	r3, r2
   80eb8:	d90c      	bls.n	80ed4 <TaskDriveLeftRight+0xc0>
   80eba:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   80ebe:	d909      	bls.n	80ed4 <TaskDriveLeftRight+0xc0>
			{
				setDesiredValueLeft(0.3);
   80ec0:	4630      	mov	r0, r6
   80ec2:	4b3b      	ldr	r3, [pc, #236]	; (80fb0 <TaskDriveLeftRight+0x19c>)
   80ec4:	4798      	blx	r3
				setDesiredValueRight(0.1);
   80ec6:	4640      	mov	r0, r8
   80ec8:	4b3a      	ldr	r3, [pc, #232]	; (80fb4 <TaskDriveLeftRight+0x1a0>)
   80eca:	4798      	blx	r3
				standby = 0;
   80ecc:	2200      	movs	r2, #0
   80ece:	4b3a      	ldr	r3, [pc, #232]	; (80fb8 <TaskDriveLeftRight+0x1a4>)
   80ed0:	601a      	str	r2, [r3, #0]
   80ed2:	e7af      	b.n	80e34 <TaskDriveLeftRight+0x20>
				} else if((joystick_x> 1335) && (joystick_y < 1000 && joystick_y > 690)){ // Drive Hard Right
   80ed4:	f5b3 6fa7 	cmp.w	r3, #1336	; 0x538
   80ed8:	d30e      	bcc.n	80ef8 <TaskDriveLeftRight+0xe4>
   80eda:	f2a0 22b3 	subw	r2, r0, #691	; 0x2b3
   80ede:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   80ee2:	d809      	bhi.n	80ef8 <TaskDriveLeftRight+0xe4>
				setDesiredValueLeft(0.3);
   80ee4:	4630      	mov	r0, r6
   80ee6:	4b32      	ldr	r3, [pc, #200]	; (80fb0 <TaskDriveLeftRight+0x19c>)
   80ee8:	4798      	blx	r3
				setDesiredValueRight(0.05);
   80eea:	4650      	mov	r0, sl
   80eec:	4b31      	ldr	r3, [pc, #196]	; (80fb4 <TaskDriveLeftRight+0x1a0>)
   80eee:	4798      	blx	r3
				standby = 0;
   80ef0:	2200      	movs	r2, #0
   80ef2:	4b31      	ldr	r3, [pc, #196]	; (80fb8 <TaskDriveLeftRight+0x1a4>)
   80ef4:	601a      	str	r2, [r3, #0]
   80ef6:	e79d      	b.n	80e34 <TaskDriveLeftRight+0x20>
			}
			else if((joystick_x < 565 && joystick_x > 350) && (joystick_y > 1400)) // Drive Light Left
   80ef8:	f2a3 125f 	subw	r2, r3, #351	; 0x15f
   80efc:	2ad5      	cmp	r2, #213	; 0xd5
   80efe:	d80c      	bhi.n	80f1a <TaskDriveLeftRight+0x106>
   80f00:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   80f04:	d91a      	bls.n	80f3c <TaskDriveLeftRight+0x128>
			{
				setDesiredValueLeft(0.2);
   80f06:	4648      	mov	r0, r9
   80f08:	4b29      	ldr	r3, [pc, #164]	; (80fb0 <TaskDriveLeftRight+0x19c>)
   80f0a:	4798      	blx	r3
				setDesiredValueRight(0.3);
   80f0c:	4630      	mov	r0, r6
   80f0e:	4b29      	ldr	r3, [pc, #164]	; (80fb4 <TaskDriveLeftRight+0x1a0>)
   80f10:	4798      	blx	r3
				standby = 0;
   80f12:	2200      	movs	r2, #0
   80f14:	4b28      	ldr	r3, [pc, #160]	; (80fb8 <TaskDriveLeftRight+0x1a4>)
   80f16:	601a      	str	r2, [r3, #0]
   80f18:	e78c      	b.n	80e34 <TaskDriveLeftRight+0x20>
			}
			else if((joystick_x < 340 && joystick_x >= 220) && (joystick_y > 1400)) // Drive Medium Left
   80f1a:	f1a3 02dc 	sub.w	r2, r3, #220	; 0xdc
   80f1e:	2a77      	cmp	r2, #119	; 0x77
   80f20:	d80c      	bhi.n	80f3c <TaskDriveLeftRight+0x128>
   80f22:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   80f26:	d909      	bls.n	80f3c <TaskDriveLeftRight+0x128>
			{
				setDesiredValueLeft(0.1);
   80f28:	4640      	mov	r0, r8
   80f2a:	4b21      	ldr	r3, [pc, #132]	; (80fb0 <TaskDriveLeftRight+0x19c>)
   80f2c:	4798      	blx	r3
				setDesiredValueRight(0.3);
   80f2e:	4630      	mov	r0, r6
   80f30:	4b20      	ldr	r3, [pc, #128]	; (80fb4 <TaskDriveLeftRight+0x1a0>)
   80f32:	4798      	blx	r3
				standby = 0;
   80f34:	2200      	movs	r2, #0
   80f36:	4b20      	ldr	r3, [pc, #128]	; (80fb8 <TaskDriveLeftRight+0x1a4>)
   80f38:	601a      	str	r2, [r3, #0]
   80f3a:	e77b      	b.n	80e34 <TaskDriveLeftRight+0x20>
			}else if((joystick_x < 215 && joystick_x >= 0) && (joystick_y < 1480 && joystick_y > 450)) // Drive Hard Left
   80f3c:	2bd6      	cmp	r3, #214	; 0xd6
   80f3e:	d80f      	bhi.n	80f60 <TaskDriveLeftRight+0x14c>
   80f40:	f2a0 11c3 	subw	r1, r0, #451	; 0x1c3
   80f44:	f240 4204 	movw	r2, #1028	; 0x404
   80f48:	4291      	cmp	r1, r2
   80f4a:	d809      	bhi.n	80f60 <TaskDriveLeftRight+0x14c>
			{
				setDesiredValueLeft(0.1);
   80f4c:	4640      	mov	r0, r8
   80f4e:	4b18      	ldr	r3, [pc, #96]	; (80fb0 <TaskDriveLeftRight+0x19c>)
   80f50:	4798      	blx	r3
				setDesiredValueRight(0.3);
   80f52:	4630      	mov	r0, r6
   80f54:	4b17      	ldr	r3, [pc, #92]	; (80fb4 <TaskDriveLeftRight+0x1a0>)
   80f56:	4798      	blx	r3
				standby = 0;
   80f58:	2200      	movs	r2, #0
   80f5a:	4b17      	ldr	r3, [pc, #92]	; (80fb8 <TaskDriveLeftRight+0x1a4>)
   80f5c:	601a      	str	r2, [r3, #0]
   80f5e:	e769      	b.n	80e34 <TaskDriveLeftRight+0x20>
			}
			else if((joystick_x < 750) && (joystick_y == 0)) // Backwards
   80f60:	f240 22ed 	movw	r2, #749	; 0x2ed
   80f64:	4293      	cmp	r3, r2
   80f66:	f63f af65 	bhi.w	80e34 <TaskDriveLeftRight+0x20>
   80f6a:	2800      	cmp	r0, #0
   80f6c:	f47f af62 	bne.w	80e34 <TaskDriveLeftRight+0x20>
			{
				setDesiredValueLeft(5);
   80f70:	4658      	mov	r0, fp
   80f72:	4b0f      	ldr	r3, [pc, #60]	; (80fb0 <TaskDriveLeftRight+0x19c>)
   80f74:	4798      	blx	r3
				setDesiredValueRight(5);
   80f76:	4658      	mov	r0, fp
   80f78:	4b0e      	ldr	r3, [pc, #56]	; (80fb4 <TaskDriveLeftRight+0x1a0>)
   80f7a:	4798      	blx	r3
				standby = 0;
   80f7c:	2200      	movs	r2, #0
   80f7e:	4b0e      	ldr	r3, [pc, #56]	; (80fb8 <TaskDriveLeftRight+0x1a4>)
   80f80:	601a      	str	r2, [r3, #0]
   80f82:	e757      	b.n	80e34 <TaskDriveLeftRight+0x20>
			{
				setDesiredValueLeft(0.3);
				setDesiredValueRight(0.3);
				standby = 0;
			}
			else if((joystick_x > 1000 && joystick_x < 1200) && joystick_y > 1390)	// Drive Light Right
   80f84:	f2a3 32e9 	subw	r2, r3, #1001	; 0x3e9
   80f88:	2ac6      	cmp	r2, #198	; 0xc6
   80f8a:	d988      	bls.n	80e9e <TaskDriveLeftRight+0x8a>
   80f8c:	e791      	b.n	80eb2 <TaskDriveLeftRight+0x9e>
   80f8e:	bf00      	nop
   80f90:	00082cb1 	.word	0x00082cb1
   80f94:	3e99999a 	.word	0x3e99999a
   80f98:	00082ef9 	.word	0x00082ef9
   80f9c:	20070244 	.word	0x20070244
   80fa0:	00081491 	.word	0x00081491
   80fa4:	200785a4 	.word	0x200785a4
   80fa8:	000814b1 	.word	0x000814b1
   80fac:	200785a0 	.word	0x200785a0
   80fb0:	00081415 	.word	0x00081415
   80fb4:	00080925 	.word	0x00080925
   80fb8:	20070250 	.word	0x20070250
   80fbc:	40a00000 	.word	0x40a00000
   80fc0:	3dcccccd 	.word	0x3dcccccd
   80fc4:	3e4ccccd 	.word	0x3e4ccccd
   80fc8:	3d4ccccd 	.word	0x3d4ccccd
   80fcc:	00000000 	.word	0x00000000

00080fd0 <valuesforPWM>:
}

/**************************************************************************
Function for translating actual speed values to PWM signals.
**************************************************************************/
void valuesforPWM(float finalULeft){
   80fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80fd2:	4607      	mov	r7, r0
	
	if(finalULeft <= 0.016){
   80fd4:	4b96      	ldr	r3, [pc, #600]	; (81230 <valuesforPWM+0x260>)
   80fd6:	4798      	blx	r3
   80fd8:	4604      	mov	r4, r0
   80fda:	460d      	mov	r5, r1
   80fdc:	a36e      	add	r3, pc, #440	; (adr r3, 81198 <valuesforPWM+0x1c8>)
   80fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   80fe2:	4e94      	ldr	r6, [pc, #592]	; (81234 <valuesforPWM+0x264>)
   80fe4:	47b0      	blx	r6
   80fe6:	b120      	cbz	r0, 80ff2 <valuesforPWM+0x22>
		LeftWheelPWM(1500);
   80fe8:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80fec:	4b92      	ldr	r3, [pc, #584]	; (81238 <valuesforPWM+0x268>)
   80fee:	4798      	blx	r3
   80ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.017 && finalULeft <= 0.026){
   80ff2:	4620      	mov	r0, r4
   80ff4:	4629      	mov	r1, r5
   80ff6:	a36a      	add	r3, pc, #424	; (adr r3, 811a0 <valuesforPWM+0x1d0>)
   80ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
   80ffc:	4e8f      	ldr	r6, [pc, #572]	; (8123c <valuesforPWM+0x26c>)
   80ffe:	47b0      	blx	r6
   81000:	b160      	cbz	r0, 8101c <valuesforPWM+0x4c>
   81002:	4620      	mov	r0, r4
   81004:	4629      	mov	r1, r5
   81006:	a368      	add	r3, pc, #416	; (adr r3, 811a8 <valuesforPWM+0x1d8>)
   81008:	e9d3 2300 	ldrd	r2, r3, [r3]
   8100c:	4e89      	ldr	r6, [pc, #548]	; (81234 <valuesforPWM+0x264>)
   8100e:	47b0      	blx	r6
   81010:	b120      	cbz	r0, 8101c <valuesforPWM+0x4c>
		LeftWheelPWM(1390);
   81012:	f240 506e 	movw	r0, #1390	; 0x56e
   81016:	4b88      	ldr	r3, [pc, #544]	; (81238 <valuesforPWM+0x268>)
   81018:	4798      	blx	r3
   8101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.026 && finalULeft <= 0.033){
   8101c:	4620      	mov	r0, r4
   8101e:	4629      	mov	r1, r5
   81020:	a361      	add	r3, pc, #388	; (adr r3, 811a8 <valuesforPWM+0x1d8>)
   81022:	e9d3 2300 	ldrd	r2, r3, [r3]
   81026:	4e85      	ldr	r6, [pc, #532]	; (8123c <valuesforPWM+0x26c>)
   81028:	47b0      	blx	r6
   8102a:	b160      	cbz	r0, 81046 <valuesforPWM+0x76>
   8102c:	4620      	mov	r0, r4
   8102e:	4629      	mov	r1, r5
   81030:	a35f      	add	r3, pc, #380	; (adr r3, 811b0 <valuesforPWM+0x1e0>)
   81032:	e9d3 2300 	ldrd	r2, r3, [r3]
   81036:	4e7f      	ldr	r6, [pc, #508]	; (81234 <valuesforPWM+0x264>)
   81038:	47b0      	blx	r6
   8103a:	b120      	cbz	r0, 81046 <valuesforPWM+0x76>
		LeftWheelPWM(1370);
   8103c:	f240 505a 	movw	r0, #1370	; 0x55a
   81040:	4b7d      	ldr	r3, [pc, #500]	; (81238 <valuesforPWM+0x268>)
   81042:	4798      	blx	r3
   81044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.034 && finalULeft <= 0.077){
   81046:	4620      	mov	r0, r4
   81048:	4629      	mov	r1, r5
   8104a:	a35b      	add	r3, pc, #364	; (adr r3, 811b8 <valuesforPWM+0x1e8>)
   8104c:	e9d3 2300 	ldrd	r2, r3, [r3]
   81050:	4e7a      	ldr	r6, [pc, #488]	; (8123c <valuesforPWM+0x26c>)
   81052:	47b0      	blx	r6
   81054:	b160      	cbz	r0, 81070 <valuesforPWM+0xa0>
   81056:	4620      	mov	r0, r4
   81058:	4629      	mov	r1, r5
   8105a:	a359      	add	r3, pc, #356	; (adr r3, 811c0 <valuesforPWM+0x1f0>)
   8105c:	e9d3 2300 	ldrd	r2, r3, [r3]
   81060:	4e74      	ldr	r6, [pc, #464]	; (81234 <valuesforPWM+0x264>)
   81062:	47b0      	blx	r6
   81064:	b120      	cbz	r0, 81070 <valuesforPWM+0xa0>
		LeftWheelPWM(1350);
   81066:	f240 5046 	movw	r0, #1350	; 0x546
   8106a:	4b73      	ldr	r3, [pc, #460]	; (81238 <valuesforPWM+0x268>)
   8106c:	4798      	blx	r3
   8106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.078 && finalULeft <= 0.101){
   81070:	4620      	mov	r0, r4
   81072:	4629      	mov	r1, r5
   81074:	a354      	add	r3, pc, #336	; (adr r3, 811c8 <valuesforPWM+0x1f8>)
   81076:	e9d3 2300 	ldrd	r2, r3, [r3]
   8107a:	4e70      	ldr	r6, [pc, #448]	; (8123c <valuesforPWM+0x26c>)
   8107c:	47b0      	blx	r6
   8107e:	b160      	cbz	r0, 8109a <valuesforPWM+0xca>
   81080:	4620      	mov	r0, r4
   81082:	4629      	mov	r1, r5
   81084:	a352      	add	r3, pc, #328	; (adr r3, 811d0 <valuesforPWM+0x200>)
   81086:	e9d3 2300 	ldrd	r2, r3, [r3]
   8108a:	4e6a      	ldr	r6, [pc, #424]	; (81234 <valuesforPWM+0x264>)
   8108c:	47b0      	blx	r6
   8108e:	b120      	cbz	r0, 8109a <valuesforPWM+0xca>
		LeftWheelPWM(1330);
   81090:	f240 5032 	movw	r0, #1330	; 0x532
   81094:	4b68      	ldr	r3, [pc, #416]	; (81238 <valuesforPWM+0x268>)
   81096:	4798      	blx	r3
   81098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.102 && finalULeft <= 0.149){
   8109a:	4620      	mov	r0, r4
   8109c:	4629      	mov	r1, r5
   8109e:	a34e      	add	r3, pc, #312	; (adr r3, 811d8 <valuesforPWM+0x208>)
   810a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   810a4:	4e65      	ldr	r6, [pc, #404]	; (8123c <valuesforPWM+0x26c>)
   810a6:	47b0      	blx	r6
   810a8:	b160      	cbz	r0, 810c4 <valuesforPWM+0xf4>
   810aa:	4620      	mov	r0, r4
   810ac:	4629      	mov	r1, r5
   810ae:	a34c      	add	r3, pc, #304	; (adr r3, 811e0 <valuesforPWM+0x210>)
   810b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   810b4:	4e5f      	ldr	r6, [pc, #380]	; (81234 <valuesforPWM+0x264>)
   810b6:	47b0      	blx	r6
   810b8:	b120      	cbz	r0, 810c4 <valuesforPWM+0xf4>
		LeftWheelPWM(1310);
   810ba:	f240 501e 	movw	r0, #1310	; 0x51e
   810be:	4b5e      	ldr	r3, [pc, #376]	; (81238 <valuesforPWM+0x268>)
   810c0:	4798      	blx	r3
   810c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.150 && finalULeft <= 0.194){
   810c4:	4620      	mov	r0, r4
   810c6:	4629      	mov	r1, r5
   810c8:	a347      	add	r3, pc, #284	; (adr r3, 811e8 <valuesforPWM+0x218>)
   810ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   810ce:	4e5b      	ldr	r6, [pc, #364]	; (8123c <valuesforPWM+0x26c>)
   810d0:	47b0      	blx	r6
   810d2:	b160      	cbz	r0, 810ee <valuesforPWM+0x11e>
   810d4:	4620      	mov	r0, r4
   810d6:	4629      	mov	r1, r5
   810d8:	a345      	add	r3, pc, #276	; (adr r3, 811f0 <valuesforPWM+0x220>)
   810da:	e9d3 2300 	ldrd	r2, r3, [r3]
   810de:	4e55      	ldr	r6, [pc, #340]	; (81234 <valuesforPWM+0x264>)
   810e0:	47b0      	blx	r6
   810e2:	b120      	cbz	r0, 810ee <valuesforPWM+0x11e>
		LeftWheelPWM(1290);
   810e4:	f240 500a 	movw	r0, #1290	; 0x50a
   810e8:	4b53      	ldr	r3, [pc, #332]	; (81238 <valuesforPWM+0x268>)
   810ea:	4798      	blx	r3
   810ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.195 && finalULeft <= 0.212){
   810ee:	4620      	mov	r0, r4
   810f0:	4629      	mov	r1, r5
   810f2:	a341      	add	r3, pc, #260	; (adr r3, 811f8 <valuesforPWM+0x228>)
   810f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   810f8:	4e50      	ldr	r6, [pc, #320]	; (8123c <valuesforPWM+0x26c>)
   810fa:	47b0      	blx	r6
   810fc:	b160      	cbz	r0, 81118 <valuesforPWM+0x148>
   810fe:	4620      	mov	r0, r4
   81100:	4629      	mov	r1, r5
   81102:	a33f      	add	r3, pc, #252	; (adr r3, 81200 <valuesforPWM+0x230>)
   81104:	e9d3 2300 	ldrd	r2, r3, [r3]
   81108:	4e4a      	ldr	r6, [pc, #296]	; (81234 <valuesforPWM+0x264>)
   8110a:	47b0      	blx	r6
   8110c:	b120      	cbz	r0, 81118 <valuesforPWM+0x148>
		LeftWheelPWM(1270);
   8110e:	f240 40f6 	movw	r0, #1270	; 0x4f6
   81112:	4b49      	ldr	r3, [pc, #292]	; (81238 <valuesforPWM+0x268>)
   81114:	4798      	blx	r3
   81116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.213 && finalULeft <= 0.250){
   81118:	4620      	mov	r0, r4
   8111a:	4629      	mov	r1, r5
   8111c:	a33a      	add	r3, pc, #232	; (adr r3, 81208 <valuesforPWM+0x238>)
   8111e:	e9d3 2300 	ldrd	r2, r3, [r3]
   81122:	4e46      	ldr	r6, [pc, #280]	; (8123c <valuesforPWM+0x26c>)
   81124:	47b0      	blx	r6
   81126:	b150      	cbz	r0, 8113e <valuesforPWM+0x16e>
   81128:	4638      	mov	r0, r7
   8112a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
   8112e:	4b44      	ldr	r3, [pc, #272]	; (81240 <valuesforPWM+0x270>)
   81130:	4798      	blx	r3
   81132:	b120      	cbz	r0, 8113e <valuesforPWM+0x16e>
		LeftWheelPWM(1250);
   81134:	f240 40e2 	movw	r0, #1250	; 0x4e2
   81138:	4b3f      	ldr	r3, [pc, #252]	; (81238 <valuesforPWM+0x268>)
   8113a:	4798      	blx	r3
   8113c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.251 && finalULeft <= 0.315){
   8113e:	4620      	mov	r0, r4
   81140:	4629      	mov	r1, r5
   81142:	a333      	add	r3, pc, #204	; (adr r3, 81210 <valuesforPWM+0x240>)
   81144:	e9d3 2300 	ldrd	r2, r3, [r3]
   81148:	4e3c      	ldr	r6, [pc, #240]	; (8123c <valuesforPWM+0x26c>)
   8114a:	47b0      	blx	r6
   8114c:	b160      	cbz	r0, 81168 <valuesforPWM+0x198>
   8114e:	4620      	mov	r0, r4
   81150:	4629      	mov	r1, r5
   81152:	a331      	add	r3, pc, #196	; (adr r3, 81218 <valuesforPWM+0x248>)
   81154:	e9d3 2300 	ldrd	r2, r3, [r3]
   81158:	4e36      	ldr	r6, [pc, #216]	; (81234 <valuesforPWM+0x264>)
   8115a:	47b0      	blx	r6
   8115c:	b120      	cbz	r0, 81168 <valuesforPWM+0x198>
		LeftWheelPWM(1230);
   8115e:	f240 40ce 	movw	r0, #1230	; 0x4ce
   81162:	4b35      	ldr	r3, [pc, #212]	; (81238 <valuesforPWM+0x268>)
   81164:	4798      	blx	r3
   81166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(finalULeft >= 0.316 && finalULeft <= 0.379){
   81168:	4620      	mov	r0, r4
   8116a:	4629      	mov	r1, r5
   8116c:	a32c      	add	r3, pc, #176	; (adr r3, 81220 <valuesforPWM+0x250>)
   8116e:	e9d3 2300 	ldrd	r2, r3, [r3]
   81172:	4e32      	ldr	r6, [pc, #200]	; (8123c <valuesforPWM+0x26c>)
   81174:	47b0      	blx	r6
   81176:	2800      	cmp	r0, #0
   81178:	d064      	beq.n	81244 <valuesforPWM+0x274>
   8117a:	4620      	mov	r0, r4
   8117c:	4629      	mov	r1, r5
   8117e:	a32a      	add	r3, pc, #168	; (adr r3, 81228 <valuesforPWM+0x258>)
   81180:	e9d3 2300 	ldrd	r2, r3, [r3]
   81184:	4e2b      	ldr	r6, [pc, #172]	; (81234 <valuesforPWM+0x264>)
   81186:	47b0      	blx	r6
   81188:	2800      	cmp	r0, #0
   8118a:	d05b      	beq.n	81244 <valuesforPWM+0x274>
		LeftWheelPWM(1210);
   8118c:	f240 40ba 	movw	r0, #1210	; 0x4ba
   81190:	4b29      	ldr	r3, [pc, #164]	; (81238 <valuesforPWM+0x268>)
   81192:	4798      	blx	r3
   81194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81196:	bf00      	nop
   81198:	d2f1a9fc 	.word	0xd2f1a9fc
   8119c:	3f90624d 	.word	0x3f90624d
   811a0:	b020c49c 	.word	0xb020c49c
   811a4:	3f916872 	.word	0x3f916872
   811a8:	76c8b439 	.word	0x76c8b439
   811ac:	3f9a9fbe 	.word	0x3f9a9fbe
   811b0:	4189374c 	.word	0x4189374c
   811b4:	3fa0e560 	.word	0x3fa0e560
   811b8:	b020c49c 	.word	0xb020c49c
   811bc:	3fa16872 	.word	0x3fa16872
   811c0:	a1cac083 	.word	0xa1cac083
   811c4:	3fb3b645 	.word	0x3fb3b645
   811c8:	d916872b 	.word	0xd916872b
   811cc:	3fb3f7ce 	.word	0x3fb3f7ce
   811d0:	d0e56042 	.word	0xd0e56042
   811d4:	3fb9db22 	.word	0x3fb9db22
   811d8:	083126e9 	.word	0x083126e9
   811dc:	3fba1cac 	.word	0x3fba1cac
   811e0:	978d4fdf 	.word	0x978d4fdf
   811e4:	3fc3126e 	.word	0x3fc3126e
   811e8:	33333333 	.word	0x33333333
   811ec:	3fc33333 	.word	0x3fc33333
   811f0:	f3b645a2 	.word	0xf3b645a2
   811f4:	3fc8d4fd 	.word	0x3fc8d4fd
   811f8:	8f5c28f6 	.word	0x8f5c28f6
   811fc:	3fc8f5c2 	.word	0x3fc8f5c2
   81200:	e5604189 	.word	0xe5604189
   81204:	3fcb22d0 	.word	0x3fcb22d0
   81208:	810624dd 	.word	0x810624dd
   8120c:	3fcb4395 	.word	0x3fcb4395
   81210:	4dd2f1aa 	.word	0x4dd2f1aa
   81214:	3fd01062 	.word	0x3fd01062
   81218:	c28f5c29 	.word	0xc28f5c29
   8121c:	3fd428f5 	.word	0x3fd428f5
   81220:	10624dd3 	.word	0x10624dd3
   81224:	3fd43958 	.word	0x3fd43958
   81228:	374bc6a8 	.word	0x374bc6a8
   8122c:	3fd84189 	.word	0x3fd84189
   81230:	000864fd 	.word	0x000864fd
   81234:	00086a9d 	.word	0x00086a9d
   81238:	000803d9 	.word	0x000803d9
   8123c:	00086ab1 	.word	0x00086ab1
   81240:	00087095 	.word	0x00087095
	}
	else if(finalULeft > 0.38){
   81244:	4620      	mov	r0, r4
   81246:	4629      	mov	r1, r5
   81248:	a305      	add	r3, pc, #20	; (adr r3, 81260 <valuesforPWM+0x290>)
   8124a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8124e:	4c06      	ldr	r4, [pc, #24]	; (81268 <valuesforPWM+0x298>)
   81250:	47a0      	blx	r4
   81252:	b118      	cbz	r0, 8125c <valuesforPWM+0x28c>
		LeftWheelPWM(1200);
   81254:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   81258:	4b04      	ldr	r3, [pc, #16]	; (8126c <valuesforPWM+0x29c>)
   8125a:	4798      	blx	r3
   8125c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8125e:	bf00      	nop
   81260:	851eb852 	.word	0x851eb852
   81264:	3fd851eb 	.word	0x3fd851eb
   81268:	00086ac5 	.word	0x00086ac5
   8126c:	000803d9 	.word	0x000803d9

00081270 <TaskPIDLeft>:
for running the wheel with a PID-regulator. It calls on a function containing
the actual PID and another function translating actual speed values to PWM
signals.
**************************************************************************/
void TaskPIDLeft(void *p)
{
   81270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81274:	b083      	sub	sp, #12
	
	uint32_t joystick_y;
	uint32_t joystick_x;
	portTickType xLastWakeTime; //Last time the task was active.
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
   81276:	4b49      	ldr	r3, [pc, #292]	; (8139c <TaskPIDLeft+0x12c>)
   81278:	4798      	blx	r3
   8127a:	9001      	str	r0, [sp, #4]

	int averageSensorValue = 0;
   8127c:	2500      	movs	r5, #0
	while(1){
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime); //Wait for the next cycle the task will be active.

		int32_t temp;
		if((desiredValueLeft > 0.0) && (desiredValueLeft < 5)){
   8127e:	2700      	movs	r7, #0

	int averageSensorValue = 0;
	uint32_t temp = 0;
	while(1){
		xSampleTime = (portTickType)sampleTimeLeft;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime); //Wait for the next cycle the task will be active.
   81280:	a801      	add	r0, sp, #4
   81282:	2132      	movs	r1, #50	; 0x32
   81284:	4b46      	ldr	r3, [pc, #280]	; (813a0 <TaskPIDLeft+0x130>)
   81286:	4798      	blx	r3

		int32_t temp;
		if((desiredValueLeft > 0.0) && (desiredValueLeft < 5)){
   81288:	4b46      	ldr	r3, [pc, #280]	; (813a4 <TaskPIDLeft+0x134>)
   8128a:	681e      	ldr	r6, [r3, #0]
   8128c:	4630      	mov	r0, r6
   8128e:	4639      	mov	r1, r7
   81290:	4b45      	ldr	r3, [pc, #276]	; (813a8 <TaskPIDLeft+0x138>)
   81292:	4798      	blx	r3
   81294:	2800      	cmp	r0, #0
   81296:	d066      	beq.n	81366 <TaskPIDLeft+0xf6>
   81298:	4630      	mov	r0, r6
   8129a:	4944      	ldr	r1, [pc, #272]	; (813ac <TaskPIDLeft+0x13c>)
   8129c:	4b44      	ldr	r3, [pc, #272]	; (813b0 <TaskPIDLeft+0x140>)
   8129e:	4798      	blx	r3
   812a0:	2800      	cmp	r0, #0
   812a2:	d060      	beq.n	81366 <TaskPIDLeft+0xf6>
			filterLeft[POSITIONS-1] = hastighetLeftWheel;
   812a4:	f8df b114 	ldr.w	fp, [pc, #276]	; 813bc <TaskPIDLeft+0x14c>
   812a8:	4b42      	ldr	r3, [pc, #264]	; (813b4 <TaskPIDLeft+0x144>)
   812aa:	6818      	ldr	r0, [r3, #0]
   812ac:	4b42      	ldr	r3, [pc, #264]	; (813b8 <TaskPIDLeft+0x148>)
   812ae:	4798      	blx	r3
   812b0:	f8cb 000c 	str.w	r0, [fp, #12]
   812b4:	f1ab 0404 	sub.w	r4, fp, #4
   812b8:	f10b 0b0c 	add.w	fp, fp, #12
			
			for(int i = 0; i<POSITIONS; i++)
			{
				averageSensorValue =  (averageSensorValue + filterLeft[i]);
   812bc:	f8df a100 	ldr.w	sl, [pc, #256]	; 813c0 <TaskPIDLeft+0x150>
   812c0:	f8df 9138 	ldr.w	r9, [pc, #312]	; 813fc <TaskPIDLeft+0x18c>
   812c4:	f8df 8138 	ldr.w	r8, [pc, #312]	; 81400 <TaskPIDLeft+0x190>
   812c8:	4628      	mov	r0, r5
   812ca:	47d0      	blx	sl
   812cc:	f854 1f04 	ldr.w	r1, [r4, #4]!
   812d0:	47c8      	blx	r9
   812d2:	47c0      	blx	r8

		int32_t temp;
		if((desiredValueLeft > 0.0) && (desiredValueLeft < 5)){
			filterLeft[POSITIONS-1] = hastighetLeftWheel;
			
			for(int i = 0; i<POSITIONS; i++)
   812d4:	455c      	cmp	r4, fp
   812d6:	d1f8      	bne.n	812ca <TaskPIDLeft+0x5a>
			{
				averageSensorValue =  (averageSensorValue + filterLeft[i]);
			}
			
			averageSensorValue =  (averageSensorValue / POSITIONS);
   812d8:	4603      	mov	r3, r0
   812da:	2800      	cmp	r0, #0
   812dc:	bfb8      	it	lt
   812de:	1cc3      	addlt	r3, r0, #3
   812e0:	109d      	asrs	r5, r3, #2
			
			for(int i = 0; i<POSITIONS-1; i++)
			{
				filterLeft[i] = filterLeft[i+1];
   812e2:	4b36      	ldr	r3, [pc, #216]	; (813bc <TaskPIDLeft+0x14c>)
   812e4:	685a      	ldr	r2, [r3, #4]
   812e6:	601a      	str	r2, [r3, #0]
   812e8:	689a      	ldr	r2, [r3, #8]
   812ea:	605a      	str	r2, [r3, #4]
   812ec:	68da      	ldr	r2, [r3, #12]
   812ee:	609a      	str	r2, [r3, #8]
			}
			
			filterLeft[POSITIONS-1] = 0;
   812f0:	60df      	str	r7, [r3, #12]
			currentVLeft = averageSensorValue;
   812f2:	4628      	mov	r0, r5
   812f4:	4b32      	ldr	r3, [pc, #200]	; (813c0 <TaskPIDLeft+0x150>)
   812f6:	4798      	blx	r3
   812f8:	4b32      	ldr	r3, [pc, #200]	; (813c4 <TaskPIDLeft+0x154>)
   812fa:	6018      	str	r0, [r3, #0]
			errorLeft =  (float) ((float)desiredValueLeft - (float)(currentVLeft/1000));
   812fc:	4932      	ldr	r1, [pc, #200]	; (813c8 <TaskPIDLeft+0x158>)
   812fe:	4b33      	ldr	r3, [pc, #204]	; (813cc <TaskPIDLeft+0x15c>)
   81300:	4798      	blx	r3
   81302:	4601      	mov	r1, r0
   81304:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 81404 <TaskPIDLeft+0x194>
   81308:	4630      	mov	r0, r6
   8130a:	47d0      	blx	sl
   8130c:	4604      	mov	r4, r0
   8130e:	4b30      	ldr	r3, [pc, #192]	; (813d0 <TaskPIDLeft+0x160>)
   81310:	6018      	str	r0, [r3, #0]
			prevErrorLeft = errorLeft;
   81312:	4b30      	ldr	r3, [pc, #192]	; (813d4 <TaskPIDLeft+0x164>)
   81314:	6018      	str	r0, [r3, #0]
			wLeft = wLeft + errorLeft;
   81316:	4e30      	ldr	r6, [pc, #192]	; (813d8 <TaskPIDLeft+0x168>)
   81318:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 813fc <TaskPIDLeft+0x18c>
   8131c:	6831      	ldr	r1, [r6, #0]
   8131e:	47c0      	blx	r8
   81320:	4681      	mov	r9, r0
   81322:	6030      	str	r0, [r6, #0]
	float integralPart;
	float derivingPart;
	float signal;
	proportionalPart = (float)currErr;
	integralPart = (float)(sumErr * (sampTime/k_i));
	derivingPart = ((float)currErr - (float)prevErr) * (float)(k_d / sampTime);
   81324:	4620      	mov	r0, r4
   81326:	4621      	mov	r1, r4
   81328:	47d0      	blx	sl
   8132a:	4e2c      	ldr	r6, [pc, #176]	; (813dc <TaskPIDLeft+0x16c>)
   8132c:	492c      	ldr	r1, [pc, #176]	; (813e0 <TaskPIDLeft+0x170>)
   8132e:	47b0      	blx	r6
   81330:	4682      	mov	sl, r0
	float proportionalPart;
	float integralPart;
	float derivingPart;
	float signal;
	proportionalPart = (float)currErr;
	integralPart = (float)(sumErr * (sampTime/k_i));
   81332:	4648      	mov	r0, r9
   81334:	492b      	ldr	r1, [pc, #172]	; (813e4 <TaskPIDLeft+0x174>)
   81336:	47b0      	blx	r6
   81338:	4601      	mov	r1, r0
	derivingPart = ((float)currErr - (float)prevErr) * (float)(k_d / sampTime);
	signal = (float)k_p * ((float)(proportionalPart + integralPart + derivingPart));
   8133a:	4620      	mov	r0, r4
   8133c:	47c0      	blx	r8
   8133e:	4601      	mov	r1, r0
   81340:	4650      	mov	r0, sl
   81342:	47c0      	blx	r8
   81344:	4928      	ldr	r1, [pc, #160]	; (813e8 <TaskPIDLeft+0x178>)
   81346:	47b0      	blx	r6
   81348:	4604      	mov	r4, r0
			errorLeft =  (float) ((float)desiredValueLeft - (float)(currentVLeft/1000));
			prevErrorLeft = errorLeft;
			wLeft = wLeft + errorLeft;

			finalULeft = (float)CalcSignal(samplingTimeLeft, kpLeft, kiLeft, kdLeft, errorLeft, prevErrorLeft, wLeft);
			if(finalULeft < 0)
   8134a:	4639      	mov	r1, r7
   8134c:	4b18      	ldr	r3, [pc, #96]	; (813b0 <TaskPIDLeft+0x140>)
   8134e:	4798      	blx	r3
   81350:	b910      	cbnz	r0, 81358 <TaskPIDLeft+0xe8>
			currentVLeft = averageSensorValue;
			errorLeft =  (float) ((float)desiredValueLeft - (float)(currentVLeft/1000));
			prevErrorLeft = errorLeft;
			wLeft = wLeft + errorLeft;

			finalULeft = (float)CalcSignal(samplingTimeLeft, kpLeft, kiLeft, kdLeft, errorLeft, prevErrorLeft, wLeft);
   81352:	4b26      	ldr	r3, [pc, #152]	; (813ec <TaskPIDLeft+0x17c>)
   81354:	601c      	str	r4, [r3, #0]
   81356:	e001      	b.n	8135c <TaskPIDLeft+0xec>
			if(finalULeft < 0)
			{
				finalULeft = 0;
   81358:	4b24      	ldr	r3, [pc, #144]	; (813ec <TaskPIDLeft+0x17c>)
   8135a:	601f      	str	r7, [r3, #0]
			}
			valuesforPWM(finalULeft);
   8135c:	4b23      	ldr	r3, [pc, #140]	; (813ec <TaskPIDLeft+0x17c>)
   8135e:	6818      	ldr	r0, [r3, #0]
   81360:	4b23      	ldr	r3, [pc, #140]	; (813f0 <TaskPIDLeft+0x180>)
   81362:	4798      	blx	r3
   81364:	e78c      	b.n	81280 <TaskPIDLeft+0x10>
			//temp = finalULeft * 1000;
			//SendControlSignalLeftPID(temp, desiredValueLeft,errorLeft,averageSensorValue); // this function is used to set the values which will be sent to matlab.
		}else if (desiredValueLeft == 0)
   81366:	4630      	mov	r0, r6
   81368:	4639      	mov	r1, r7
   8136a:	4b22      	ldr	r3, [pc, #136]	; (813f4 <TaskPIDLeft+0x184>)
   8136c:	4798      	blx	r3
   8136e:	b138      	cbz	r0, 81380 <TaskPIDLeft+0x110>
		{
			wLeft = 0;
   81370:	4b19      	ldr	r3, [pc, #100]	; (813d8 <TaskPIDLeft+0x168>)
   81372:	601f      	str	r7, [r3, #0]
			finalULeft = 0.0;
   81374:	4b1d      	ldr	r3, [pc, #116]	; (813ec <TaskPIDLeft+0x17c>)
   81376:	601f      	str	r7, [r3, #0]
			valuesforPWM(finalULeft);
   81378:	4638      	mov	r0, r7
   8137a:	4b1d      	ldr	r3, [pc, #116]	; (813f0 <TaskPIDLeft+0x180>)
   8137c:	4798      	blx	r3
   8137e:	e77f      	b.n	81280 <TaskPIDLeft+0x10>
		}else if (desiredValueLeft == 5)
   81380:	4630      	mov	r0, r6
   81382:	490a      	ldr	r1, [pc, #40]	; (813ac <TaskPIDLeft+0x13c>)
   81384:	4b1b      	ldr	r3, [pc, #108]	; (813f4 <TaskPIDLeft+0x184>)
   81386:	4798      	blx	r3
   81388:	2800      	cmp	r0, #0
   8138a:	f43f af79 	beq.w	81280 <TaskPIDLeft+0x10>
		{
			wLeft = 0;
   8138e:	4b12      	ldr	r3, [pc, #72]	; (813d8 <TaskPIDLeft+0x168>)
   81390:	601f      	str	r7, [r3, #0]
			LeftWheelPWM(1690);
   81392:	f240 609a 	movw	r0, #1690	; 0x69a
   81396:	4b18      	ldr	r3, [pc, #96]	; (813f8 <TaskPIDLeft+0x188>)
   81398:	4798      	blx	r3
   8139a:	e771      	b.n	81280 <TaskPIDLeft+0x10>
   8139c:	00082cb1 	.word	0x00082cb1
   813a0:	00082ef9 	.word	0x00082ef9
   813a4:	20070278 	.word	0x20070278
   813a8:	000870bd 	.word	0x000870bd
   813ac:	40a00000 	.word	0x40a00000
   813b0:	00087081 	.word	0x00087081
   813b4:	200785a8 	.word	0x200785a8
   813b8:	00086c95 	.word	0x00086c95
   813bc:	20070264 	.word	0x20070264
   813c0:	00086c9d 	.word	0x00086c9d
   813c4:	2007025c 	.word	0x2007025c
   813c8:	447a0000 	.word	0x447a0000
   813cc:	00086ead 	.word	0x00086ead
   813d0:	20070254 	.word	0x20070254
   813d4:	20070274 	.word	0x20070274
   813d8:	20070258 	.word	0x20070258
   813dc:	00086d45 	.word	0x00086d45
   813e0:	bffc154d 	.word	0xbffc154d
   813e4:	3ccaac05 	.word	0x3ccaac05
   813e8:	3ef844d0 	.word	0x3ef844d0
   813ec:	20070260 	.word	0x20070260
   813f0:	00080fd1 	.word	0x00080fd1
   813f4:	0008706d 	.word	0x0008706d
   813f8:	000803d9 	.word	0x000803d9
   813fc:	00086b35 	.word	0x00086b35
   81400:	000870d1 	.word	0x000870d1
   81404:	00086b31 	.word	0x00086b31

00081408 <getDesiredValueLeft>:
/*********************************************************
 Returns desiredValue.
**********************************************************/
float getDesiredValueLeft(void){
	return desiredValueLeft;
}
   81408:	4b01      	ldr	r3, [pc, #4]	; (81410 <getDesiredValueLeft+0x8>)
   8140a:	6818      	ldr	r0, [r3, #0]
   8140c:	4770      	bx	lr
   8140e:	bf00      	nop
   81410:	20070278 	.word	0x20070278

00081414 <setDesiredValueLeft>:

/********************************************************
 Sets value for drive forward and backwards and the setpoint for PID-regulator
*********************************************************/
void setDesiredValueLeft(float tempdesirevalue) {
	desiredValueLeft = tempdesirevalue;
   81414:	4b01      	ldr	r3, [pc, #4]	; (8141c <setDesiredValueLeft+0x8>)
   81416:	6018      	str	r0, [r3, #0]
   81418:	4770      	bx	lr
   8141a:	bf00      	nop
   8141c:	20070278 	.word	0x20070278

00081420 <analogInit>:

/**************************************************************************
 Initializes the analog pins.
**************************************************************************/
int analogInit(void)
{
   81420:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   81422:	2025      	movs	r0, #37	; 0x25
   81424:	4b11      	ldr	r3, [pc, #68]	; (8146c <analogInit+0x4c>)
   81426:	4798      	blx	r3
	adc_init(ADC,sysclk_get_main_hz(),1000000,8);
   81428:	4c11      	ldr	r4, [pc, #68]	; (81470 <analogInit+0x50>)
   8142a:	4620      	mov	r0, r4
   8142c:	4911      	ldr	r1, [pc, #68]	; (81474 <analogInit+0x54>)
   8142e:	4a12      	ldr	r2, [pc, #72]	; (81478 <analogInit+0x58>)
   81430:	2308      	movs	r3, #8
   81432:	4d12      	ldr	r5, [pc, #72]	; (8147c <analogInit+0x5c>)
   81434:	47a8      	blx	r5
	adc_configure_timing(ADC,0,ADC_SETTLING_TIME_3,1);
   81436:	4620      	mov	r0, r4
   81438:	2100      	movs	r1, #0
   8143a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   8143e:	2301      	movs	r3, #1
   81440:	4d0f      	ldr	r5, [pc, #60]	; (81480 <analogInit+0x60>)
   81442:	47a8      	blx	r5
	adc_set_resolution(ADC,ADC_MR_LOWRES_BITS_12);
   81444:	4620      	mov	r0, r4
   81446:	2100      	movs	r1, #0
   81448:	4b0e      	ldr	r3, [pc, #56]	; (81484 <analogInit+0x64>)
   8144a:	4798      	blx	r3
	adc_enable_channel(ADC,ADC_CHANNEL_7);
   8144c:	4620      	mov	r0, r4
   8144e:	2107      	movs	r1, #7
   81450:	4d0d      	ldr	r5, [pc, #52]	; (81488 <analogInit+0x68>)
   81452:	47a8      	blx	r5
	adc_enable_channel(ADC,ADC_CHANNEL_6);
   81454:	4620      	mov	r0, r4
   81456:	2106      	movs	r1, #6
   81458:	47a8      	blx	r5
	adc_enable_channel(ADC,ADC_CHANNEL_5);
   8145a:	4620      	mov	r0, r4
   8145c:	2105      	movs	r1, #5
   8145e:	47a8      	blx	r5
	adc_configure_trigger(ADC,ADC_TRIG_SW,0);
   81460:	4620      	mov	r0, r4
   81462:	2100      	movs	r1, #0
   81464:	460a      	mov	r2, r1
   81466:	4b09      	ldr	r3, [pc, #36]	; (8148c <analogInit+0x6c>)
   81468:	4798      	blx	r3
}
   8146a:	bd38      	pop	{r3, r4, r5, pc}
   8146c:	00081c49 	.word	0x00081c49
   81470:	400c0000 	.word	0x400c0000
   81474:	0a037a00 	.word	0x0a037a00
   81478:	000f4240 	.word	0x000f4240
   8147c:	0008170d 	.word	0x0008170d
   81480:	00081761 	.word	0x00081761
   81484:	00081741 	.word	0x00081741
   81488:	00081789 	.word	0x00081789
   8148c:	00081751 	.word	0x00081751

00081490 <ReadAnalog0>:
/***************************************************************************
 Reads the Analog 0 pin on Due.
 Retun values for the x-axis of the joystick.
***************************************************************************/
uint32_t ReadAnalog0(void)
{
   81490:	b510      	push	{r4, lr}
	uint32_t xAngle;
	adc_start(ADC);
   81492:	4c04      	ldr	r4, [pc, #16]	; (814a4 <ReadAnalog0+0x14>)
   81494:	4620      	mov	r0, r4
   81496:	4b04      	ldr	r3, [pc, #16]	; (814a8 <ReadAnalog0+0x18>)
   81498:	4798      	blx	r3
	xAngle = adc_get_channel_value(ADC,ADC_CHANNEL_7);
   8149a:	4620      	mov	r0, r4
   8149c:	2107      	movs	r1, #7
   8149e:	4b03      	ldr	r3, [pc, #12]	; (814ac <ReadAnalog0+0x1c>)
   814a0:	4798      	blx	r3
	return xAngle;
}
   814a2:	bd10      	pop	{r4, pc}
   814a4:	400c0000 	.word	0x400c0000
   814a8:	00081781 	.word	0x00081781
   814ac:	00081795 	.word	0x00081795

000814b0 <ReadAnalog1>:
/****************************************************************************
 Reads the Analog 1 pin on Due.
 Retun values for the y-axis of the joystick.
****************************************************************************/
uint32_t ReadAnalog1(void)
{
   814b0:	b510      	push	{r4, lr}
	uint32_t yAngle;
	adc_start(ADC);
   814b2:	4c04      	ldr	r4, [pc, #16]	; (814c4 <ReadAnalog1+0x14>)
   814b4:	4620      	mov	r0, r4
   814b6:	4b04      	ldr	r3, [pc, #16]	; (814c8 <ReadAnalog1+0x18>)
   814b8:	4798      	blx	r3
	yAngle = adc_get_channel_value(ADC,ADC_CHANNEL_6);
   814ba:	4620      	mov	r0, r4
   814bc:	2106      	movs	r1, #6
   814be:	4b03      	ldr	r3, [pc, #12]	; (814cc <ReadAnalog1+0x1c>)
   814c0:	4798      	blx	r3
	return yAngle;
}
   814c2:	bd10      	pop	{r4, pc}
   814c4:	400c0000 	.word	0x400c0000
   814c8:	00081781 	.word	0x00081781
   814cc:	00081795 	.word	0x00081795

000814d0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   814d0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   814d2:	480e      	ldr	r0, [pc, #56]	; (8150c <sysclk_init+0x3c>)
   814d4:	4b0e      	ldr	r3, [pc, #56]	; (81510 <sysclk_init+0x40>)
   814d6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   814d8:	2000      	movs	r0, #0
   814da:	213e      	movs	r1, #62	; 0x3e
   814dc:	4b0d      	ldr	r3, [pc, #52]	; (81514 <sysclk_init+0x44>)
   814de:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   814e0:	4c0d      	ldr	r4, [pc, #52]	; (81518 <sysclk_init+0x48>)
   814e2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   814e4:	2800      	cmp	r0, #0
   814e6:	d0fc      	beq.n	814e2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   814e8:	4b0c      	ldr	r3, [pc, #48]	; (8151c <sysclk_init+0x4c>)
   814ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   814ec:	4a0c      	ldr	r2, [pc, #48]	; (81520 <sysclk_init+0x50>)
   814ee:	4b0d      	ldr	r3, [pc, #52]	; (81524 <sysclk_init+0x54>)
   814f0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   814f2:	4c0d      	ldr	r4, [pc, #52]	; (81528 <sysclk_init+0x58>)
   814f4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   814f6:	2800      	cmp	r0, #0
   814f8:	d0fc      	beq.n	814f4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   814fa:	2010      	movs	r0, #16
   814fc:	4b0b      	ldr	r3, [pc, #44]	; (8152c <sysclk_init+0x5c>)
   814fe:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81500:	4b0b      	ldr	r3, [pc, #44]	; (81530 <sysclk_init+0x60>)
   81502:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81504:	4801      	ldr	r0, [pc, #4]	; (8150c <sysclk_init+0x3c>)
   81506:	4b02      	ldr	r3, [pc, #8]	; (81510 <sysclk_init+0x40>)
   81508:	4798      	blx	r3
   8150a:	bd10      	pop	{r4, pc}
   8150c:	0501bd00 	.word	0x0501bd00
   81510:	200700a5 	.word	0x200700a5
   81514:	00081bc5 	.word	0x00081bc5
   81518:	00081c19 	.word	0x00081c19
   8151c:	00081c29 	.word	0x00081c29
   81520:	200d3f01 	.word	0x200d3f01
   81524:	400e0600 	.word	0x400e0600
   81528:	00081c39 	.word	0x00081c39
   8152c:	00081b61 	.word	0x00081b61
   81530:	00081fd9 	.word	0x00081fd9

00081534 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   81534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81538:	b083      	sub	sp, #12
   8153a:	4605      	mov	r5, r0
	while (len) {
   8153c:	4690      	mov	r8, r2
   8153e:	2a00      	cmp	r2, #0
   81540:	d047      	beq.n	815d2 <usart_serial_read_packet+0x9e>
   81542:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81544:	4f25      	ldr	r7, [pc, #148]	; (815dc <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   81546:	4c26      	ldr	r4, [pc, #152]	; (815e0 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81548:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 815f4 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   8154c:	f8df b094 	ldr.w	fp, [pc, #148]	; 815e4 <usart_serial_read_packet+0xb0>
   81550:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   81554:	2300      	movs	r3, #0
   81556:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81558:	4b22      	ldr	r3, [pc, #136]	; (815e4 <usart_serial_read_packet+0xb0>)
   8155a:	429d      	cmp	r5, r3
   8155c:	d106      	bne.n	8156c <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   8155e:	4658      	mov	r0, fp
   81560:	4649      	mov	r1, r9
   81562:	4b21      	ldr	r3, [pc, #132]	; (815e8 <usart_serial_read_packet+0xb4>)
   81564:	4798      	blx	r3
   81566:	2800      	cmp	r0, #0
   81568:	d1f9      	bne.n	8155e <usart_serial_read_packet+0x2a>
   8156a:	e019      	b.n	815a0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8156c:	4b1f      	ldr	r3, [pc, #124]	; (815ec <usart_serial_read_packet+0xb8>)
   8156e:	429d      	cmp	r5, r3
   81570:	d109      	bne.n	81586 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   81572:	4699      	mov	r9, r3
   81574:	4648      	mov	r0, r9
   81576:	a901      	add	r1, sp, #4
   81578:	47a0      	blx	r4
   8157a:	2800      	cmp	r0, #0
   8157c:	d1fa      	bne.n	81574 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   8157e:	9b01      	ldr	r3, [sp, #4]
   81580:	f806 3c01 	strb.w	r3, [r6, #-1]
   81584:	e017      	b.n	815b6 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81586:	4b1a      	ldr	r3, [pc, #104]	; (815f0 <usart_serial_read_packet+0xbc>)
   81588:	429d      	cmp	r5, r3
   8158a:	d109      	bne.n	815a0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   8158c:	4699      	mov	r9, r3
   8158e:	4648      	mov	r0, r9
   81590:	a901      	add	r1, sp, #4
   81592:	47a0      	blx	r4
   81594:	2800      	cmp	r0, #0
   81596:	d1fa      	bne.n	8158e <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   81598:	9b01      	ldr	r3, [sp, #4]
   8159a:	f806 3c01 	strb.w	r3, [r6, #-1]
   8159e:	e014      	b.n	815ca <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   815a0:	4555      	cmp	r5, sl
   815a2:	d108      	bne.n	815b6 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   815a4:	4650      	mov	r0, sl
   815a6:	a901      	add	r1, sp, #4
   815a8:	47a0      	blx	r4
   815aa:	2800      	cmp	r0, #0
   815ac:	d1fa      	bne.n	815a4 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   815ae:	9b01      	ldr	r3, [sp, #4]
   815b0:	f806 3c01 	strb.w	r3, [r6, #-1]
   815b4:	e009      	b.n	815ca <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   815b6:	42bd      	cmp	r5, r7
   815b8:	d107      	bne.n	815ca <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   815ba:	4638      	mov	r0, r7
   815bc:	a901      	add	r1, sp, #4
   815be:	47a0      	blx	r4
   815c0:	2800      	cmp	r0, #0
   815c2:	d1fa      	bne.n	815ba <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   815c4:	9b01      	ldr	r3, [sp, #4]
   815c6:	f806 3c01 	strb.w	r3, [r6, #-1]
   815ca:	3601      	adds	r6, #1
   815cc:	f1b8 0801 	subs.w	r8, r8, #1
   815d0:	d1be      	bne.n	81550 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   815d2:	2000      	movs	r0, #0
   815d4:	b003      	add	sp, #12
   815d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   815da:	bf00      	nop
   815dc:	400a4000 	.word	0x400a4000
   815e0:	00081f0d 	.word	0x00081f0d
   815e4:	400e0800 	.word	0x400e0800
   815e8:	00081ee5 	.word	0x00081ee5
   815ec:	40098000 	.word	0x40098000
   815f0:	4009c000 	.word	0x4009c000
   815f4:	400a0000 	.word	0x400a0000

000815f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   815f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   815fc:	460c      	mov	r4, r1
   815fe:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   81600:	b960      	cbnz	r0, 8161c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   81602:	2a00      	cmp	r2, #0
   81604:	dd0e      	ble.n	81624 <_read+0x2c>
   81606:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   81608:	4e09      	ldr	r6, [pc, #36]	; (81630 <_read+0x38>)
   8160a:	4d0a      	ldr	r5, [pc, #40]	; (81634 <_read+0x3c>)
   8160c:	6830      	ldr	r0, [r6, #0]
   8160e:	4621      	mov	r1, r4
   81610:	682b      	ldr	r3, [r5, #0]
   81612:	4798      	blx	r3
		ptr++;
   81614:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   81616:	42bc      	cmp	r4, r7
   81618:	d1f8      	bne.n	8160c <_read+0x14>
   8161a:	e006      	b.n	8162a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8161c:	f04f 30ff 	mov.w	r0, #4294967295
   81620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   81624:	2000      	movs	r0, #0
   81626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8162a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8162c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81630:	200785b4 	.word	0x200785b4
   81634:	200785ac 	.word	0x200785ac

00081638 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8163c:	460e      	mov	r6, r1
   8163e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81640:	3801      	subs	r0, #1
   81642:	2802      	cmp	r0, #2
   81644:	d80f      	bhi.n	81666 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   81646:	b192      	cbz	r2, 8166e <_write+0x36>
   81648:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8164a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 81688 <_write+0x50>
   8164e:	4f0d      	ldr	r7, [pc, #52]	; (81684 <_write+0x4c>)
   81650:	f8d8 0000 	ldr.w	r0, [r8]
   81654:	5d31      	ldrb	r1, [r6, r4]
   81656:	683b      	ldr	r3, [r7, #0]
   81658:	4798      	blx	r3
   8165a:	2800      	cmp	r0, #0
   8165c:	db0a      	blt.n	81674 <_write+0x3c>
			return -1;
		}
		++nChars;
   8165e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81660:	42a5      	cmp	r5, r4
   81662:	d1f5      	bne.n	81650 <_write+0x18>
   81664:	e00a      	b.n	8167c <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   81666:	f04f 30ff 	mov.w	r0, #4294967295
   8166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8166e:	2000      	movs	r0, #0
   81670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   81674:	f04f 30ff 	mov.w	r0, #4294967295
   81678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   8167c:	4620      	mov	r0, r4
	}
	return nChars;
}
   8167e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81682:	bf00      	nop
   81684:	200785b0 	.word	0x200785b0
   81688:	200785b4 	.word	0x200785b4

0008168c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8168c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8168e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81692:	4b17      	ldr	r3, [pc, #92]	; (816f0 <board_init+0x64>)
   81694:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81696:	200b      	movs	r0, #11
   81698:	4c16      	ldr	r4, [pc, #88]	; (816f4 <board_init+0x68>)
   8169a:	47a0      	blx	r4
   8169c:	200c      	movs	r0, #12
   8169e:	47a0      	blx	r4
   816a0:	200d      	movs	r0, #13
   816a2:	47a0      	blx	r4
   816a4:	200e      	movs	r0, #14
   816a6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   816a8:	203b      	movs	r0, #59	; 0x3b
   816aa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   816ae:	4c12      	ldr	r4, [pc, #72]	; (816f8 <board_init+0x6c>)
   816b0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   816b2:	2055      	movs	r0, #85	; 0x55
   816b4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   816b8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   816ba:	2056      	movs	r0, #86	; 0x56
   816bc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   816c0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   816c2:	2068      	movs	r0, #104	; 0x68
   816c4:	490d      	ldr	r1, [pc, #52]	; (816fc <board_init+0x70>)
   816c6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   816c8:	205c      	movs	r0, #92	; 0x5c
   816ca:	490d      	ldr	r1, [pc, #52]	; (81700 <board_init+0x74>)
   816cc:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   816ce:	480d      	ldr	r0, [pc, #52]	; (81704 <board_init+0x78>)
   816d0:	f44f 7140 	mov.w	r1, #768	; 0x300
   816d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   816d8:	4b0b      	ldr	r3, [pc, #44]	; (81708 <board_init+0x7c>)
   816da:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   816dc:	202b      	movs	r0, #43	; 0x2b
   816de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816e2:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   816e4:	202a      	movs	r0, #42	; 0x2a
   816e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816ea:	47a0      	blx	r4
   816ec:	bd10      	pop	{r4, pc}
   816ee:	bf00      	nop
   816f0:	400e1a50 	.word	0x400e1a50
   816f4:	00081c49 	.word	0x00081c49
   816f8:	00081909 	.word	0x00081909
   816fc:	28000079 	.word	0x28000079
   81700:	28000001 	.word	0x28000001
   81704:	400e0e00 	.word	0x400e0e00
   81708:	000819dd 	.word	0x000819dd

0008170c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   8170c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8170e:	2401      	movs	r4, #1
   81710:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   81712:	2400      	movs	r4, #0
   81714:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   81716:	f240 2502 	movw	r5, #514	; 0x202
   8171a:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8171e:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   81722:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   81726:	6845      	ldr	r5, [r0, #4]
   81728:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8172a:	0052      	lsls	r2, r2, #1
   8172c:	fbb1 f1f2 	udiv	r1, r1, r2
   81730:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   81732:	022d      	lsls	r5, r5, #8
   81734:	b2ad      	uxth	r5, r5
   81736:	432b      	orrs	r3, r5
   81738:	6043      	str	r3, [r0, #4]
	return 0;
}
   8173a:	4620      	mov	r0, r4
   8173c:	bc30      	pop	{r4, r5}
   8173e:	4770      	bx	lr

00081740 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   81740:	6843      	ldr	r3, [r0, #4]
   81742:	f023 0310 	bic.w	r3, r3, #16
   81746:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   81748:	6843      	ldr	r3, [r0, #4]
   8174a:	4319      	orrs	r1, r3
   8174c:	6041      	str	r1, [r0, #4]
   8174e:	4770      	bx	lr

00081750 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   81750:	6843      	ldr	r3, [r0, #4]
   81752:	4319      	orrs	r1, r3
   81754:	01d2      	lsls	r2, r2, #7
   81756:	b2d3      	uxtb	r3, r2
   81758:	4319      	orrs	r1, r3
   8175a:	6041      	str	r1, [r0, #4]
   8175c:	4770      	bx	lr
   8175e:	bf00      	nop

00081760 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   81760:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   81762:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   81764:	4322      	orrs	r2, r4
   81766:	0609      	lsls	r1, r1, #24
   81768:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   8176c:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8176e:	071b      	lsls	r3, r3, #28
   81770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   81774:	431a      	orrs	r2, r3
   81776:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   81778:	f85d 4b04 	ldr.w	r4, [sp], #4
   8177c:	4770      	bx	lr
   8177e:	bf00      	nop

00081780 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   81780:	2302      	movs	r3, #2
   81782:	6003      	str	r3, [r0, #0]
   81784:	4770      	bx	lr
   81786:	bf00      	nop

00081788 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   81788:	2301      	movs	r3, #1
   8178a:	fa03 f101 	lsl.w	r1, r3, r1
   8178e:	6101      	str	r1, [r0, #16]
   81790:	4770      	bx	lr
   81792:	bf00      	nop

00081794 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   81794:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   81796:	bf9a      	itte	ls
   81798:	3114      	addls	r1, #20
   8179a:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   8179e:	2000      	movhi	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   817a0:	4770      	bx	lr
   817a2:	bf00      	nop

000817a4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   817a4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   817a6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   817aa:	d016      	beq.n	817da <pio_set_peripheral+0x36>
   817ac:	d804      	bhi.n	817b8 <pio_set_peripheral+0x14>
   817ae:	b1c1      	cbz	r1, 817e2 <pio_set_peripheral+0x3e>
   817b0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   817b4:	d00a      	beq.n	817cc <pio_set_peripheral+0x28>
   817b6:	e013      	b.n	817e0 <pio_set_peripheral+0x3c>
   817b8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   817bc:	d011      	beq.n	817e2 <pio_set_peripheral+0x3e>
   817be:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   817c2:	d00e      	beq.n	817e2 <pio_set_peripheral+0x3e>
   817c4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   817c8:	d10a      	bne.n	817e0 <pio_set_peripheral+0x3c>
   817ca:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   817cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   817ce:	6f01      	ldr	r1, [r0, #112]	; 0x70
   817d0:	400b      	ands	r3, r1
   817d2:	ea23 0302 	bic.w	r3, r3, r2
   817d6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   817d8:	e002      	b.n	817e0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   817da:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   817dc:	4313      	orrs	r3, r2
   817de:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   817e0:	6042      	str	r2, [r0, #4]
   817e2:	4770      	bx	lr

000817e4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   817e4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   817e6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   817ea:	bf14      	ite	ne
   817ec:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   817ee:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   817f0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   817f4:	bf14      	ite	ne
   817f6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   817f8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   817fa:	f012 0f02 	tst.w	r2, #2
   817fe:	d002      	beq.n	81806 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81800:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81804:	e004      	b.n	81810 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81806:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8180a:	bf18      	it	ne
   8180c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81810:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81812:	6001      	str	r1, [r0, #0]
   81814:	4770      	bx	lr
   81816:	bf00      	nop

00081818 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81818:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8181a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8181c:	9c01      	ldr	r4, [sp, #4]
   8181e:	b10c      	cbz	r4, 81824 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81820:	6641      	str	r1, [r0, #100]	; 0x64
   81822:	e000      	b.n	81826 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81824:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81826:	b10b      	cbz	r3, 8182c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81828:	6501      	str	r1, [r0, #80]	; 0x50
   8182a:	e000      	b.n	8182e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8182c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8182e:	b10a      	cbz	r2, 81834 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81830:	6301      	str	r1, [r0, #48]	; 0x30
   81832:	e000      	b.n	81836 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81834:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81836:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81838:	6001      	str	r1, [r0, #0]
}
   8183a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8183e:	4770      	bx	lr

00081840 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
   81840:	b5f0      	push	{r4, r5, r6, r7, lr}
   81842:	b083      	sub	sp, #12
   81844:	4607      	mov	r7, r0
   81846:	460c      	mov	r4, r1
   81848:	4616      	mov	r6, r2
   8184a:	461d      	mov	r5, r3
	/* Configure pins */
	switch (ul_type) {
   8184c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81850:	d01a      	beq.n	81888 <pio_configure+0x48>
   81852:	d806      	bhi.n	81862 <pio_configure+0x22>
   81854:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81858:	d00a      	beq.n	81870 <pio_configure+0x30>
   8185a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8185e:	d007      	beq.n	81870 <pio_configure+0x30>
   81860:	e028      	b.n	818b4 <pio_configure+0x74>
   81862:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81866:	d015      	beq.n	81894 <pio_configure+0x54>
   81868:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8186c:	d012      	beq.n	81894 <pio_configure+0x54>
   8186e:	e021      	b.n	818b4 <pio_configure+0x74>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
   81870:	4638      	mov	r0, r7
   81872:	4621      	mov	r1, r4
   81874:	4632      	mov	r2, r6
   81876:	4b11      	ldr	r3, [pc, #68]	; (818bc <pio_configure+0x7c>)
   81878:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8187a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8187e:	bf14      	ite	ne
   81880:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81882:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81884:	2001      	movs	r0, #1
   81886:	e016      	b.n	818b6 <pio_configure+0x76>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
   81888:	4611      	mov	r1, r2
   8188a:	461a      	mov	r2, r3
   8188c:	4b0c      	ldr	r3, [pc, #48]	; (818c0 <pio_configure+0x80>)
   8188e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81890:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
   81892:	e010      	b.n	818b6 <pio_configure+0x76>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
   81894:	f005 0301 	and.w	r3, r5, #1
   81898:	9300      	str	r3, [sp, #0]
   8189a:	4638      	mov	r0, r7
   8189c:	4631      	mov	r1, r6
   8189e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   818a2:	bf14      	ite	ne
   818a4:	2200      	movne	r2, #0
   818a6:	2201      	moveq	r2, #1
   818a8:	f3c5 0380 	ubfx	r3, r5, #2, #1
   818ac:	4c05      	ldr	r4, [pc, #20]	; (818c4 <pio_configure+0x84>)
   818ae:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   818b0:	2001      	movs	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
   818b2:	e000      	b.n	818b6 <pio_configure+0x76>

	default:
		return 0;
   818b4:	2000      	movs	r0, #0
	}

	return 1;
}
   818b6:	b003      	add	sp, #12
   818b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   818ba:	bf00      	nop
   818bc:	000817a5 	.word	0x000817a5
   818c0:	000817e5 	.word	0x000817e5
   818c4:	00081819 	.word	0x00081819

000818c8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   818c8:	f012 0f10 	tst.w	r2, #16
   818cc:	d010      	beq.n	818f0 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   818ce:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   818d2:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   818d6:	bf14      	ite	ne
   818d8:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   818dc:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   818e0:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   818e4:	bf14      	ite	ne
   818e6:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   818ea:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   818ee:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   818f0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   818f4:	4770      	bx	lr
   818f6:	bf00      	nop

000818f8 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   818f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   818fa:	6401      	str	r1, [r0, #64]	; 0x40
   818fc:	4770      	bx	lr
   818fe:	bf00      	nop

00081900 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81900:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81902:	4770      	bx	lr

00081904 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81904:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81906:	4770      	bx	lr

00081908 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81908:	b570      	push	{r4, r5, r6, lr}
   8190a:	b082      	sub	sp, #8
   8190c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8190e:	0944      	lsrs	r4, r0, #5
   81910:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81914:	f204 7407 	addw	r4, r4, #1799	; 0x707
   81918:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8191a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8191e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81922:	d030      	beq.n	81986 <pio_configure_pin+0x7e>
   81924:	d806      	bhi.n	81934 <pio_configure_pin+0x2c>
   81926:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8192a:	d00a      	beq.n	81942 <pio_configure_pin+0x3a>
   8192c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81930:	d018      	beq.n	81964 <pio_configure_pin+0x5c>
   81932:	e049      	b.n	819c8 <pio_configure_pin+0xc0>
   81934:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81938:	d030      	beq.n	8199c <pio_configure_pin+0x94>
   8193a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8193e:	d02d      	beq.n	8199c <pio_configure_pin+0x94>
   81940:	e042      	b.n	819c8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81942:	f000 001f 	and.w	r0, r0, #31
   81946:	2401      	movs	r4, #1
   81948:	4084      	lsls	r4, r0
   8194a:	4630      	mov	r0, r6
   8194c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81950:	4622      	mov	r2, r4
   81952:	4b1f      	ldr	r3, [pc, #124]	; (819d0 <pio_configure_pin+0xc8>)
   81954:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81956:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8195a:	bf14      	ite	ne
   8195c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8195e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81960:	2001      	movs	r0, #1
   81962:	e032      	b.n	819ca <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81964:	f000 001f 	and.w	r0, r0, #31
   81968:	2401      	movs	r4, #1
   8196a:	4084      	lsls	r4, r0
   8196c:	4630      	mov	r0, r6
   8196e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81972:	4622      	mov	r2, r4
   81974:	4b16      	ldr	r3, [pc, #88]	; (819d0 <pio_configure_pin+0xc8>)
   81976:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81978:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8197c:	bf14      	ite	ne
   8197e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81980:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81982:	2001      	movs	r0, #1
   81984:	e021      	b.n	819ca <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81986:	f000 011f 	and.w	r1, r0, #31
   8198a:	2401      	movs	r4, #1
   8198c:	4630      	mov	r0, r6
   8198e:	fa04 f101 	lsl.w	r1, r4, r1
   81992:	462a      	mov	r2, r5
   81994:	4b0f      	ldr	r3, [pc, #60]	; (819d4 <pio_configure_pin+0xcc>)
   81996:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81998:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8199a:	e016      	b.n	819ca <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8199c:	f000 011f 	and.w	r1, r0, #31
   819a0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   819a2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   819a6:	ea05 0304 	and.w	r3, r5, r4
   819aa:	9300      	str	r3, [sp, #0]
   819ac:	4630      	mov	r0, r6
   819ae:	fa04 f101 	lsl.w	r1, r4, r1
   819b2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   819b6:	bf14      	ite	ne
   819b8:	2200      	movne	r2, #0
   819ba:	2201      	moveq	r2, #1
   819bc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   819c0:	4d05      	ldr	r5, [pc, #20]	; (819d8 <pio_configure_pin+0xd0>)
   819c2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   819c4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   819c6:	e000      	b.n	819ca <pio_configure_pin+0xc2>

	default:
		return 0;
   819c8:	2000      	movs	r0, #0
	}

	return 1;
}
   819ca:	b002      	add	sp, #8
   819cc:	bd70      	pop	{r4, r5, r6, pc}
   819ce:	bf00      	nop
   819d0:	000817a5 	.word	0x000817a5
   819d4:	000817e5 	.word	0x000817e5
   819d8:	00081819 	.word	0x00081819

000819dc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   819dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   819de:	b083      	sub	sp, #12
   819e0:	4607      	mov	r7, r0
   819e2:	460e      	mov	r6, r1
   819e4:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   819e6:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   819ea:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   819ee:	d026      	beq.n	81a3e <pio_configure_pin_group+0x62>
   819f0:	d806      	bhi.n	81a00 <pio_configure_pin_group+0x24>
   819f2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   819f6:	d00a      	beq.n	81a0e <pio_configure_pin_group+0x32>
   819f8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   819fc:	d013      	beq.n	81a26 <pio_configure_pin_group+0x4a>
   819fe:	e034      	b.n	81a6a <pio_configure_pin_group+0x8e>
   81a00:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81a04:	d01f      	beq.n	81a46 <pio_configure_pin_group+0x6a>
   81a06:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81a0a:	d01c      	beq.n	81a46 <pio_configure_pin_group+0x6a>
   81a0c:	e02d      	b.n	81a6a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81a0e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a12:	4632      	mov	r2, r6
   81a14:	4b16      	ldr	r3, [pc, #88]	; (81a70 <pio_configure_pin_group+0x94>)
   81a16:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81a18:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81a1c:	bf14      	ite	ne
   81a1e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81a20:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81a22:	2001      	movs	r0, #1
   81a24:	e022      	b.n	81a6c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81a26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81a2a:	4632      	mov	r2, r6
   81a2c:	4b10      	ldr	r3, [pc, #64]	; (81a70 <pio_configure_pin_group+0x94>)
   81a2e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81a30:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81a34:	bf14      	ite	ne
   81a36:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81a38:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81a3a:	2001      	movs	r0, #1
   81a3c:	e016      	b.n	81a6c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81a3e:	4b0d      	ldr	r3, [pc, #52]	; (81a74 <pio_configure_pin_group+0x98>)
   81a40:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81a42:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81a44:	e012      	b.n	81a6c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81a46:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81a4a:	f005 0301 	and.w	r3, r5, #1
   81a4e:	9300      	str	r3, [sp, #0]
   81a50:	4638      	mov	r0, r7
   81a52:	4631      	mov	r1, r6
   81a54:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81a58:	bf14      	ite	ne
   81a5a:	2200      	movne	r2, #0
   81a5c:	2201      	moveq	r2, #1
   81a5e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81a62:	4c05      	ldr	r4, [pc, #20]	; (81a78 <pio_configure_pin_group+0x9c>)
   81a64:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81a66:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81a68:	e000      	b.n	81a6c <pio_configure_pin_group+0x90>

	default:
		return 0;
   81a6a:	2000      	movs	r0, #0
	}

	return 1;
}
   81a6c:	b003      	add	sp, #12
   81a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81a70:	000817a5 	.word	0x000817a5
   81a74:	000817e5 	.word	0x000817e5
   81a78:	00081819 	.word	0x00081819

00081a7c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81a80:	4604      	mov	r4, r0
   81a82:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81a84:	4b10      	ldr	r3, [pc, #64]	; (81ac8 <pio_handler_process+0x4c>)
   81a86:	4798      	blx	r3
   81a88:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81a8a:	4620      	mov	r0, r4
   81a8c:	4b0f      	ldr	r3, [pc, #60]	; (81acc <pio_handler_process+0x50>)
   81a8e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81a90:	4005      	ands	r5, r0
   81a92:	d017      	beq.n	81ac4 <pio_handler_process+0x48>
   81a94:	4f0e      	ldr	r7, [pc, #56]	; (81ad0 <pio_handler_process+0x54>)
   81a96:	f107 040c 	add.w	r4, r7, #12
   81a9a:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81a9c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81aa0:	42b3      	cmp	r3, r6
   81aa2:	d10a      	bne.n	81aba <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81aa4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81aa8:	4229      	tst	r1, r5
   81aaa:	d006      	beq.n	81aba <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81aac:	6823      	ldr	r3, [r4, #0]
   81aae:	4630      	mov	r0, r6
   81ab0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81ab2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   81ab6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81aba:	42bc      	cmp	r4, r7
   81abc:	d002      	beq.n	81ac4 <pio_handler_process+0x48>
   81abe:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81ac0:	2d00      	cmp	r5, #0
   81ac2:	d1eb      	bne.n	81a9c <pio_handler_process+0x20>
   81ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ac8:	00081901 	.word	0x00081901
   81acc:	00081905 	.word	0x00081905
   81ad0:	20070280 	.word	0x20070280

00081ad4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   81ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   81ad6:	4c0b      	ldr	r4, [pc, #44]	; (81b04 <pio_handler_set+0x30>)
   81ad8:	6824      	ldr	r4, [r4, #0]
   81ada:	2c06      	cmp	r4, #6
   81adc:	d810      	bhi.n	81b00 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   81ade:	4f0a      	ldr	r7, [pc, #40]	; (81b08 <pio_handler_set+0x34>)
   81ae0:	0126      	lsls	r6, r4, #4
   81ae2:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   81ae4:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   81ae6:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   81ae8:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   81aea:	9906      	ldr	r1, [sp, #24]
   81aec:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   81aee:	3401      	adds	r4, #1
   81af0:	4904      	ldr	r1, [pc, #16]	; (81b04 <pio_handler_set+0x30>)
   81af2:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81af4:	4611      	mov	r1, r2
   81af6:	461a      	mov	r2, r3
   81af8:	4b04      	ldr	r3, [pc, #16]	; (81b0c <pio_handler_set+0x38>)
   81afa:	4798      	blx	r3

	return 0;
   81afc:	2000      	movs	r0, #0
   81afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   81b00:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   81b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81b04:	2007027c 	.word	0x2007027c
   81b08:	20070280 	.word	0x20070280
   81b0c:	000818c9 	.word	0x000818c9

00081b10 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81b10:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81b12:	4802      	ldr	r0, [pc, #8]	; (81b1c <PIOA_Handler+0xc>)
   81b14:	210b      	movs	r1, #11
   81b16:	4b02      	ldr	r3, [pc, #8]	; (81b20 <PIOA_Handler+0x10>)
   81b18:	4798      	blx	r3
   81b1a:	bd08      	pop	{r3, pc}
   81b1c:	400e0e00 	.word	0x400e0e00
   81b20:	00081a7d 	.word	0x00081a7d

00081b24 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81b24:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81b26:	4802      	ldr	r0, [pc, #8]	; (81b30 <PIOB_Handler+0xc>)
   81b28:	210c      	movs	r1, #12
   81b2a:	4b02      	ldr	r3, [pc, #8]	; (81b34 <PIOB_Handler+0x10>)
   81b2c:	4798      	blx	r3
   81b2e:	bd08      	pop	{r3, pc}
   81b30:	400e1000 	.word	0x400e1000
   81b34:	00081a7d 	.word	0x00081a7d

00081b38 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81b38:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81b3a:	4802      	ldr	r0, [pc, #8]	; (81b44 <PIOC_Handler+0xc>)
   81b3c:	210d      	movs	r1, #13
   81b3e:	4b02      	ldr	r3, [pc, #8]	; (81b48 <PIOC_Handler+0x10>)
   81b40:	4798      	blx	r3
   81b42:	bd08      	pop	{r3, pc}
   81b44:	400e1200 	.word	0x400e1200
   81b48:	00081a7d 	.word	0x00081a7d

00081b4c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81b4c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81b4e:	4802      	ldr	r0, [pc, #8]	; (81b58 <PIOD_Handler+0xc>)
   81b50:	210e      	movs	r1, #14
   81b52:	4b02      	ldr	r3, [pc, #8]	; (81b5c <PIOD_Handler+0x10>)
   81b54:	4798      	blx	r3
   81b56:	bd08      	pop	{r3, pc}
   81b58:	400e1400 	.word	0x400e1400
   81b5c:	00081a7d 	.word	0x00081a7d

00081b60 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81b60:	4b17      	ldr	r3, [pc, #92]	; (81bc0 <pmc_switch_mck_to_pllack+0x60>)
   81b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81b64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81b68:	4310      	orrs	r0, r2
   81b6a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81b6e:	f013 0f08 	tst.w	r3, #8
   81b72:	d109      	bne.n	81b88 <pmc_switch_mck_to_pllack+0x28>
   81b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81b78:	4911      	ldr	r1, [pc, #68]	; (81bc0 <pmc_switch_mck_to_pllack+0x60>)
   81b7a:	e001      	b.n	81b80 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81b7c:	3b01      	subs	r3, #1
   81b7e:	d019      	beq.n	81bb4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b80:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81b82:	f012 0f08 	tst.w	r2, #8
   81b86:	d0f9      	beq.n	81b7c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81b88:	4b0d      	ldr	r3, [pc, #52]	; (81bc0 <pmc_switch_mck_to_pllack+0x60>)
   81b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81b8c:	f022 0203 	bic.w	r2, r2, #3
   81b90:	f042 0202 	orr.w	r2, r2, #2
   81b94:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b96:	6e98      	ldr	r0, [r3, #104]	; 0x68
   81b98:	f010 0008 	ands.w	r0, r0, #8
   81b9c:	d10c      	bne.n	81bb8 <pmc_switch_mck_to_pllack+0x58>
   81b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81ba2:	4907      	ldr	r1, [pc, #28]	; (81bc0 <pmc_switch_mck_to_pllack+0x60>)
   81ba4:	e001      	b.n	81baa <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81ba6:	3b01      	subs	r3, #1
   81ba8:	d008      	beq.n	81bbc <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81baa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81bac:	f012 0f08 	tst.w	r2, #8
   81bb0:	d0f9      	beq.n	81ba6 <pmc_switch_mck_to_pllack+0x46>
   81bb2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81bb4:	2001      	movs	r0, #1
   81bb6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81bb8:	2000      	movs	r0, #0
   81bba:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81bbc:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81bbe:	4770      	bx	lr
   81bc0:	400e0600 	.word	0x400e0600

00081bc4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81bc4:	b138      	cbz	r0, 81bd6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81bc6:	4911      	ldr	r1, [pc, #68]	; (81c0c <pmc_switch_mainck_to_xtal+0x48>)
   81bc8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81bca:	4a11      	ldr	r2, [pc, #68]	; (81c10 <pmc_switch_mainck_to_xtal+0x4c>)
   81bcc:	401a      	ands	r2, r3
   81bce:	4b11      	ldr	r3, [pc, #68]	; (81c14 <pmc_switch_mainck_to_xtal+0x50>)
   81bd0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81bd2:	620b      	str	r3, [r1, #32]
   81bd4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81bd6:	4a0d      	ldr	r2, [pc, #52]	; (81c0c <pmc_switch_mainck_to_xtal+0x48>)
   81bd8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81bda:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81bde:	f023 0303 	bic.w	r3, r3, #3
   81be2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81be6:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81bea:	0209      	lsls	r1, r1, #8
   81bec:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81bee:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81bf0:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81bf2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81bf4:	f013 0f01 	tst.w	r3, #1
   81bf8:	d0fb      	beq.n	81bf2 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81bfa:	4a04      	ldr	r2, [pc, #16]	; (81c0c <pmc_switch_mainck_to_xtal+0x48>)
   81bfc:	6a13      	ldr	r3, [r2, #32]
   81bfe:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81c06:	6213      	str	r3, [r2, #32]
   81c08:	4770      	bx	lr
   81c0a:	bf00      	nop
   81c0c:	400e0600 	.word	0x400e0600
   81c10:	fec8fffc 	.word	0xfec8fffc
   81c14:	01370002 	.word	0x01370002

00081c18 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81c18:	4b02      	ldr	r3, [pc, #8]	; (81c24 <pmc_osc_is_ready_mainck+0xc>)
   81c1a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81c1c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81c20:	4770      	bx	lr
   81c22:	bf00      	nop
   81c24:	400e0600 	.word	0x400e0600

00081c28 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81c28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81c2c:	4b01      	ldr	r3, [pc, #4]	; (81c34 <pmc_disable_pllack+0xc>)
   81c2e:	629a      	str	r2, [r3, #40]	; 0x28
   81c30:	4770      	bx	lr
   81c32:	bf00      	nop
   81c34:	400e0600 	.word	0x400e0600

00081c38 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81c38:	4b02      	ldr	r3, [pc, #8]	; (81c44 <pmc_is_locked_pllack+0xc>)
   81c3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81c3c:	f000 0002 	and.w	r0, r0, #2
   81c40:	4770      	bx	lr
   81c42:	bf00      	nop
   81c44:	400e0600 	.word	0x400e0600

00081c48 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81c48:	282c      	cmp	r0, #44	; 0x2c
   81c4a:	d820      	bhi.n	81c8e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81c4c:	281f      	cmp	r0, #31
   81c4e:	d80d      	bhi.n	81c6c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81c50:	4b12      	ldr	r3, [pc, #72]	; (81c9c <pmc_enable_periph_clk+0x54>)
   81c52:	699a      	ldr	r2, [r3, #24]
   81c54:	2301      	movs	r3, #1
   81c56:	4083      	lsls	r3, r0
   81c58:	401a      	ands	r2, r3
   81c5a:	4293      	cmp	r3, r2
   81c5c:	d019      	beq.n	81c92 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81c5e:	2301      	movs	r3, #1
   81c60:	fa03 f000 	lsl.w	r0, r3, r0
   81c64:	4b0d      	ldr	r3, [pc, #52]	; (81c9c <pmc_enable_periph_clk+0x54>)
   81c66:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81c68:	2000      	movs	r0, #0
   81c6a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81c6c:	4b0b      	ldr	r3, [pc, #44]	; (81c9c <pmc_enable_periph_clk+0x54>)
   81c6e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   81c72:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81c74:	2301      	movs	r3, #1
   81c76:	4083      	lsls	r3, r0
   81c78:	401a      	ands	r2, r3
   81c7a:	4293      	cmp	r3, r2
   81c7c:	d00b      	beq.n	81c96 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   81c7e:	2301      	movs	r3, #1
   81c80:	fa03 f000 	lsl.w	r0, r3, r0
   81c84:	4b05      	ldr	r3, [pc, #20]	; (81c9c <pmc_enable_periph_clk+0x54>)
   81c86:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81c8a:	2000      	movs	r0, #0
   81c8c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   81c8e:	2001      	movs	r0, #1
   81c90:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81c92:	2000      	movs	r0, #0
   81c94:	4770      	bx	lr
   81c96:	2000      	movs	r0, #0
}
   81c98:	4770      	bx	lr
   81c9a:	bf00      	nop
   81c9c:	400e0600 	.word	0x400e0600

00081ca0 <pmc_set_writeprotect>:
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
   81ca0:	b120      	cbz	r0, 81cac <pmc_set_writeprotect+0xc>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
   81ca2:	4a05      	ldr	r2, [pc, #20]	; (81cb8 <pmc_set_writeprotect+0x18>)
   81ca4:	4b05      	ldr	r3, [pc, #20]	; (81cbc <pmc_set_writeprotect+0x1c>)
   81ca6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   81caa:	4770      	bx	lr
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
   81cac:	4a04      	ldr	r2, [pc, #16]	; (81cc0 <pmc_set_writeprotect+0x20>)
   81cae:	4b03      	ldr	r3, [pc, #12]	; (81cbc <pmc_set_writeprotect+0x1c>)
   81cb0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   81cb4:	4770      	bx	lr
   81cb6:	bf00      	nop
   81cb8:	504d4301 	.word	0x504d4301
   81cbc:	400e0600 	.word	0x400e0600
   81cc0:	504d4300 	.word	0x504d4300

00081cc4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   81cc4:	b4f0      	push	{r4, r5, r6, r7}
   81cc6:	b08c      	sub	sp, #48	; 0x30
   81cc8:	4607      	mov	r7, r0
   81cca:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81ccc:	ac01      	add	r4, sp, #4
   81cce:	4d12      	ldr	r5, [pc, #72]	; (81d18 <pwm_clocks_generate+0x54>)
   81cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81cd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   81cdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   81ce0:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   81ce2:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81ce4:	f852 4f04 	ldr.w	r4, [r2, #4]!
   81ce8:	fbb6 f4f4 	udiv	r4, r6, r4
   81cec:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   81cf0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   81cf4:	d903      	bls.n	81cfe <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   81cf6:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81cf8:	2b0b      	cmp	r3, #11
   81cfa:	d1f3      	bne.n	81ce4 <pwm_clocks_generate+0x20>
   81cfc:	e004      	b.n	81d08 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   81cfe:	2b0a      	cmp	r3, #10
   81d00:	d805      	bhi.n	81d0e <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   81d02:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   81d06:	e004      	b.n	81d12 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   81d08:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81d0c:	e001      	b.n	81d12 <pwm_clocks_generate+0x4e>
   81d0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   81d12:	b00c      	add	sp, #48	; 0x30
   81d14:	bcf0      	pop	{r4, r5, r6, r7}
   81d16:	4770      	bx	lr
   81d18:	00087120 	.word	0x00087120

00081d1c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81d1c:	b570      	push	{r4, r5, r6, lr}
   81d1e:	4606      	mov	r6, r0
   81d20:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81d22:	6808      	ldr	r0, [r1, #0]
   81d24:	b140      	cbz	r0, 81d38 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   81d26:	6889      	ldr	r1, [r1, #8]
   81d28:	4b0b      	ldr	r3, [pc, #44]	; (81d58 <pwm_init+0x3c>)
   81d2a:	4798      	blx	r3
   81d2c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   81d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81d32:	4298      	cmp	r0, r3
   81d34:	d101      	bne.n	81d3a <pwm_init+0x1e>
   81d36:	e00e      	b.n	81d56 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81d38:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81d3a:	6860      	ldr	r0, [r4, #4]
   81d3c:	b140      	cbz	r0, 81d50 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81d3e:	68a1      	ldr	r1, [r4, #8]
   81d40:	4b05      	ldr	r3, [pc, #20]	; (81d58 <pwm_init+0x3c>)
   81d42:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   81d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81d48:	4298      	cmp	r0, r3
   81d4a:	d004      	beq.n	81d56 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   81d4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81d50:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81d52:	2000      	movs	r0, #0
   81d54:	bd70      	pop	{r4, r5, r6, pc}
}
   81d56:	bd70      	pop	{r4, r5, r6, pc}
   81d58:	00081cc5 	.word	0x00081cc5

00081d5c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81d5c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   81d5e:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81d60:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81d62:	684a      	ldr	r2, [r1, #4]
   81d64:	f002 020f 	and.w	r2, r2, #15
   81d68:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   81d6a:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81d6c:	432c      	orrs	r4, r5
   81d6e:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   81d70:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   81d74:	7d8a      	ldrb	r2, [r1, #22]
   81d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   81d7a:	7dca      	ldrb	r2, [r1, #23]
   81d7c:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   81d80:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81d82:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   81d86:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   81d8a:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   81d8e:	68cc      	ldr	r4, [r1, #12]
   81d90:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   81d94:	690c      	ldr	r4, [r1, #16]
   81d96:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   81d9a:	7d8a      	ldrb	r2, [r1, #22]
   81d9c:	b13a      	cbz	r2, 81dae <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   81d9e:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   81da0:	8b4a      	ldrh	r2, [r1, #26]
   81da2:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   81da6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   81daa:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   81dae:	6c85      	ldr	r5, [r0, #72]	; 0x48
   81db0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   81db4:	409a      	lsls	r2, r3
   81db6:	43d2      	mvns	r2, r2
   81db8:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   81dba:	7fce      	ldrb	r6, [r1, #31]
   81dbc:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   81dbe:	7f8c      	ldrb	r4, [r1, #30]
   81dc0:	409c      	lsls	r4, r3
   81dc2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   81dc6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   81dc8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   81dca:	6c44      	ldr	r4, [r0, #68]	; 0x44
   81dcc:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   81dce:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81dd2:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   81dd4:	f891 4020 	ldrb.w	r4, [r1, #32]
   81dd8:	409c      	lsls	r4, r3
   81dda:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   81dde:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   81de0:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   81de2:	2201      	movs	r2, #1
   81de4:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   81de6:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81dea:	b11c      	cbz	r4, 81df4 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   81dec:	6a04      	ldr	r4, [r0, #32]
   81dee:	4314      	orrs	r4, r2
   81df0:	6204      	str	r4, [r0, #32]
   81df2:	e003      	b.n	81dfc <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81df4:	6a04      	ldr	r4, [r0, #32]
   81df6:	ea24 0402 	bic.w	r4, r4, r2
   81dfa:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81dfc:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   81e00:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81e02:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81e04:	bf0c      	ite	eq
   81e06:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   81e08:	4394      	bicne	r4, r2
   81e0a:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81e0c:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81e10:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81e12:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81e14:	bf0c      	ite	eq
   81e16:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81e1a:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   81e1e:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81e20:	2b03      	cmp	r3, #3
   81e22:	d80c      	bhi.n	81e3e <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   81e24:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   81e26:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81e28:	22ff      	movs	r2, #255	; 0xff
   81e2a:	409a      	lsls	r2, r3
   81e2c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81e30:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81e34:	fa01 f303 	lsl.w	r3, r1, r3
   81e38:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81e3a:	66c3      	str	r3, [r0, #108]	; 0x6c
   81e3c:	e00c      	b.n	81e58 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   81e3e:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81e40:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81e42:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81e44:	22ff      	movs	r2, #255	; 0xff
   81e46:	409a      	lsls	r2, r3
   81e48:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81e4c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81e50:	fa01 f303 	lsl.w	r3, r1, r3
   81e54:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   81e56:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   81e58:	2000      	movs	r0, #0
   81e5a:	bc70      	pop	{r4, r5, r6}
   81e5c:	4770      	bx	lr
   81e5e:	bf00      	nop

00081e60 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   81e60:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   81e62:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   81e64:	690b      	ldr	r3, [r1, #16]
   81e66:	4293      	cmp	r3, r2
   81e68:	d306      	bcc.n	81e78 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   81e6a:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   81e6c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   81e70:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   81e74:	2000      	movs	r0, #0
   81e76:	e001      	b.n	81e7c <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   81e78:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   81e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
   81e80:	4770      	bx	lr
   81e82:	bf00      	nop

00081e84 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   81e84:	2301      	movs	r3, #1
   81e86:	fa03 f101 	lsl.w	r1, r3, r1
   81e8a:	6041      	str	r1, [r0, #4]
   81e8c:	4770      	bx	lr
   81e8e:	bf00      	nop

00081e90 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81e90:	2301      	movs	r3, #1
   81e92:	fa03 f101 	lsl.w	r1, r3, r1
   81e96:	6081      	str	r1, [r0, #8]
   81e98:	4770      	bx	lr
   81e9a:	bf00      	nop

00081e9c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81e9c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81e9e:	23ac      	movs	r3, #172	; 0xac
   81ea0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81ea2:	680a      	ldr	r2, [r1, #0]
   81ea4:	684b      	ldr	r3, [r1, #4]
   81ea6:	fbb2 f3f3 	udiv	r3, r2, r3
   81eaa:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81eac:	1e5c      	subs	r4, r3, #1
   81eae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81eb2:	4294      	cmp	r4, r2
   81eb4:	d80a      	bhi.n	81ecc <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81eb6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81eb8:	688b      	ldr	r3, [r1, #8]
   81eba:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81ebc:	f240 2302 	movw	r3, #514	; 0x202
   81ec0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81ec4:	2350      	movs	r3, #80	; 0x50
   81ec6:	6003      	str	r3, [r0, #0]

	return 0;
   81ec8:	2000      	movs	r0, #0
   81eca:	e000      	b.n	81ece <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81ecc:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81ece:	f85d 4b04 	ldr.w	r4, [sp], #4
   81ed2:	4770      	bx	lr

00081ed4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81ed4:	6943      	ldr	r3, [r0, #20]
   81ed6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81eda:	bf1a      	itte	ne
   81edc:	61c1      	strne	r1, [r0, #28]
	return 0;
   81ede:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81ee0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81ee2:	4770      	bx	lr

00081ee4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81ee4:	6943      	ldr	r3, [r0, #20]
   81ee6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81eea:	bf1d      	ittte	ne
   81eec:	6983      	ldrne	r3, [r0, #24]
   81eee:	700b      	strbne	r3, [r1, #0]
	return 0;
   81ef0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   81ef2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81ef4:	4770      	bx	lr
   81ef6:	bf00      	nop

00081ef8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81ef8:	6943      	ldr	r3, [r0, #20]
   81efa:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81efe:	bf1d      	ittte	ne
   81f00:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81f04:	61c1      	strne	r1, [r0, #28]
	return 0;
   81f06:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81f08:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81f0a:	4770      	bx	lr

00081f0c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81f0c:	6943      	ldr	r3, [r0, #20]
   81f0e:	f013 0f01 	tst.w	r3, #1
   81f12:	d005      	beq.n	81f20 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81f14:	6983      	ldr	r3, [r0, #24]
   81f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81f1a:	600b      	str	r3, [r1, #0]

	return 0;
   81f1c:	2000      	movs	r0, #0
   81f1e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   81f20:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   81f22:	4770      	bx	lr

00081f24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81f24:	e7fe      	b.n	81f24 <Dummy_Handler>
   81f26:	bf00      	nop

00081f28 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81f28:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81f2a:	4b1e      	ldr	r3, [pc, #120]	; (81fa4 <Reset_Handler+0x7c>)
   81f2c:	4a1e      	ldr	r2, [pc, #120]	; (81fa8 <Reset_Handler+0x80>)
   81f2e:	429a      	cmp	r2, r3
   81f30:	d003      	beq.n	81f3a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81f32:	4b1e      	ldr	r3, [pc, #120]	; (81fac <Reset_Handler+0x84>)
   81f34:	4a1b      	ldr	r2, [pc, #108]	; (81fa4 <Reset_Handler+0x7c>)
   81f36:	429a      	cmp	r2, r3
   81f38:	d304      	bcc.n	81f44 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81f3a:	4b1d      	ldr	r3, [pc, #116]	; (81fb0 <Reset_Handler+0x88>)
   81f3c:	4a1d      	ldr	r2, [pc, #116]	; (81fb4 <Reset_Handler+0x8c>)
   81f3e:	429a      	cmp	r2, r3
   81f40:	d30f      	bcc.n	81f62 <Reset_Handler+0x3a>
   81f42:	e01a      	b.n	81f7a <Reset_Handler+0x52>
   81f44:	4b1c      	ldr	r3, [pc, #112]	; (81fb8 <Reset_Handler+0x90>)
   81f46:	4c1d      	ldr	r4, [pc, #116]	; (81fbc <Reset_Handler+0x94>)
   81f48:	1ae4      	subs	r4, r4, r3
   81f4a:	f024 0403 	bic.w	r4, r4, #3
   81f4e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81f50:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81f52:	4814      	ldr	r0, [pc, #80]	; (81fa4 <Reset_Handler+0x7c>)
   81f54:	4914      	ldr	r1, [pc, #80]	; (81fa8 <Reset_Handler+0x80>)
   81f56:	585a      	ldr	r2, [r3, r1]
   81f58:	501a      	str	r2, [r3, r0]
   81f5a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81f5c:	42a3      	cmp	r3, r4
   81f5e:	d1fa      	bne.n	81f56 <Reset_Handler+0x2e>
   81f60:	e7eb      	b.n	81f3a <Reset_Handler+0x12>
   81f62:	4b17      	ldr	r3, [pc, #92]	; (81fc0 <Reset_Handler+0x98>)
   81f64:	4917      	ldr	r1, [pc, #92]	; (81fc4 <Reset_Handler+0x9c>)
   81f66:	1ac9      	subs	r1, r1, r3
   81f68:	f021 0103 	bic.w	r1, r1, #3
   81f6c:	1d1a      	adds	r2, r3, #4
   81f6e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81f70:	2200      	movs	r2, #0
   81f72:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81f76:	428b      	cmp	r3, r1
   81f78:	d1fb      	bne.n	81f72 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81f7a:	4a13      	ldr	r2, [pc, #76]	; (81fc8 <Reset_Handler+0xa0>)
   81f7c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81f80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81f84:	4911      	ldr	r1, [pc, #68]	; (81fcc <Reset_Handler+0xa4>)
   81f86:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81f88:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81f8c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81f90:	d203      	bcs.n	81f9a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81f92:	688a      	ldr	r2, [r1, #8]
   81f94:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81f98:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81f9a:	4b0d      	ldr	r3, [pc, #52]	; (81fd0 <Reset_Handler+0xa8>)
   81f9c:	4798      	blx	r3

	/* Branch to main function */
	main();
   81f9e:	4b0d      	ldr	r3, [pc, #52]	; (81fd4 <Reset_Handler+0xac>)
   81fa0:	4798      	blx	r3
   81fa2:	e7fe      	b.n	81fa2 <Reset_Handler+0x7a>
   81fa4:	20070000 	.word	0x20070000
   81fa8:	0008742c 	.word	0x0008742c
   81fac:	200701ec 	.word	0x200701ec
   81fb0:	200785bc 	.word	0x200785bc
   81fb4:	200701f0 	.word	0x200701f0
   81fb8:	20070004 	.word	0x20070004
   81fbc:	200701ef 	.word	0x200701ef
   81fc0:	200701ec 	.word	0x200701ec
   81fc4:	200785b7 	.word	0x200785b7
   81fc8:	00080000 	.word	0x00080000
   81fcc:	e000ed00 	.word	0xe000ed00
   81fd0:	00083b01 	.word	0x00083b01
   81fd4:	00083965 	.word	0x00083965

00081fd8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81fd8:	4b3e      	ldr	r3, [pc, #248]	; (820d4 <SystemCoreClockUpdate+0xfc>)
   81fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81fdc:	f003 0303 	and.w	r3, r3, #3
   81fe0:	2b03      	cmp	r3, #3
   81fe2:	d85f      	bhi.n	820a4 <SystemCoreClockUpdate+0xcc>
   81fe4:	e8df f003 	tbb	[pc, r3]
   81fe8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81fec:	4b3a      	ldr	r3, [pc, #232]	; (820d8 <SystemCoreClockUpdate+0x100>)
   81fee:	695b      	ldr	r3, [r3, #20]
   81ff0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81ff4:	bf14      	ite	ne
   81ff6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81ffa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81ffe:	4b37      	ldr	r3, [pc, #220]	; (820dc <SystemCoreClockUpdate+0x104>)
   82000:	601a      	str	r2, [r3, #0]
   82002:	e04f      	b.n	820a4 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82004:	4b33      	ldr	r3, [pc, #204]	; (820d4 <SystemCoreClockUpdate+0xfc>)
   82006:	6a1b      	ldr	r3, [r3, #32]
   82008:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8200c:	d003      	beq.n	82016 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8200e:	4a34      	ldr	r2, [pc, #208]	; (820e0 <SystemCoreClockUpdate+0x108>)
   82010:	4b32      	ldr	r3, [pc, #200]	; (820dc <SystemCoreClockUpdate+0x104>)
   82012:	601a      	str	r2, [r3, #0]
   82014:	e046      	b.n	820a4 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82016:	4a33      	ldr	r2, [pc, #204]	; (820e4 <SystemCoreClockUpdate+0x10c>)
   82018:	4b30      	ldr	r3, [pc, #192]	; (820dc <SystemCoreClockUpdate+0x104>)
   8201a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8201c:	4b2d      	ldr	r3, [pc, #180]	; (820d4 <SystemCoreClockUpdate+0xfc>)
   8201e:	6a1b      	ldr	r3, [r3, #32]
   82020:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82024:	2b10      	cmp	r3, #16
   82026:	d002      	beq.n	8202e <SystemCoreClockUpdate+0x56>
   82028:	2b20      	cmp	r3, #32
   8202a:	d004      	beq.n	82036 <SystemCoreClockUpdate+0x5e>
   8202c:	e03a      	b.n	820a4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8202e:	4a2e      	ldr	r2, [pc, #184]	; (820e8 <SystemCoreClockUpdate+0x110>)
   82030:	4b2a      	ldr	r3, [pc, #168]	; (820dc <SystemCoreClockUpdate+0x104>)
   82032:	601a      	str	r2, [r3, #0]
				break;
   82034:	e036      	b.n	820a4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82036:	4a2a      	ldr	r2, [pc, #168]	; (820e0 <SystemCoreClockUpdate+0x108>)
   82038:	4b28      	ldr	r3, [pc, #160]	; (820dc <SystemCoreClockUpdate+0x104>)
   8203a:	601a      	str	r2, [r3, #0]
				break;
   8203c:	e032      	b.n	820a4 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8203e:	4b25      	ldr	r3, [pc, #148]	; (820d4 <SystemCoreClockUpdate+0xfc>)
   82040:	6a1b      	ldr	r3, [r3, #32]
   82042:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82046:	d003      	beq.n	82050 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82048:	4a25      	ldr	r2, [pc, #148]	; (820e0 <SystemCoreClockUpdate+0x108>)
   8204a:	4b24      	ldr	r3, [pc, #144]	; (820dc <SystemCoreClockUpdate+0x104>)
   8204c:	601a      	str	r2, [r3, #0]
   8204e:	e012      	b.n	82076 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82050:	4a24      	ldr	r2, [pc, #144]	; (820e4 <SystemCoreClockUpdate+0x10c>)
   82052:	4b22      	ldr	r3, [pc, #136]	; (820dc <SystemCoreClockUpdate+0x104>)
   82054:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82056:	4b1f      	ldr	r3, [pc, #124]	; (820d4 <SystemCoreClockUpdate+0xfc>)
   82058:	6a1b      	ldr	r3, [r3, #32]
   8205a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8205e:	2b10      	cmp	r3, #16
   82060:	d002      	beq.n	82068 <SystemCoreClockUpdate+0x90>
   82062:	2b20      	cmp	r3, #32
   82064:	d004      	beq.n	82070 <SystemCoreClockUpdate+0x98>
   82066:	e006      	b.n	82076 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82068:	4a1f      	ldr	r2, [pc, #124]	; (820e8 <SystemCoreClockUpdate+0x110>)
   8206a:	4b1c      	ldr	r3, [pc, #112]	; (820dc <SystemCoreClockUpdate+0x104>)
   8206c:	601a      	str	r2, [r3, #0]
				break;
   8206e:	e002      	b.n	82076 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82070:	4a1b      	ldr	r2, [pc, #108]	; (820e0 <SystemCoreClockUpdate+0x108>)
   82072:	4b1a      	ldr	r3, [pc, #104]	; (820dc <SystemCoreClockUpdate+0x104>)
   82074:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82076:	4b17      	ldr	r3, [pc, #92]	; (820d4 <SystemCoreClockUpdate+0xfc>)
   82078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8207a:	f003 0303 	and.w	r3, r3, #3
   8207e:	2b02      	cmp	r3, #2
   82080:	d10d      	bne.n	8209e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82082:	4b14      	ldr	r3, [pc, #80]	; (820d4 <SystemCoreClockUpdate+0xfc>)
   82084:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82086:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82088:	4b14      	ldr	r3, [pc, #80]	; (820dc <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8208a:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8208e:	681a      	ldr	r2, [r3, #0]
   82090:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82094:	b2c9      	uxtb	r1, r1
   82096:	fbb2 f2f1 	udiv	r2, r2, r1
   8209a:	601a      	str	r2, [r3, #0]
   8209c:	e002      	b.n	820a4 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8209e:	4a13      	ldr	r2, [pc, #76]	; (820ec <SystemCoreClockUpdate+0x114>)
   820a0:	4b0e      	ldr	r3, [pc, #56]	; (820dc <SystemCoreClockUpdate+0x104>)
   820a2:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   820a4:	4b0b      	ldr	r3, [pc, #44]	; (820d4 <SystemCoreClockUpdate+0xfc>)
   820a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   820a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   820ac:	2b70      	cmp	r3, #112	; 0x70
   820ae:	d107      	bne.n	820c0 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   820b0:	4b0a      	ldr	r3, [pc, #40]	; (820dc <SystemCoreClockUpdate+0x104>)
   820b2:	681a      	ldr	r2, [r3, #0]
   820b4:	490e      	ldr	r1, [pc, #56]	; (820f0 <SystemCoreClockUpdate+0x118>)
   820b6:	fba1 0202 	umull	r0, r2, r1, r2
   820ba:	0852      	lsrs	r2, r2, #1
   820bc:	601a      	str	r2, [r3, #0]
   820be:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   820c0:	4b04      	ldr	r3, [pc, #16]	; (820d4 <SystemCoreClockUpdate+0xfc>)
   820c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   820c4:	4b05      	ldr	r3, [pc, #20]	; (820dc <SystemCoreClockUpdate+0x104>)
   820c6:	f3c1 1102 	ubfx	r1, r1, #4, #3
   820ca:	681a      	ldr	r2, [r3, #0]
   820cc:	40ca      	lsrs	r2, r1
   820ce:	601a      	str	r2, [r3, #0]
   820d0:	4770      	bx	lr
   820d2:	bf00      	nop
   820d4:	400e0600 	.word	0x400e0600
   820d8:	400e1a10 	.word	0x400e1a10
   820dc:	20070140 	.word	0x20070140
   820e0:	00b71b00 	.word	0x00b71b00
   820e4:	003d0900 	.word	0x003d0900
   820e8:	007a1200 	.word	0x007a1200
   820ec:	0e4e1c00 	.word	0x0e4e1c00
   820f0:	aaaaaaab 	.word	0xaaaaaaab

000820f4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   820f4:	4b09      	ldr	r3, [pc, #36]	; (8211c <_sbrk+0x28>)
   820f6:	681b      	ldr	r3, [r3, #0]
   820f8:	b913      	cbnz	r3, 82100 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   820fa:	4a09      	ldr	r2, [pc, #36]	; (82120 <_sbrk+0x2c>)
   820fc:	4b07      	ldr	r3, [pc, #28]	; (8211c <_sbrk+0x28>)
   820fe:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82100:	4b06      	ldr	r3, [pc, #24]	; (8211c <_sbrk+0x28>)
   82102:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82104:	181a      	adds	r2, r3, r0
   82106:	4907      	ldr	r1, [pc, #28]	; (82124 <_sbrk+0x30>)
   82108:	4291      	cmp	r1, r2
   8210a:	db04      	blt.n	82116 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   8210c:	4610      	mov	r0, r2
   8210e:	4a03      	ldr	r2, [pc, #12]	; (8211c <_sbrk+0x28>)
   82110:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82112:	4618      	mov	r0, r3
   82114:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82116:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   8211a:	4770      	bx	lr
   8211c:	200702f0 	.word	0x200702f0
   82120:	2007a5c0 	.word	0x2007a5c0
   82124:	20087ffc 	.word	0x20087ffc

00082128 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82128:	f04f 30ff 	mov.w	r0, #4294967295
   8212c:	4770      	bx	lr
   8212e:	bf00      	nop

00082130 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82134:	604b      	str	r3, [r1, #4]

	return 0;
}
   82136:	2000      	movs	r0, #0
   82138:	4770      	bx	lr
   8213a:	bf00      	nop

0008213c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8213c:	2001      	movs	r0, #1
   8213e:	4770      	bx	lr

00082140 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82140:	2000      	movs	r0, #0
   82142:	4770      	bx	lr

00082144 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   82144:	f100 0308 	add.w	r3, r0, #8
   82148:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8214a:	f04f 32ff 	mov.w	r2, #4294967295
   8214e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   82150:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   82152:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   82154:	2300      	movs	r3, #0
   82156:	6003      	str	r3, [r0, #0]
   82158:	4770      	bx	lr
   8215a:	bf00      	nop

0008215c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8215c:	2300      	movs	r3, #0
   8215e:	6103      	str	r3, [r0, #16]
   82160:	4770      	bx	lr
   82162:	bf00      	nop

00082164 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   82164:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   82166:	685a      	ldr	r2, [r3, #4]
   82168:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8216a:	6842      	ldr	r2, [r0, #4]
   8216c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8216e:	685a      	ldr	r2, [r3, #4]
   82170:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   82172:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   82174:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82176:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   82178:	6803      	ldr	r3, [r0, #0]
   8217a:	3301      	adds	r3, #1
   8217c:	6003      	str	r3, [r0, #0]
   8217e:	4770      	bx	lr

00082180 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   82180:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   82182:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   82184:	f1b4 3fff 	cmp.w	r4, #4294967295
   82188:	d101      	bne.n	8218e <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   8218a:	6903      	ldr	r3, [r0, #16]
   8218c:	e00a      	b.n	821a4 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8218e:	f100 0308 	add.w	r3, r0, #8
   82192:	68c2      	ldr	r2, [r0, #12]
   82194:	6812      	ldr	r2, [r2, #0]
   82196:	4294      	cmp	r4, r2
   82198:	d304      	bcc.n	821a4 <vListInsert+0x24>
   8219a:	685b      	ldr	r3, [r3, #4]
   8219c:	685a      	ldr	r2, [r3, #4]
   8219e:	6812      	ldr	r2, [r2, #0]
   821a0:	4294      	cmp	r4, r2
   821a2:	d2fa      	bcs.n	8219a <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   821a4:	685a      	ldr	r2, [r3, #4]
   821a6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   821a8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   821aa:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   821ac:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   821ae:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   821b0:	6803      	ldr	r3, [r0, #0]
   821b2:	3301      	adds	r3, #1
   821b4:	6003      	str	r3, [r0, #0]
}
   821b6:	f85d 4b04 	ldr.w	r4, [sp], #4
   821ba:	4770      	bx	lr

000821bc <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   821bc:	6843      	ldr	r3, [r0, #4]
   821be:	6882      	ldr	r2, [r0, #8]
   821c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   821c2:	6883      	ldr	r3, [r0, #8]
   821c4:	6842      	ldr	r2, [r0, #4]
   821c6:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   821c8:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   821ca:	685a      	ldr	r2, [r3, #4]
   821cc:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   821ce:	bf04      	itt	eq
   821d0:	6882      	ldreq	r2, [r0, #8]
   821d2:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   821d4:	2200      	movs	r2, #0
   821d6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   821d8:	681a      	ldr	r2, [r3, #0]
   821da:	3a01      	subs	r2, #1
   821dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   821de:	6818      	ldr	r0, [r3, #0]
}
   821e0:	4770      	bx	lr
   821e2:	bf00      	nop

000821e4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   821e4:	4803      	ldr	r0, [pc, #12]	; (821f4 <prvPortStartFirstTask+0x10>)
   821e6:	6800      	ldr	r0, [r0, #0]
   821e8:	6800      	ldr	r0, [r0, #0]
   821ea:	f380 8808 	msr	MSP, r0
   821ee:	b662      	cpsie	i
   821f0:	df00      	svc	0
   821f2:	bf00      	nop
   821f4:	e000ed08 	.word	0xe000ed08

000821f8 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   821f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   821fc:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   82200:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   82204:	2300      	movs	r3, #0
   82206:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8220a:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   8220e:	3840      	subs	r0, #64	; 0x40
   82210:	4770      	bx	lr
   82212:	bf00      	nop

00082214 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   82214:	4b06      	ldr	r3, [pc, #24]	; (82230 <pxCurrentTCBConst2>)
   82216:	6819      	ldr	r1, [r3, #0]
   82218:	6808      	ldr	r0, [r1, #0]
   8221a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8221e:	f380 8809 	msr	PSP, r0
   82222:	f04f 0000 	mov.w	r0, #0
   82226:	f380 8811 	msr	BASEPRI, r0
   8222a:	f04e 0e0d 	orr.w	lr, lr, #13
   8222e:	4770      	bx	lr

00082230 <pxCurrentTCBConst2>:
   82230:	2007840c 	.word	0x2007840c

00082234 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82238:	4b01      	ldr	r3, [pc, #4]	; (82240 <vPortYieldFromISR+0xc>)
   8223a:	601a      	str	r2, [r3, #0]
   8223c:	4770      	bx	lr
   8223e:	bf00      	nop
   82240:	e000ed04 	.word	0xe000ed04

00082244 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82244:	f3ef 8011 	mrs	r0, BASEPRI
   82248:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8224c:	f381 8811 	msr	BASEPRI, r1
   82250:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   82252:	2000      	movs	r0, #0

00082254 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   82254:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   82256:	4b03      	ldr	r3, [pc, #12]	; (82264 <vPortEnterCritical+0x10>)
   82258:	4798      	blx	r3
	uxCriticalNesting++;
   8225a:	4b03      	ldr	r3, [pc, #12]	; (82268 <vPortEnterCritical+0x14>)
   8225c:	681a      	ldr	r2, [r3, #0]
   8225e:	3201      	adds	r2, #1
   82260:	601a      	str	r2, [r3, #0]
   82262:	bd08      	pop	{r3, pc}
   82264:	00082245 	.word	0x00082245
   82268:	20070144 	.word	0x20070144

0008226c <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   8226c:	f380 8811 	msr	BASEPRI, r0
   82270:	4770      	bx	lr
   82272:	bf00      	nop

00082274 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   82274:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   82276:	4a04      	ldr	r2, [pc, #16]	; (82288 <vPortExitCritical+0x14>)
   82278:	6813      	ldr	r3, [r2, #0]
   8227a:	3b01      	subs	r3, #1
   8227c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8227e:	b913      	cbnz	r3, 82286 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   82280:	2000      	movs	r0, #0
   82282:	4b02      	ldr	r3, [pc, #8]	; (8228c <vPortExitCritical+0x18>)
   82284:	4798      	blx	r3
   82286:	bd08      	pop	{r3, pc}
   82288:	20070144 	.word	0x20070144
   8228c:	0008226d 	.word	0x0008226d

00082290 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   82290:	f3ef 8009 	mrs	r0, PSP
   82294:	4b0c      	ldr	r3, [pc, #48]	; (822c8 <pxCurrentTCBConst>)
   82296:	681a      	ldr	r2, [r3, #0]
   82298:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8229c:	6010      	str	r0, [r2, #0]
   8229e:	e92d 4008 	stmdb	sp!, {r3, lr}
   822a2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   822a6:	f380 8811 	msr	BASEPRI, r0
   822aa:	f000 fed3 	bl	83054 <vTaskSwitchContext>
   822ae:	f04f 0000 	mov.w	r0, #0
   822b2:	f380 8811 	msr	BASEPRI, r0
   822b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   822ba:	6819      	ldr	r1, [r3, #0]
   822bc:	6808      	ldr	r0, [r1, #0]
   822be:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   822c2:	f380 8809 	msr	PSP, r0
   822c6:	4770      	bx	lr

000822c8 <pxCurrentTCBConst>:
   822c8:	2007840c 	.word	0x2007840c

000822cc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   822cc:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   822ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   822d2:	4b05      	ldr	r3, [pc, #20]	; (822e8 <SysTick_Handler+0x1c>)
   822d4:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   822d6:	4b05      	ldr	r3, [pc, #20]	; (822ec <SysTick_Handler+0x20>)
   822d8:	4798      	blx	r3
	{
		vTaskIncrementTick();
   822da:	4b05      	ldr	r3, [pc, #20]	; (822f0 <SysTick_Handler+0x24>)
   822dc:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   822de:	2000      	movs	r0, #0
   822e0:	4b04      	ldr	r3, [pc, #16]	; (822f4 <SysTick_Handler+0x28>)
   822e2:	4798      	blx	r3
   822e4:	bd08      	pop	{r3, pc}
   822e6:	bf00      	nop
   822e8:	e000ed04 	.word	0xe000ed04
   822ec:	00082245 	.word	0x00082245
   822f0:	00082cd1 	.word	0x00082cd1
   822f4:	0008226d 	.word	0x0008226d

000822f8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   822f8:	4a03      	ldr	r2, [pc, #12]	; (82308 <vPortSetupTimerInterrupt+0x10>)
   822fa:	4b04      	ldr	r3, [pc, #16]	; (8230c <vPortSetupTimerInterrupt+0x14>)
   822fc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   822fe:	2207      	movs	r2, #7
   82300:	3b04      	subs	r3, #4
   82302:	601a      	str	r2, [r3, #0]
   82304:	4770      	bx	lr
   82306:	bf00      	nop
   82308:	0001481f 	.word	0x0001481f
   8230c:	e000e014 	.word	0xe000e014

00082310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   82310:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   82312:	4b09      	ldr	r3, [pc, #36]	; (82338 <xPortStartScheduler+0x28>)
   82314:	681a      	ldr	r2, [r3, #0]
   82316:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8231a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   8231c:	681a      	ldr	r2, [r3, #0]
   8231e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   82322:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   82324:	4b05      	ldr	r3, [pc, #20]	; (8233c <xPortStartScheduler+0x2c>)
   82326:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   82328:	2400      	movs	r4, #0
   8232a:	4b05      	ldr	r3, [pc, #20]	; (82340 <xPortStartScheduler+0x30>)
   8232c:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8232e:	4b05      	ldr	r3, [pc, #20]	; (82344 <xPortStartScheduler+0x34>)
   82330:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   82332:	4620      	mov	r0, r4
   82334:	bd10      	pop	{r4, pc}
   82336:	bf00      	nop
   82338:	e000ed20 	.word	0xe000ed20
   8233c:	000822f9 	.word	0x000822f9
   82340:	20070144 	.word	0x20070144
   82344:	000821e5 	.word	0x000821e5

00082348 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   82348:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8234a:	4a13      	ldr	r2, [pc, #76]	; (82398 <prvInsertBlockIntoFreeList+0x50>)
   8234c:	6813      	ldr	r3, [r2, #0]
   8234e:	4283      	cmp	r3, r0
   82350:	d201      	bcs.n	82356 <prvInsertBlockIntoFreeList+0xe>
   82352:	461a      	mov	r2, r3
   82354:	e7fa      	b.n	8234c <prvInsertBlockIntoFreeList+0x4>
   82356:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   82358:	6854      	ldr	r4, [r2, #4]
   8235a:	1915      	adds	r5, r2, r4
   8235c:	4285      	cmp	r5, r0
   8235e:	d103      	bne.n	82368 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   82360:	6868      	ldr	r0, [r5, #4]
   82362:	4404      	add	r4, r0
   82364:	6054      	str	r4, [r2, #4]
   82366:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   82368:	6842      	ldr	r2, [r0, #4]
   8236a:	1884      	adds	r4, r0, r2
   8236c:	42a3      	cmp	r3, r4
   8236e:	d10c      	bne.n	8238a <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   82370:	4c0a      	ldr	r4, [pc, #40]	; (8239c <prvInsertBlockIntoFreeList+0x54>)
   82372:	6824      	ldr	r4, [r4, #0]
   82374:	429c      	cmp	r4, r3
   82376:	d006      	beq.n	82386 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   82378:	685b      	ldr	r3, [r3, #4]
   8237a:	441a      	add	r2, r3
   8237c:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8237e:	680b      	ldr	r3, [r1, #0]
   82380:	681b      	ldr	r3, [r3, #0]
   82382:	6003      	str	r3, [r0, #0]
   82384:	e002      	b.n	8238c <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   82386:	6003      	str	r3, [r0, #0]
   82388:	e000      	b.n	8238c <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   8238a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   8238c:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8238e:	bf18      	it	ne
   82390:	6008      	strne	r0, [r1, #0]
	}
}
   82392:	bc30      	pop	{r4, r5}
   82394:	4770      	bx	lr
   82396:	bf00      	nop
   82398:	200782fc 	.word	0x200782fc
   8239c:	200782f8 	.word	0x200782f8

000823a0 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   823a0:	b538      	push	{r3, r4, r5, lr}
   823a2:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   823a4:	4b28      	ldr	r3, [pc, #160]	; (82448 <pvPortMalloc+0xa8>)
   823a6:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   823a8:	4b28      	ldr	r3, [pc, #160]	; (8244c <pvPortMalloc+0xac>)
   823aa:	681b      	ldr	r3, [r3, #0]
   823ac:	b99b      	cbnz	r3, 823d6 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   823ae:	4a28      	ldr	r2, [pc, #160]	; (82450 <pvPortMalloc+0xb0>)
   823b0:	4b28      	ldr	r3, [pc, #160]	; (82454 <pvPortMalloc+0xb4>)
   823b2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   823b4:	2100      	movs	r1, #0
   823b6:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   823b8:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   823bc:	1898      	adds	r0, r3, r2
   823be:	4d23      	ldr	r5, [pc, #140]	; (8244c <pvPortMalloc+0xac>)
   823c0:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   823c2:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   823c6:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   823c8:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   823ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   823cc:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   823ce:	4b22      	ldr	r3, [pc, #136]	; (82458 <pvPortMalloc+0xb8>)
   823d0:	681a      	ldr	r2, [r3, #0]
   823d2:	3a10      	subs	r2, #16
   823d4:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   823d6:	2c00      	cmp	r4, #0
   823d8:	d02d      	beq.n	82436 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   823da:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   823de:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   823e2:	bf1c      	itt	ne
   823e4:	f022 0207 	bicne.w	r2, r2, #7
   823e8:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   823ea:	1e51      	subs	r1, r2, #1
   823ec:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   823f0:	4299      	cmp	r1, r3
   823f2:	d822      	bhi.n	8243a <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   823f4:	4916      	ldr	r1, [pc, #88]	; (82450 <pvPortMalloc+0xb0>)
   823f6:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   823f8:	6863      	ldr	r3, [r4, #4]
   823fa:	429a      	cmp	r2, r3
   823fc:	d904      	bls.n	82408 <pvPortMalloc+0x68>
   823fe:	6823      	ldr	r3, [r4, #0]
   82400:	b113      	cbz	r3, 82408 <pvPortMalloc+0x68>
   82402:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   82404:	461c      	mov	r4, r3
   82406:	e7f7      	b.n	823f8 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   82408:	4b10      	ldr	r3, [pc, #64]	; (8244c <pvPortMalloc+0xac>)
   8240a:	681b      	ldr	r3, [r3, #0]
   8240c:	429c      	cmp	r4, r3
   8240e:	d016      	beq.n	8243e <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   82410:	680d      	ldr	r5, [r1, #0]
   82412:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   82414:	6823      	ldr	r3, [r4, #0]
   82416:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   82418:	6863      	ldr	r3, [r4, #4]
   8241a:	1a9b      	subs	r3, r3, r2
   8241c:	2b20      	cmp	r3, #32
   8241e:	d904      	bls.n	8242a <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   82420:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   82422:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   82424:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   82426:	4b0d      	ldr	r3, [pc, #52]	; (8245c <pvPortMalloc+0xbc>)
   82428:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8242a:	4b0b      	ldr	r3, [pc, #44]	; (82458 <pvPortMalloc+0xb8>)
   8242c:	681a      	ldr	r2, [r3, #0]
   8242e:	6861      	ldr	r1, [r4, #4]
   82430:	1a52      	subs	r2, r2, r1
   82432:	601a      	str	r2, [r3, #0]
   82434:	e004      	b.n	82440 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   82436:	2500      	movs	r5, #0
   82438:	e002      	b.n	82440 <pvPortMalloc+0xa0>
   8243a:	2500      	movs	r5, #0
   8243c:	e000      	b.n	82440 <pvPortMalloc+0xa0>
   8243e:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   82440:	4b07      	ldr	r3, [pc, #28]	; (82460 <pvPortMalloc+0xc0>)
   82442:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   82444:	4628      	mov	r0, r5
   82446:	bd38      	pop	{r3, r4, r5, pc}
   82448:	00082ca1 	.word	0x00082ca1
   8244c:	200782f8 	.word	0x200782f8
   82450:	200782fc 	.word	0x200782fc
   82454:	200702f8 	.word	0x200702f8
   82458:	20070148 	.word	0x20070148
   8245c:	00082349 	.word	0x00082349
   82460:	00082df1 	.word	0x00082df1

00082464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   82464:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   82466:	4604      	mov	r4, r0
   82468:	b168      	cbz	r0, 82486 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   8246a:	4b07      	ldr	r3, [pc, #28]	; (82488 <vPortFree+0x24>)
   8246c:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8246e:	4b07      	ldr	r3, [pc, #28]	; (8248c <vPortFree+0x28>)
   82470:	6819      	ldr	r1, [r3, #0]
   82472:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   82476:	440a      	add	r2, r1
   82478:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8247a:	f1a4 0010 	sub.w	r0, r4, #16
   8247e:	4b04      	ldr	r3, [pc, #16]	; (82490 <vPortFree+0x2c>)
   82480:	4798      	blx	r3
		}
		xTaskResumeAll();
   82482:	4b04      	ldr	r3, [pc, #16]	; (82494 <vPortFree+0x30>)
   82484:	4798      	blx	r3
   82486:	bd10      	pop	{r4, pc}
   82488:	00082ca1 	.word	0x00082ca1
   8248c:	20070148 	.word	0x20070148
   82490:	00082349 	.word	0x00082349
   82494:	00082df1 	.word	0x00082df1

00082498 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   82498:	b510      	push	{r4, lr}
   8249a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   8249c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8249e:	b93b      	cbnz	r3, 824b0 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   824a0:	6803      	ldr	r3, [r0, #0]
   824a2:	bb1b      	cbnz	r3, 824ec <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   824a4:	6840      	ldr	r0, [r0, #4]
   824a6:	4b13      	ldr	r3, [pc, #76]	; (824f4 <prvCopyDataToQueue+0x5c>)
   824a8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   824aa:	2300      	movs	r3, #0
   824ac:	6063      	str	r3, [r4, #4]
   824ae:	e01d      	b.n	824ec <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   824b0:	b96a      	cbnz	r2, 824ce <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   824b2:	6880      	ldr	r0, [r0, #8]
   824b4:	461a      	mov	r2, r3
   824b6:	4b10      	ldr	r3, [pc, #64]	; (824f8 <prvCopyDataToQueue+0x60>)
   824b8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   824ba:	68a2      	ldr	r2, [r4, #8]
   824bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   824be:	4413      	add	r3, r2
   824c0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   824c2:	6862      	ldr	r2, [r4, #4]
   824c4:	4293      	cmp	r3, r2
   824c6:	d311      	bcc.n	824ec <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   824c8:	6823      	ldr	r3, [r4, #0]
   824ca:	60a3      	str	r3, [r4, #8]
   824cc:	e00e      	b.n	824ec <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   824ce:	68c0      	ldr	r0, [r0, #12]
   824d0:	461a      	mov	r2, r3
   824d2:	4b09      	ldr	r3, [pc, #36]	; (824f8 <prvCopyDataToQueue+0x60>)
   824d4:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   824d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   824d8:	4252      	negs	r2, r2
   824da:	68e3      	ldr	r3, [r4, #12]
   824dc:	4413      	add	r3, r2
   824de:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   824e0:	6821      	ldr	r1, [r4, #0]
   824e2:	428b      	cmp	r3, r1
   824e4:	d202      	bcs.n	824ec <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   824e6:	6863      	ldr	r3, [r4, #4]
   824e8:	441a      	add	r2, r3
   824ea:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   824ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   824ee:	3301      	adds	r3, #1
   824f0:	63a3      	str	r3, [r4, #56]	; 0x38
   824f2:	bd10      	pop	{r4, pc}
   824f4:	0008336d 	.word	0x0008336d
   824f8:	00083b4d 	.word	0x00083b4d

000824fc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   824fc:	b538      	push	{r3, r4, r5, lr}
   824fe:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   82500:	6805      	ldr	r5, [r0, #0]
   82502:	b15d      	cbz	r5, 8251c <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   82504:	6c02      	ldr	r2, [r0, #64]	; 0x40
   82506:	68c4      	ldr	r4, [r0, #12]
   82508:	4414      	add	r4, r2
   8250a:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   8250c:	6840      	ldr	r0, [r0, #4]
   8250e:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   82510:	bf28      	it	cs
   82512:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   82514:	4608      	mov	r0, r1
   82516:	68d9      	ldr	r1, [r3, #12]
   82518:	4b01      	ldr	r3, [pc, #4]	; (82520 <prvCopyDataFromQueue+0x24>)
   8251a:	4798      	blx	r3
   8251c:	bd38      	pop	{r3, r4, r5, pc}
   8251e:	bf00      	nop
   82520:	00083b4d 	.word	0x00083b4d

00082524 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   82524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82526:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   82528:	4b1d      	ldr	r3, [pc, #116]	; (825a0 <prvUnlockQueue+0x7c>)
   8252a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8252c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8252e:	2b00      	cmp	r3, #0
   82530:	dd12      	ble.n	82558 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82532:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82534:	b183      	cbz	r3, 82558 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82536:	f104 0624 	add.w	r6, r4, #36	; 0x24
   8253a:	4d1a      	ldr	r5, [pc, #104]	; (825a4 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   8253c:	4f1a      	ldr	r7, [pc, #104]	; (825a8 <prvUnlockQueue+0x84>)
   8253e:	e001      	b.n	82544 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82540:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82542:	b14b      	cbz	r3, 82558 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82544:	4630      	mov	r0, r6
   82546:	47a8      	blx	r5
   82548:	b100      	cbz	r0, 8254c <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   8254a:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   8254c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8254e:	3b01      	subs	r3, #1
   82550:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   82552:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   82554:	2b00      	cmp	r3, #0
   82556:	dcf3      	bgt.n	82540 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   82558:	f04f 33ff 	mov.w	r3, #4294967295
   8255c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8255e:	4b13      	ldr	r3, [pc, #76]	; (825ac <prvUnlockQueue+0x88>)
   82560:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   82562:	4b0f      	ldr	r3, [pc, #60]	; (825a0 <prvUnlockQueue+0x7c>)
   82564:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   82566:	6c63      	ldr	r3, [r4, #68]	; 0x44
   82568:	2b00      	cmp	r3, #0
   8256a:	dd12      	ble.n	82592 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8256c:	6923      	ldr	r3, [r4, #16]
   8256e:	b183      	cbz	r3, 82592 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   82570:	f104 0610 	add.w	r6, r4, #16
   82574:	4d0b      	ldr	r5, [pc, #44]	; (825a4 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   82576:	4f0c      	ldr	r7, [pc, #48]	; (825a8 <prvUnlockQueue+0x84>)
   82578:	e001      	b.n	8257e <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8257a:	6923      	ldr	r3, [r4, #16]
   8257c:	b14b      	cbz	r3, 82592 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8257e:	4630      	mov	r0, r6
   82580:	47a8      	blx	r5
   82582:	b100      	cbz	r0, 82586 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   82584:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   82586:	6c63      	ldr	r3, [r4, #68]	; 0x44
   82588:	3b01      	subs	r3, #1
   8258a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8258c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8258e:	2b00      	cmp	r3, #0
   82590:	dcf3      	bgt.n	8257a <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   82592:	f04f 33ff 	mov.w	r3, #4294967295
   82596:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   82598:	4b04      	ldr	r3, [pc, #16]	; (825ac <prvUnlockQueue+0x88>)
   8259a:	4798      	blx	r3
   8259c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8259e:	bf00      	nop
   825a0:	00082255 	.word	0x00082255
   825a4:	00083189 	.word	0x00083189
   825a8:	000832b9 	.word	0x000832b9
   825ac:	00082275 	.word	0x00082275

000825b0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   825b0:	b538      	push	{r3, r4, r5, lr}
   825b2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   825b4:	4604      	mov	r4, r0
   825b6:	b918      	cbnz	r0, 825c0 <xQueueGenericReset+0x10>
   825b8:	4b16      	ldr	r3, [pc, #88]	; (82614 <xQueueGenericReset+0x64>)
   825ba:	4798      	blx	r3
   825bc:	bf00      	nop
   825be:	e7fd      	b.n	825bc <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   825c0:	4b15      	ldr	r3, [pc, #84]	; (82618 <xQueueGenericReset+0x68>)
   825c2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   825c4:	6823      	ldr	r3, [r4, #0]
   825c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   825c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   825ca:	fb00 f002 	mul.w	r0, r0, r2
   825ce:	1819      	adds	r1, r3, r0
   825d0:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   825d2:	2100      	movs	r1, #0
   825d4:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   825d6:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   825d8:	1a82      	subs	r2, r0, r2
   825da:	4413      	add	r3, r2
   825dc:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   825de:	f04f 33ff 	mov.w	r3, #4294967295
   825e2:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   825e4:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   825e6:	b955      	cbnz	r5, 825fe <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   825e8:	6923      	ldr	r3, [r4, #16]
   825ea:	b17b      	cbz	r3, 8260c <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   825ec:	f104 0010 	add.w	r0, r4, #16
   825f0:	4b0a      	ldr	r3, [pc, #40]	; (8261c <xQueueGenericReset+0x6c>)
   825f2:	4798      	blx	r3
   825f4:	2801      	cmp	r0, #1
   825f6:	d109      	bne.n	8260c <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   825f8:	4b09      	ldr	r3, [pc, #36]	; (82620 <xQueueGenericReset+0x70>)
   825fa:	4798      	blx	r3
   825fc:	e006      	b.n	8260c <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   825fe:	f104 0010 	add.w	r0, r4, #16
   82602:	4d08      	ldr	r5, [pc, #32]	; (82624 <xQueueGenericReset+0x74>)
   82604:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   82606:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8260a:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   8260c:	4b06      	ldr	r3, [pc, #24]	; (82628 <xQueueGenericReset+0x78>)
   8260e:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   82610:	2001      	movs	r0, #1
   82612:	bd38      	pop	{r3, r4, r5, pc}
   82614:	00082245 	.word	0x00082245
   82618:	00082255 	.word	0x00082255
   8261c:	00083189 	.word	0x00083189
   82620:	00082235 	.word	0x00082235
   82624:	00082145 	.word	0x00082145
   82628:	00082275 	.word	0x00082275

0008262c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   8262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8262e:	460d      	mov	r5, r1
   82630:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   82632:	4606      	mov	r6, r0
   82634:	b188      	cbz	r0, 8265a <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   82636:	2050      	movs	r0, #80	; 0x50
   82638:	4b0e      	ldr	r3, [pc, #56]	; (82674 <xQueueGenericCreate+0x48>)
   8263a:	4798      	blx	r3
		if( pxNewQueue != NULL )
   8263c:	4604      	mov	r4, r0
   8263e:	b160      	cbz	r0, 8265a <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   82640:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   82644:	3001      	adds	r0, #1
   82646:	4b0b      	ldr	r3, [pc, #44]	; (82674 <xQueueGenericCreate+0x48>)
   82648:	4798      	blx	r3
   8264a:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   8264c:	b940      	cbnz	r0, 82660 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   8264e:	4620      	mov	r0, r4
   82650:	4b09      	ldr	r3, [pc, #36]	; (82678 <xQueueGenericCreate+0x4c>)
   82652:	4798      	blx	r3
   82654:	e001      	b.n	8265a <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   82656:	bf00      	nop
   82658:	e7fd      	b.n	82656 <xQueueGenericCreate+0x2a>
   8265a:	4b08      	ldr	r3, [pc, #32]	; (8267c <xQueueGenericCreate+0x50>)
   8265c:	4798      	blx	r3
   8265e:	e7fa      	b.n	82656 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   82660:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   82662:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   82664:	4620      	mov	r0, r4
   82666:	2101      	movs	r1, #1
   82668:	4b05      	ldr	r3, [pc, #20]	; (82680 <xQueueGenericCreate+0x54>)
   8266a:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   8266c:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   82670:	4620      	mov	r0, r4
   82672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82674:	000823a1 	.word	0x000823a1
   82678:	00082465 	.word	0x00082465
   8267c:	00082245 	.word	0x00082245
   82680:	000825b1 	.word	0x000825b1

00082684 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   82684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82688:	b085      	sub	sp, #20
   8268a:	468a      	mov	sl, r1
   8268c:	9201      	str	r2, [sp, #4]
   8268e:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   82690:	4604      	mov	r4, r0
   82692:	b918      	cbnz	r0, 8269c <xQueueGenericSend+0x18>
   82694:	4b36      	ldr	r3, [pc, #216]	; (82770 <xQueueGenericSend+0xec>)
   82696:	4798      	blx	r3
   82698:	bf00      	nop
   8269a:	e7fd      	b.n	82698 <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8269c:	b909      	cbnz	r1, 826a2 <xQueueGenericSend+0x1e>
   8269e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   826a0:	b91b      	cbnz	r3, 826aa <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   826a2:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   826a4:	4e33      	ldr	r6, [pc, #204]	; (82774 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   826a6:	4d34      	ldr	r5, [pc, #208]	; (82778 <xQueueGenericSend+0xf4>)
   826a8:	e003      	b.n	826b2 <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   826aa:	4b31      	ldr	r3, [pc, #196]	; (82770 <xQueueGenericSend+0xec>)
   826ac:	4798      	blx	r3
   826ae:	bf00      	nop
   826b0:	e7fd      	b.n	826ae <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   826b2:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   826b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   826b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   826b8:	429a      	cmp	r2, r3
   826ba:	d212      	bcs.n	826e2 <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   826bc:	4620      	mov	r0, r4
   826be:	4651      	mov	r1, sl
   826c0:	465a      	mov	r2, fp
   826c2:	4b2e      	ldr	r3, [pc, #184]	; (8277c <xQueueGenericSend+0xf8>)
   826c4:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   826c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   826c8:	b13b      	cbz	r3, 826da <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   826ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
   826ce:	4b2c      	ldr	r3, [pc, #176]	; (82780 <xQueueGenericSend+0xfc>)
   826d0:	4798      	blx	r3
   826d2:	2801      	cmp	r0, #1
   826d4:	d101      	bne.n	826da <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   826d6:	4b2b      	ldr	r3, [pc, #172]	; (82784 <xQueueGenericSend+0x100>)
   826d8:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   826da:	4b27      	ldr	r3, [pc, #156]	; (82778 <xQueueGenericSend+0xf4>)
   826dc:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   826de:	2001      	movs	r0, #1
   826e0:	e043      	b.n	8276a <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   826e2:	9b01      	ldr	r3, [sp, #4]
   826e4:	b91b      	cbnz	r3, 826ee <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   826e6:	4b24      	ldr	r3, [pc, #144]	; (82778 <xQueueGenericSend+0xf4>)
   826e8:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   826ea:	2000      	movs	r0, #0
   826ec:	e03d      	b.n	8276a <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
   826ee:	b91f      	cbnz	r7, 826f8 <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   826f0:	a802      	add	r0, sp, #8
   826f2:	4b25      	ldr	r3, [pc, #148]	; (82788 <xQueueGenericSend+0x104>)
   826f4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   826f6:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   826f8:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   826fa:	4b24      	ldr	r3, [pc, #144]	; (8278c <xQueueGenericSend+0x108>)
   826fc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   826fe:	47b0      	blx	r6
   82700:	6c63      	ldr	r3, [r4, #68]	; 0x44
   82702:	f1b3 3fff 	cmp.w	r3, #4294967295
   82706:	bf04      	itt	eq
   82708:	2300      	moveq	r3, #0
   8270a:	6463      	streq	r3, [r4, #68]	; 0x44
   8270c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8270e:	f1b3 3fff 	cmp.w	r3, #4294967295
   82712:	bf04      	itt	eq
   82714:	2300      	moveq	r3, #0
   82716:	64a3      	streq	r3, [r4, #72]	; 0x48
   82718:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8271a:	a802      	add	r0, sp, #8
   8271c:	a901      	add	r1, sp, #4
   8271e:	4b1c      	ldr	r3, [pc, #112]	; (82790 <xQueueGenericSend+0x10c>)
   82720:	4798      	blx	r3
   82722:	b9e0      	cbnz	r0, 8275e <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   82724:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   82726:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   8272a:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   8272e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   82730:	45c1      	cmp	r9, r8
   82732:	d10e      	bne.n	82752 <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   82734:	f104 0010 	add.w	r0, r4, #16
   82738:	9901      	ldr	r1, [sp, #4]
   8273a:	4b16      	ldr	r3, [pc, #88]	; (82794 <xQueueGenericSend+0x110>)
   8273c:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8273e:	4620      	mov	r0, r4
   82740:	4b15      	ldr	r3, [pc, #84]	; (82798 <xQueueGenericSend+0x114>)
   82742:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   82744:	4b15      	ldr	r3, [pc, #84]	; (8279c <xQueueGenericSend+0x118>)
   82746:	4798      	blx	r3
   82748:	2800      	cmp	r0, #0
   8274a:	d1b2      	bne.n	826b2 <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
   8274c:	4b0d      	ldr	r3, [pc, #52]	; (82784 <xQueueGenericSend+0x100>)
   8274e:	4798      	blx	r3
   82750:	e7af      	b.n	826b2 <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82752:	4620      	mov	r0, r4
   82754:	4b10      	ldr	r3, [pc, #64]	; (82798 <xQueueGenericSend+0x114>)
   82756:	4798      	blx	r3
				( void ) xTaskResumeAll();
   82758:	4b10      	ldr	r3, [pc, #64]	; (8279c <xQueueGenericSend+0x118>)
   8275a:	4798      	blx	r3
   8275c:	e7a9      	b.n	826b2 <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   8275e:	4620      	mov	r0, r4
   82760:	4b0d      	ldr	r3, [pc, #52]	; (82798 <xQueueGenericSend+0x114>)
   82762:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82764:	4b0d      	ldr	r3, [pc, #52]	; (8279c <xQueueGenericSend+0x118>)
   82766:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   82768:	2000      	movs	r0, #0
		}
	}
}
   8276a:	b005      	add	sp, #20
   8276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82770:	00082245 	.word	0x00082245
   82774:	00082255 	.word	0x00082255
   82778:	00082275 	.word	0x00082275
   8277c:	00082499 	.word	0x00082499
   82780:	00083189 	.word	0x00083189
   82784:	00082235 	.word	0x00082235
   82788:	0008320d 	.word	0x0008320d
   8278c:	00082ca1 	.word	0x00082ca1
   82790:	00083235 	.word	0x00083235
   82794:	000830e5 	.word	0x000830e5
   82798:	00082525 	.word	0x00082525
   8279c:	00082df1 	.word	0x00082df1

000827a0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   827a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   827a4:	460e      	mov	r6, r1
   827a6:	4615      	mov	r5, r2
   827a8:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   827aa:	4604      	mov	r4, r0
   827ac:	b918      	cbnz	r0, 827b6 <xQueueGenericSendFromISR+0x16>
   827ae:	4b1c      	ldr	r3, [pc, #112]	; (82820 <xQueueGenericSendFromISR+0x80>)
   827b0:	4798      	blx	r3
   827b2:	bf00      	nop
   827b4:	e7fd      	b.n	827b2 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   827b6:	b929      	cbnz	r1, 827c4 <xQueueGenericSendFromISR+0x24>
   827b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   827ba:	b11b      	cbz	r3, 827c4 <xQueueGenericSendFromISR+0x24>
   827bc:	4b18      	ldr	r3, [pc, #96]	; (82820 <xQueueGenericSendFromISR+0x80>)
   827be:	4798      	blx	r3
   827c0:	bf00      	nop
   827c2:	e7fd      	b.n	827c0 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   827c4:	4b16      	ldr	r3, [pc, #88]	; (82820 <xQueueGenericSendFromISR+0x80>)
   827c6:	4798      	blx	r3
   827c8:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   827ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   827cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   827ce:	429a      	cmp	r2, r3
   827d0:	d218      	bcs.n	82804 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   827d2:	4620      	mov	r0, r4
   827d4:	4631      	mov	r1, r6
   827d6:	4642      	mov	r2, r8
   827d8:	4b12      	ldr	r3, [pc, #72]	; (82824 <xQueueGenericSendFromISR+0x84>)
   827da:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   827dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   827de:	f1b3 3fff 	cmp.w	r3, #4294967295
   827e2:	d10a      	bne.n	827fa <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   827e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   827e6:	b17b      	cbz	r3, 82808 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   827e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   827ec:	4b0e      	ldr	r3, [pc, #56]	; (82828 <xQueueGenericSendFromISR+0x88>)
   827ee:	4798      	blx	r3
   827f0:	b160      	cbz	r0, 8280c <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   827f2:	b16d      	cbz	r5, 82810 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   827f4:	2401      	movs	r4, #1
   827f6:	602c      	str	r4, [r5, #0]
   827f8:	e00b      	b.n	82812 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   827fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   827fc:	3301      	adds	r3, #1
   827fe:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   82800:	2401      	movs	r4, #1
   82802:	e006      	b.n	82812 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   82804:	2400      	movs	r4, #0
   82806:	e004      	b.n	82812 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   82808:	2401      	movs	r4, #1
   8280a:	e002      	b.n	82812 <xQueueGenericSendFromISR+0x72>
   8280c:	2401      	movs	r4, #1
   8280e:	e000      	b.n	82812 <xQueueGenericSendFromISR+0x72>
   82810:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   82812:	4638      	mov	r0, r7
   82814:	4b05      	ldr	r3, [pc, #20]	; (8282c <xQueueGenericSendFromISR+0x8c>)
   82816:	4798      	blx	r3

	return xReturn;
}
   82818:	4620      	mov	r0, r4
   8281a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8281e:	bf00      	nop
   82820:	00082245 	.word	0x00082245
   82824:	00082499 	.word	0x00082499
   82828:	00083189 	.word	0x00083189
   8282c:	0008226d 	.word	0x0008226d

00082830 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   82830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82834:	b085      	sub	sp, #20
   82836:	4689      	mov	r9, r1
   82838:	9201      	str	r2, [sp, #4]
   8283a:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   8283c:	4604      	mov	r4, r0
   8283e:	b918      	cbnz	r0, 82848 <xQueueGenericReceive+0x18>
   82840:	4b44      	ldr	r3, [pc, #272]	; (82954 <xQueueGenericReceive+0x124>)
   82842:	4798      	blx	r3
   82844:	bf00      	nop
   82846:	e7fd      	b.n	82844 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   82848:	b909      	cbnz	r1, 8284e <xQueueGenericReceive+0x1e>
   8284a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8284c:	b92b      	cbnz	r3, 8285a <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8284e:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   82850:	4e41      	ldr	r6, [pc, #260]	; (82958 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82852:	f8df b134 	ldr.w	fp, [pc, #308]	; 82988 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   82856:	4d41      	ldr	r5, [pc, #260]	; (8295c <xQueueGenericReceive+0x12c>)
   82858:	e003      	b.n	82862 <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8285a:	4b3e      	ldr	r3, [pc, #248]	; (82954 <xQueueGenericReceive+0x124>)
   8285c:	4798      	blx	r3
   8285e:	bf00      	nop
   82860:	e7fd      	b.n	8285e <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   82862:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   82864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82866:	2b00      	cmp	r3, #0
   82868:	d028      	beq.n	828bc <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   8286a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   8286c:	4620      	mov	r0, r4
   8286e:	4649      	mov	r1, r9
   82870:	4b3b      	ldr	r3, [pc, #236]	; (82960 <xQueueGenericReceive+0x130>)
   82872:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   82874:	f1ba 0f00 	cmp.w	sl, #0
   82878:	d112      	bne.n	828a0 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   8287a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8287c:	3b01      	subs	r3, #1
   8287e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   82880:	6823      	ldr	r3, [r4, #0]
   82882:	b913      	cbnz	r3, 8288a <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   82884:	4b37      	ldr	r3, [pc, #220]	; (82964 <xQueueGenericReceive+0x134>)
   82886:	4798      	blx	r3
   82888:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8288a:	6923      	ldr	r3, [r4, #16]
   8288c:	b193      	cbz	r3, 828b4 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8288e:	f104 0010 	add.w	r0, r4, #16
   82892:	4b35      	ldr	r3, [pc, #212]	; (82968 <xQueueGenericReceive+0x138>)
   82894:	4798      	blx	r3
   82896:	2801      	cmp	r0, #1
   82898:	d10c      	bne.n	828b4 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   8289a:	4b34      	ldr	r3, [pc, #208]	; (8296c <xQueueGenericReceive+0x13c>)
   8289c:	4798      	blx	r3
   8289e:	e009      	b.n	828b4 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   828a0:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   828a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   828a4:	b133      	cbz	r3, 828b4 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   828a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   828aa:	4b2f      	ldr	r3, [pc, #188]	; (82968 <xQueueGenericReceive+0x138>)
   828ac:	4798      	blx	r3
   828ae:	b108      	cbz	r0, 828b4 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   828b0:	4b2e      	ldr	r3, [pc, #184]	; (8296c <xQueueGenericReceive+0x13c>)
   828b2:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   828b4:	4b29      	ldr	r3, [pc, #164]	; (8295c <xQueueGenericReceive+0x12c>)
   828b6:	4798      	blx	r3
				return pdPASS;
   828b8:	2001      	movs	r0, #1
   828ba:	e048      	b.n	8294e <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   828bc:	9b01      	ldr	r3, [sp, #4]
   828be:	b91b      	cbnz	r3, 828c8 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   828c0:	4b26      	ldr	r3, [pc, #152]	; (8295c <xQueueGenericReceive+0x12c>)
   828c2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   828c4:	2000      	movs	r0, #0
   828c6:	e042      	b.n	8294e <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   828c8:	b917      	cbnz	r7, 828d0 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   828ca:	a802      	add	r0, sp, #8
   828cc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   828ce:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   828d0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   828d2:	4b27      	ldr	r3, [pc, #156]	; (82970 <xQueueGenericReceive+0x140>)
   828d4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   828d6:	47b0      	blx	r6
   828d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   828da:	f1b3 3fff 	cmp.w	r3, #4294967295
   828de:	bf04      	itt	eq
   828e0:	2300      	moveq	r3, #0
   828e2:	6463      	streq	r3, [r4, #68]	; 0x44
   828e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   828e6:	f1b3 3fff 	cmp.w	r3, #4294967295
   828ea:	bf04      	itt	eq
   828ec:	2300      	moveq	r3, #0
   828ee:	64a3      	streq	r3, [r4, #72]	; 0x48
   828f0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   828f2:	a802      	add	r0, sp, #8
   828f4:	a901      	add	r1, sp, #4
   828f6:	4b1f      	ldr	r3, [pc, #124]	; (82974 <xQueueGenericReceive+0x144>)
   828f8:	4798      	blx	r3
   828fa:	bb10      	cbnz	r0, 82942 <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   828fc:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   828fe:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   82902:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   82904:	f1b8 0f00 	cmp.w	r8, #0
   82908:	d115      	bne.n	82936 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8290a:	6823      	ldr	r3, [r4, #0]
   8290c:	b923      	cbnz	r3, 82918 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   8290e:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   82910:	6860      	ldr	r0, [r4, #4]
   82912:	4b19      	ldr	r3, [pc, #100]	; (82978 <xQueueGenericReceive+0x148>)
   82914:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   82916:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82918:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8291c:	9901      	ldr	r1, [sp, #4]
   8291e:	4b17      	ldr	r3, [pc, #92]	; (8297c <xQueueGenericReceive+0x14c>)
   82920:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   82922:	4620      	mov	r0, r4
   82924:	4b16      	ldr	r3, [pc, #88]	; (82980 <xQueueGenericReceive+0x150>)
   82926:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   82928:	4b16      	ldr	r3, [pc, #88]	; (82984 <xQueueGenericReceive+0x154>)
   8292a:	4798      	blx	r3
   8292c:	2800      	cmp	r0, #0
   8292e:	d198      	bne.n	82862 <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
   82930:	4b0e      	ldr	r3, [pc, #56]	; (8296c <xQueueGenericReceive+0x13c>)
   82932:	4798      	blx	r3
   82934:	e795      	b.n	82862 <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82936:	4620      	mov	r0, r4
   82938:	4b11      	ldr	r3, [pc, #68]	; (82980 <xQueueGenericReceive+0x150>)
   8293a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8293c:	4b11      	ldr	r3, [pc, #68]	; (82984 <xQueueGenericReceive+0x154>)
   8293e:	4798      	blx	r3
   82940:	e78f      	b.n	82862 <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   82942:	4620      	mov	r0, r4
   82944:	4b0e      	ldr	r3, [pc, #56]	; (82980 <xQueueGenericReceive+0x150>)
   82946:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82948:	4b0e      	ldr	r3, [pc, #56]	; (82984 <xQueueGenericReceive+0x154>)
   8294a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   8294c:	2000      	movs	r0, #0
		}
	}
}
   8294e:	b005      	add	sp, #20
   82950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82954:	00082245 	.word	0x00082245
   82958:	00082255 	.word	0x00082255
   8295c:	00082275 	.word	0x00082275
   82960:	000824fd 	.word	0x000824fd
   82964:	000832c5 	.word	0x000832c5
   82968:	00083189 	.word	0x00083189
   8296c:	00082235 	.word	0x00082235
   82970:	00082ca1 	.word	0x00082ca1
   82974:	00083235 	.word	0x00083235
   82978:	000832f1 	.word	0x000832f1
   8297c:	000830e5 	.word	0x000830e5
   82980:	00082525 	.word	0x00082525
   82984:	00082df1 	.word	0x00082df1
   82988:	0008320d 	.word	0x0008320d

0008298c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   8298c:	b538      	push	{r3, r4, r5, lr}
   8298e:	4604      	mov	r4, r0
   82990:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   82992:	4b0d      	ldr	r3, [pc, #52]	; (829c8 <vQueueWaitForMessageRestricted+0x3c>)
   82994:	4798      	blx	r3
   82996:	6c63      	ldr	r3, [r4, #68]	; 0x44
   82998:	f1b3 3fff 	cmp.w	r3, #4294967295
   8299c:	bf04      	itt	eq
   8299e:	2300      	moveq	r3, #0
   829a0:	6463      	streq	r3, [r4, #68]	; 0x44
   829a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   829a4:	f1b3 3fff 	cmp.w	r3, #4294967295
   829a8:	bf04      	itt	eq
   829aa:	2300      	moveq	r3, #0
   829ac:	64a3      	streq	r3, [r4, #72]	; 0x48
   829ae:	4b07      	ldr	r3, [pc, #28]	; (829cc <vQueueWaitForMessageRestricted+0x40>)
   829b0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   829b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   829b4:	b923      	cbnz	r3, 829c0 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   829b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   829ba:	4629      	mov	r1, r5
   829bc:	4b04      	ldr	r3, [pc, #16]	; (829d0 <vQueueWaitForMessageRestricted+0x44>)
   829be:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   829c0:	4620      	mov	r0, r4
   829c2:	4b04      	ldr	r3, [pc, #16]	; (829d4 <vQueueWaitForMessageRestricted+0x48>)
   829c4:	4798      	blx	r3
   829c6:	bd38      	pop	{r3, r4, r5, pc}
   829c8:	00082255 	.word	0x00082255
   829cc:	00082275 	.word	0x00082275
   829d0:	00083145 	.word	0x00083145
   829d4:	00082525 	.word	0x00082525

000829d8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   829d8:	b510      	push	{r4, lr}
   829da:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   829dc:	4b0e      	ldr	r3, [pc, #56]	; (82a18 <prvAddCurrentTaskToDelayedList+0x40>)
   829de:	681b      	ldr	r3, [r3, #0]
   829e0:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   829e2:	4b0e      	ldr	r3, [pc, #56]	; (82a1c <prvAddCurrentTaskToDelayedList+0x44>)
   829e4:	681b      	ldr	r3, [r3, #0]
   829e6:	4298      	cmp	r0, r3
   829e8:	d207      	bcs.n	829fa <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   829ea:	4b0d      	ldr	r3, [pc, #52]	; (82a20 <prvAddCurrentTaskToDelayedList+0x48>)
   829ec:	6818      	ldr	r0, [r3, #0]
   829ee:	4b0a      	ldr	r3, [pc, #40]	; (82a18 <prvAddCurrentTaskToDelayedList+0x40>)
   829f0:	6819      	ldr	r1, [r3, #0]
   829f2:	3104      	adds	r1, #4
   829f4:	4b0b      	ldr	r3, [pc, #44]	; (82a24 <prvAddCurrentTaskToDelayedList+0x4c>)
   829f6:	4798      	blx	r3
   829f8:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   829fa:	4b0b      	ldr	r3, [pc, #44]	; (82a28 <prvAddCurrentTaskToDelayedList+0x50>)
   829fc:	6818      	ldr	r0, [r3, #0]
   829fe:	4b06      	ldr	r3, [pc, #24]	; (82a18 <prvAddCurrentTaskToDelayedList+0x40>)
   82a00:	6819      	ldr	r1, [r3, #0]
   82a02:	3104      	adds	r1, #4
   82a04:	4b07      	ldr	r3, [pc, #28]	; (82a24 <prvAddCurrentTaskToDelayedList+0x4c>)
   82a06:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   82a08:	4b08      	ldr	r3, [pc, #32]	; (82a2c <prvAddCurrentTaskToDelayedList+0x54>)
   82a0a:	681b      	ldr	r3, [r3, #0]
   82a0c:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   82a0e:	bf3c      	itt	cc
   82a10:	4b06      	ldrcc	r3, [pc, #24]	; (82a2c <prvAddCurrentTaskToDelayedList+0x54>)
   82a12:	601c      	strcc	r4, [r3, #0]
   82a14:	bd10      	pop	{r4, pc}
   82a16:	bf00      	nop
   82a18:	2007840c 	.word	0x2007840c
   82a1c:	20078428 	.word	0x20078428
   82a20:	2007842c 	.word	0x2007842c
   82a24:	00082181 	.word	0x00082181
   82a28:	2007831c 	.word	0x2007831c
   82a2c:	2007014c 	.word	0x2007014c

00082a30 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   82a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a34:	460e      	mov	r6, r1
   82a36:	4617      	mov	r7, r2
   82a38:	469a      	mov	sl, r3
   82a3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   82a3c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   82a40:	4681      	mov	r9, r0
   82a42:	b918      	cbnz	r0, 82a4c <xTaskGenericCreate+0x1c>
   82a44:	4b62      	ldr	r3, [pc, #392]	; (82bd0 <xTaskGenericCreate+0x1a0>)
   82a46:	4798      	blx	r3
   82a48:	bf00      	nop
   82a4a:	e7fd      	b.n	82a48 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   82a4c:	2d08      	cmp	r5, #8
   82a4e:	d903      	bls.n	82a58 <xTaskGenericCreate+0x28>
   82a50:	4b5f      	ldr	r3, [pc, #380]	; (82bd0 <xTaskGenericCreate+0x1a0>)
   82a52:	4798      	blx	r3
   82a54:	bf00      	nop
   82a56:	e7fd      	b.n	82a54 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   82a58:	204c      	movs	r0, #76	; 0x4c
   82a5a:	4b5e      	ldr	r3, [pc, #376]	; (82bd4 <xTaskGenericCreate+0x1a4>)
   82a5c:	4798      	blx	r3

	if( pxNewTCB != NULL )
   82a5e:	4604      	mov	r4, r0
   82a60:	2800      	cmp	r0, #0
   82a62:	f000 80b1 	beq.w	82bc8 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   82a66:	f1b8 0f00 	cmp.w	r8, #0
   82a6a:	f040 80a9 	bne.w	82bc0 <xTaskGenericCreate+0x190>
   82a6e:	00b8      	lsls	r0, r7, #2
   82a70:	4b58      	ldr	r3, [pc, #352]	; (82bd4 <xTaskGenericCreate+0x1a4>)
   82a72:	4798      	blx	r3
   82a74:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   82a76:	b918      	cbnz	r0, 82a80 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   82a78:	4620      	mov	r0, r4
   82a7a:	4b57      	ldr	r3, [pc, #348]	; (82bd8 <xTaskGenericCreate+0x1a8>)
   82a7c:	4798      	blx	r3
   82a7e:	e0a3      	b.n	82bc8 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   82a80:	21a5      	movs	r1, #165	; 0xa5
   82a82:	00ba      	lsls	r2, r7, #2
   82a84:	4b55      	ldr	r3, [pc, #340]	; (82bdc <xTaskGenericCreate+0x1ac>)
   82a86:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   82a88:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   82a8c:	3f01      	subs	r7, #1
   82a8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   82a90:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   82a94:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   82a98:	f104 0034 	add.w	r0, r4, #52	; 0x34
   82a9c:	4631      	mov	r1, r6
   82a9e:	220a      	movs	r2, #10
   82aa0:	4b4f      	ldr	r3, [pc, #316]	; (82be0 <xTaskGenericCreate+0x1b0>)
   82aa2:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   82aa4:	2300      	movs	r3, #0
   82aa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   82aaa:	2d08      	cmp	r5, #8
   82aac:	bf34      	ite	cc
   82aae:	462e      	movcc	r6, r5
   82ab0:	2608      	movcs	r6, #8
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   82ab2:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   82ab4:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   82ab6:	1d27      	adds	r7, r4, #4
   82ab8:	4638      	mov	r0, r7
   82aba:	f8df 8170 	ldr.w	r8, [pc, #368]	; 82c2c <xTaskGenericCreate+0x1fc>
   82abe:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   82ac0:	f104 0018 	add.w	r0, r4, #24
   82ac4:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   82ac6:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   82ac8:	f1c6 0609 	rsb	r6, r6, #9
   82acc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   82ace:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   82ad0:	4658      	mov	r0, fp
   82ad2:	4649      	mov	r1, r9
   82ad4:	4652      	mov	r2, sl
   82ad6:	4b43      	ldr	r3, [pc, #268]	; (82be4 <xTaskGenericCreate+0x1b4>)
   82ad8:	4798      	blx	r3
   82ada:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82adc:	f010 0f07 	tst.w	r0, #7
   82ae0:	d003      	beq.n	82aea <xTaskGenericCreate+0xba>
   82ae2:	4b3b      	ldr	r3, [pc, #236]	; (82bd0 <xTaskGenericCreate+0x1a0>)
   82ae4:	4798      	blx	r3
   82ae6:	bf00      	nop
   82ae8:	e7fd      	b.n	82ae6 <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   82aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   82aec:	b103      	cbz	r3, 82af0 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   82aee:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   82af0:	4b3d      	ldr	r3, [pc, #244]	; (82be8 <xTaskGenericCreate+0x1b8>)
   82af2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   82af4:	4b3d      	ldr	r3, [pc, #244]	; (82bec <xTaskGenericCreate+0x1bc>)
   82af6:	681a      	ldr	r2, [r3, #0]
   82af8:	3201      	adds	r2, #1
   82afa:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82afc:	4b3c      	ldr	r3, [pc, #240]	; (82bf0 <xTaskGenericCreate+0x1c0>)
   82afe:	681b      	ldr	r3, [r3, #0]
   82b00:	bb2b      	cbnz	r3, 82b4e <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   82b02:	4b3b      	ldr	r3, [pc, #236]	; (82bf0 <xTaskGenericCreate+0x1c0>)
   82b04:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   82b06:	4b39      	ldr	r3, [pc, #228]	; (82bec <xTaskGenericCreate+0x1bc>)
   82b08:	681b      	ldr	r3, [r3, #0]
   82b0a:	2b01      	cmp	r3, #1
   82b0c:	d129      	bne.n	82b62 <xTaskGenericCreate+0x132>
   82b0e:	4e39      	ldr	r6, [pc, #228]	; (82bf4 <xTaskGenericCreate+0x1c4>)
   82b10:	f106 09b4 	add.w	r9, r6, #180	; 0xb4
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   82b14:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 82bf8 <xTaskGenericCreate+0x1c8>
   82b18:	4630      	mov	r0, r6
   82b1a:	47c0      	blx	r8
   82b1c:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   82b1e:	454e      	cmp	r6, r9
   82b20:	d1fa      	bne.n	82b18 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   82b22:	f8df 910c 	ldr.w	r9, [pc, #268]	; 82c30 <xTaskGenericCreate+0x200>
   82b26:	4648      	mov	r0, r9
   82b28:	4e33      	ldr	r6, [pc, #204]	; (82bf8 <xTaskGenericCreate+0x1c8>)
   82b2a:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   82b2c:	f8df 8104 	ldr.w	r8, [pc, #260]	; 82c34 <xTaskGenericCreate+0x204>
   82b30:	4640      	mov	r0, r8
   82b32:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   82b34:	4831      	ldr	r0, [pc, #196]	; (82bfc <xTaskGenericCreate+0x1cc>)
   82b36:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   82b38:	4831      	ldr	r0, [pc, #196]	; (82c00 <xTaskGenericCreate+0x1d0>)
   82b3a:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   82b3c:	4831      	ldr	r0, [pc, #196]	; (82c04 <xTaskGenericCreate+0x1d4>)
   82b3e:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   82b40:	4b31      	ldr	r3, [pc, #196]	; (82c08 <xTaskGenericCreate+0x1d8>)
   82b42:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   82b46:	4b31      	ldr	r3, [pc, #196]	; (82c0c <xTaskGenericCreate+0x1dc>)
   82b48:	f8c3 8000 	str.w	r8, [r3]
   82b4c:	e009      	b.n	82b62 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   82b4e:	4b30      	ldr	r3, [pc, #192]	; (82c10 <xTaskGenericCreate+0x1e0>)
   82b50:	681b      	ldr	r3, [r3, #0]
   82b52:	b933      	cbnz	r3, 82b62 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   82b54:	4b26      	ldr	r3, [pc, #152]	; (82bf0 <xTaskGenericCreate+0x1c0>)
   82b56:	681b      	ldr	r3, [r3, #0]
   82b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82b5a:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   82b5c:	bf24      	itt	cs
   82b5e:	4b24      	ldrcs	r3, [pc, #144]	; (82bf0 <xTaskGenericCreate+0x1c0>)
   82b60:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   82b62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82b64:	4a2b      	ldr	r2, [pc, #172]	; (82c14 <xTaskGenericCreate+0x1e4>)
   82b66:	6812      	ldr	r2, [r2, #0]
   82b68:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   82b6a:	bf84      	itt	hi
   82b6c:	4a29      	ldrhi	r2, [pc, #164]	; (82c14 <xTaskGenericCreate+0x1e4>)
   82b6e:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   82b70:	4a29      	ldr	r2, [pc, #164]	; (82c18 <xTaskGenericCreate+0x1e8>)
   82b72:	6811      	ldr	r1, [r2, #0]
   82b74:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   82b76:	3101      	adds	r1, #1
   82b78:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   82b7a:	4a28      	ldr	r2, [pc, #160]	; (82c1c <xTaskGenericCreate+0x1ec>)
   82b7c:	6812      	ldr	r2, [r2, #0]
   82b7e:	4293      	cmp	r3, r2
   82b80:	bf84      	itt	hi
   82b82:	4a26      	ldrhi	r2, [pc, #152]	; (82c1c <xTaskGenericCreate+0x1ec>)
   82b84:	6013      	strhi	r3, [r2, #0]
   82b86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82b8a:	481a      	ldr	r0, [pc, #104]	; (82bf4 <xTaskGenericCreate+0x1c4>)
   82b8c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82b90:	4639      	mov	r1, r7
   82b92:	4b23      	ldr	r3, [pc, #140]	; (82c20 <xTaskGenericCreate+0x1f0>)
   82b94:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   82b96:	4b23      	ldr	r3, [pc, #140]	; (82c24 <xTaskGenericCreate+0x1f4>)
   82b98:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   82b9a:	4b1d      	ldr	r3, [pc, #116]	; (82c10 <xTaskGenericCreate+0x1e0>)
   82b9c:	681b      	ldr	r3, [r3, #0]
   82b9e:	b14b      	cbz	r3, 82bb4 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82ba0:	4b13      	ldr	r3, [pc, #76]	; (82bf0 <xTaskGenericCreate+0x1c0>)
   82ba2:	681b      	ldr	r3, [r3, #0]
   82ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82ba6:	429d      	cmp	r5, r3
   82ba8:	d907      	bls.n	82bba <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   82baa:	4b1f      	ldr	r3, [pc, #124]	; (82c28 <xTaskGenericCreate+0x1f8>)
   82bac:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   82bae:	2001      	movs	r0, #1
   82bb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bb4:	2001      	movs	r0, #1
   82bb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bba:	2001      	movs	r0, #1
   82bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   82bc0:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   82bc4:	4640      	mov	r0, r8
   82bc6:	e75b      	b.n	82a80 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   82bc8:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   82bcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bd0:	00082245 	.word	0x00082245
   82bd4:	000823a1 	.word	0x000823a1
   82bd8:	00082465 	.word	0x00082465
   82bdc:	00083b5f 	.word	0x00083b5f
   82be0:	00083cd1 	.word	0x00083cd1
   82be4:	000821f9 	.word	0x000821f9
   82be8:	00082255 	.word	0x00082255
   82bec:	2007844c 	.word	0x2007844c
   82bf0:	2007840c 	.word	0x2007840c
   82bf4:	20078354 	.word	0x20078354
   82bf8:	00082145 	.word	0x00082145
   82bfc:	20078410 	.word	0x20078410
   82c00:	20078328 	.word	0x20078328
   82c04:	20078308 	.word	0x20078308
   82c08:	2007831c 	.word	0x2007831c
   82c0c:	2007842c 	.word	0x2007842c
   82c10:	20078320 	.word	0x20078320
   82c14:	20078450 	.word	0x20078450
   82c18:	20078430 	.word	0x20078430
   82c1c:	20078350 	.word	0x20078350
   82c20:	00082165 	.word	0x00082165
   82c24:	00082275 	.word	0x00082275
   82c28:	00082235 	.word	0x00082235
   82c2c:	0008215d 	.word	0x0008215d
   82c30:	20078434 	.word	0x20078434
   82c34:	2007833c 	.word	0x2007833c

00082c38 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   82c38:	b510      	push	{r4, lr}
   82c3a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   82c3c:	2300      	movs	r3, #0
   82c3e:	9300      	str	r3, [sp, #0]
   82c40:	9301      	str	r3, [sp, #4]
   82c42:	9302      	str	r3, [sp, #8]
   82c44:	9303      	str	r3, [sp, #12]
   82c46:	480e      	ldr	r0, [pc, #56]	; (82c80 <vTaskStartScheduler+0x48>)
   82c48:	490e      	ldr	r1, [pc, #56]	; (82c84 <vTaskStartScheduler+0x4c>)
   82c4a:	2282      	movs	r2, #130	; 0x82
   82c4c:	4c0e      	ldr	r4, [pc, #56]	; (82c88 <vTaskStartScheduler+0x50>)
   82c4e:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   82c50:	2801      	cmp	r0, #1
   82c52:	d10e      	bne.n	82c72 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   82c54:	4b0d      	ldr	r3, [pc, #52]	; (82c8c <vTaskStartScheduler+0x54>)
   82c56:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   82c58:	2801      	cmp	r0, #1
   82c5a:	d10a      	bne.n	82c72 <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   82c5c:	4b0c      	ldr	r3, [pc, #48]	; (82c90 <vTaskStartScheduler+0x58>)
   82c5e:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   82c60:	2201      	movs	r2, #1
   82c62:	4b0c      	ldr	r3, [pc, #48]	; (82c94 <vTaskStartScheduler+0x5c>)
   82c64:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   82c66:	2200      	movs	r2, #0
   82c68:	4b0b      	ldr	r3, [pc, #44]	; (82c98 <vTaskStartScheduler+0x60>)
   82c6a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   82c6c:	4b0b      	ldr	r3, [pc, #44]	; (82c9c <vTaskStartScheduler+0x64>)
   82c6e:	4798      	blx	r3
   82c70:	e004      	b.n	82c7c <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   82c72:	b918      	cbnz	r0, 82c7c <vTaskStartScheduler+0x44>
   82c74:	4b06      	ldr	r3, [pc, #24]	; (82c90 <vTaskStartScheduler+0x58>)
   82c76:	4798      	blx	r3
   82c78:	bf00      	nop
   82c7a:	e7fd      	b.n	82c78 <vTaskStartScheduler+0x40>
}
   82c7c:	b004      	add	sp, #16
   82c7e:	bd10      	pop	{r4, pc}
   82c80:	00082fd1 	.word	0x00082fd1
   82c84:	00087160 	.word	0x00087160
   82c88:	00082a31 	.word	0x00082a31
   82c8c:	00083465 	.word	0x00083465
   82c90:	00082245 	.word	0x00082245
   82c94:	20078320 	.word	0x20078320
   82c98:	20078428 	.word	0x20078428
   82c9c:	00082311 	.word	0x00082311

00082ca0 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   82ca0:	4b02      	ldr	r3, [pc, #8]	; (82cac <vTaskSuspendAll+0xc>)
   82ca2:	681a      	ldr	r2, [r3, #0]
   82ca4:	3201      	adds	r2, #1
   82ca6:	601a      	str	r2, [r3, #0]
   82ca8:	4770      	bx	lr
   82caa:	bf00      	nop
   82cac:	20078408 	.word	0x20078408

00082cb0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   82cb0:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   82cb2:	4b04      	ldr	r3, [pc, #16]	; (82cc4 <xTaskGetTickCount+0x14>)
   82cb4:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82cb6:	4b04      	ldr	r3, [pc, #16]	; (82cc8 <xTaskGetTickCount+0x18>)
   82cb8:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   82cba:	4b04      	ldr	r3, [pc, #16]	; (82ccc <xTaskGetTickCount+0x1c>)
   82cbc:	4798      	blx	r3

	return xTicks;
}
   82cbe:	4620      	mov	r0, r4
   82cc0:	bd10      	pop	{r4, pc}
   82cc2:	bf00      	nop
   82cc4:	00082255 	.word	0x00082255
   82cc8:	20078428 	.word	0x20078428
   82ccc:	00082275 	.word	0x00082275

00082cd0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   82cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82cd4:	4b3a      	ldr	r3, [pc, #232]	; (82dc0 <vTaskIncrementTick+0xf0>)
   82cd6:	681b      	ldr	r3, [r3, #0]
   82cd8:	2b00      	cmp	r3, #0
   82cda:	d16b      	bne.n	82db4 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   82cdc:	4b39      	ldr	r3, [pc, #228]	; (82dc4 <vTaskIncrementTick+0xf4>)
   82cde:	681a      	ldr	r2, [r3, #0]
   82ce0:	3201      	adds	r2, #1
   82ce2:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   82ce4:	681b      	ldr	r3, [r3, #0]
   82ce6:	bb03      	cbnz	r3, 82d2a <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   82ce8:	4b37      	ldr	r3, [pc, #220]	; (82dc8 <vTaskIncrementTick+0xf8>)
   82cea:	681b      	ldr	r3, [r3, #0]
   82cec:	681b      	ldr	r3, [r3, #0]
   82cee:	b11b      	cbz	r3, 82cf8 <vTaskIncrementTick+0x28>
   82cf0:	4b36      	ldr	r3, [pc, #216]	; (82dcc <vTaskIncrementTick+0xfc>)
   82cf2:	4798      	blx	r3
   82cf4:	bf00      	nop
   82cf6:	e7fd      	b.n	82cf4 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   82cf8:	4b33      	ldr	r3, [pc, #204]	; (82dc8 <vTaskIncrementTick+0xf8>)
   82cfa:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   82cfc:	4a34      	ldr	r2, [pc, #208]	; (82dd0 <vTaskIncrementTick+0x100>)
   82cfe:	6810      	ldr	r0, [r2, #0]
   82d00:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   82d02:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   82d04:	4a33      	ldr	r2, [pc, #204]	; (82dd4 <vTaskIncrementTick+0x104>)
   82d06:	6811      	ldr	r1, [r2, #0]
   82d08:	3101      	adds	r1, #1
   82d0a:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82d0c:	681b      	ldr	r3, [r3, #0]
   82d0e:	681b      	ldr	r3, [r3, #0]
   82d10:	b923      	cbnz	r3, 82d1c <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   82d12:	f04f 32ff 	mov.w	r2, #4294967295
   82d16:	4b30      	ldr	r3, [pc, #192]	; (82dd8 <vTaskIncrementTick+0x108>)
   82d18:	601a      	str	r2, [r3, #0]
   82d1a:	e006      	b.n	82d2a <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82d1c:	4b2a      	ldr	r3, [pc, #168]	; (82dc8 <vTaskIncrementTick+0xf8>)
   82d1e:	681b      	ldr	r3, [r3, #0]
   82d20:	68db      	ldr	r3, [r3, #12]
   82d22:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82d24:	685a      	ldr	r2, [r3, #4]
   82d26:	4b2c      	ldr	r3, [pc, #176]	; (82dd8 <vTaskIncrementTick+0x108>)
   82d28:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   82d2a:	4b26      	ldr	r3, [pc, #152]	; (82dc4 <vTaskIncrementTick+0xf4>)
   82d2c:	681a      	ldr	r2, [r3, #0]
   82d2e:	4b2a      	ldr	r3, [pc, #168]	; (82dd8 <vTaskIncrementTick+0x108>)
   82d30:	681b      	ldr	r3, [r3, #0]
   82d32:	429a      	cmp	r2, r3
   82d34:	d342      	bcc.n	82dbc <vTaskIncrementTick+0xec>
   82d36:	4b24      	ldr	r3, [pc, #144]	; (82dc8 <vTaskIncrementTick+0xf8>)
   82d38:	681b      	ldr	r3, [r3, #0]
   82d3a:	681b      	ldr	r3, [r3, #0]
   82d3c:	b14b      	cbz	r3, 82d52 <vTaskIncrementTick+0x82>
   82d3e:	4b22      	ldr	r3, [pc, #136]	; (82dc8 <vTaskIncrementTick+0xf8>)
   82d40:	681b      	ldr	r3, [r3, #0]
   82d42:	68db      	ldr	r3, [r3, #12]
   82d44:	68dc      	ldr	r4, [r3, #12]
   82d46:	6863      	ldr	r3, [r4, #4]
   82d48:	4a1e      	ldr	r2, [pc, #120]	; (82dc4 <vTaskIncrementTick+0xf4>)
   82d4a:	6812      	ldr	r2, [r2, #0]
   82d4c:	4293      	cmp	r3, r2
   82d4e:	d913      	bls.n	82d78 <vTaskIncrementTick+0xa8>
   82d50:	e00e      	b.n	82d70 <vTaskIncrementTick+0xa0>
   82d52:	f04f 32ff 	mov.w	r2, #4294967295
   82d56:	4b20      	ldr	r3, [pc, #128]	; (82dd8 <vTaskIncrementTick+0x108>)
   82d58:	601a      	str	r2, [r3, #0]
   82d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d5e:	4b1a      	ldr	r3, [pc, #104]	; (82dc8 <vTaskIncrementTick+0xf8>)
   82d60:	681b      	ldr	r3, [r3, #0]
   82d62:	68db      	ldr	r3, [r3, #12]
   82d64:	68dc      	ldr	r4, [r3, #12]
   82d66:	6863      	ldr	r3, [r4, #4]
   82d68:	4a16      	ldr	r2, [pc, #88]	; (82dc4 <vTaskIncrementTick+0xf4>)
   82d6a:	6812      	ldr	r2, [r2, #0]
   82d6c:	4293      	cmp	r3, r2
   82d6e:	d907      	bls.n	82d80 <vTaskIncrementTick+0xb0>
   82d70:	4a19      	ldr	r2, [pc, #100]	; (82dd8 <vTaskIncrementTick+0x108>)
   82d72:	6013      	str	r3, [r2, #0]
   82d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d78:	4e18      	ldr	r6, [pc, #96]	; (82ddc <vTaskIncrementTick+0x10c>)
   82d7a:	4f19      	ldr	r7, [pc, #100]	; (82de0 <vTaskIncrementTick+0x110>)
   82d7c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 82dec <vTaskIncrementTick+0x11c>
   82d80:	1d25      	adds	r5, r4, #4
   82d82:	4628      	mov	r0, r5
   82d84:	47b0      	blx	r6
   82d86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82d88:	b113      	cbz	r3, 82d90 <vTaskIncrementTick+0xc0>
   82d8a:	f104 0018 	add.w	r0, r4, #24
   82d8e:	47b0      	blx	r6
   82d90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82d92:	683a      	ldr	r2, [r7, #0]
   82d94:	4293      	cmp	r3, r2
   82d96:	bf88      	it	hi
   82d98:	603b      	strhi	r3, [r7, #0]
   82d9a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   82d9e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   82da2:	4629      	mov	r1, r5
   82da4:	4b0f      	ldr	r3, [pc, #60]	; (82de4 <vTaskIncrementTick+0x114>)
   82da6:	4798      	blx	r3
   82da8:	4b07      	ldr	r3, [pc, #28]	; (82dc8 <vTaskIncrementTick+0xf8>)
   82daa:	681b      	ldr	r3, [r3, #0]
   82dac:	681b      	ldr	r3, [r3, #0]
   82dae:	2b00      	cmp	r3, #0
   82db0:	d1d5      	bne.n	82d5e <vTaskIncrementTick+0x8e>
   82db2:	e7ce      	b.n	82d52 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   82db4:	4b0c      	ldr	r3, [pc, #48]	; (82de8 <vTaskIncrementTick+0x118>)
   82db6:	681a      	ldr	r2, [r3, #0]
   82db8:	3201      	adds	r2, #1
   82dba:	601a      	str	r2, [r3, #0]
   82dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82dc0:	20078408 	.word	0x20078408
   82dc4:	20078428 	.word	0x20078428
   82dc8:	2007831c 	.word	0x2007831c
   82dcc:	00082245 	.word	0x00082245
   82dd0:	2007842c 	.word	0x2007842c
   82dd4:	20078424 	.word	0x20078424
   82dd8:	2007014c 	.word	0x2007014c
   82ddc:	000821bd 	.word	0x000821bd
   82de0:	20078350 	.word	0x20078350
   82de4:	00082165 	.word	0x00082165
   82de8:	20078304 	.word	0x20078304
   82dec:	20078354 	.word	0x20078354

00082df0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   82df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   82df4:	4b31      	ldr	r3, [pc, #196]	; (82ebc <xTaskResumeAll+0xcc>)
   82df6:	681b      	ldr	r3, [r3, #0]
   82df8:	b91b      	cbnz	r3, 82e02 <xTaskResumeAll+0x12>
   82dfa:	4b31      	ldr	r3, [pc, #196]	; (82ec0 <xTaskResumeAll+0xd0>)
   82dfc:	4798      	blx	r3
   82dfe:	bf00      	nop
   82e00:	e7fd      	b.n	82dfe <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   82e02:	4b30      	ldr	r3, [pc, #192]	; (82ec4 <xTaskResumeAll+0xd4>)
   82e04:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   82e06:	4b2d      	ldr	r3, [pc, #180]	; (82ebc <xTaskResumeAll+0xcc>)
   82e08:	681a      	ldr	r2, [r3, #0]
   82e0a:	3a01      	subs	r2, #1
   82e0c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82e0e:	681b      	ldr	r3, [r3, #0]
   82e10:	2b00      	cmp	r3, #0
   82e12:	d148      	bne.n	82ea6 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   82e14:	4b2c      	ldr	r3, [pc, #176]	; (82ec8 <xTaskResumeAll+0xd8>)
   82e16:	681b      	ldr	r3, [r3, #0]
   82e18:	2b00      	cmp	r3, #0
   82e1a:	d046      	beq.n	82eaa <xTaskResumeAll+0xba>
   82e1c:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 82ef4 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   82e22:	4f2a      	ldr	r7, [pc, #168]	; (82ecc <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   82e24:	4e2a      	ldr	r6, [pc, #168]	; (82ed0 <xTaskResumeAll+0xe0>)
   82e26:	e01d      	b.n	82e64 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   82e28:	f8d8 300c 	ldr.w	r3, [r8, #12]
   82e2c:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   82e2e:	f104 0018 	add.w	r0, r4, #24
   82e32:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   82e34:	f104 0904 	add.w	r9, r4, #4
   82e38:	4648      	mov	r0, r9
   82e3a:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   82e3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82e3e:	6832      	ldr	r2, [r6, #0]
   82e40:	4293      	cmp	r3, r2
   82e42:	bf88      	it	hi
   82e44:	6033      	strhi	r3, [r6, #0]
   82e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82e4a:	4822      	ldr	r0, [pc, #136]	; (82ed4 <xTaskResumeAll+0xe4>)
   82e4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82e50:	4649      	mov	r1, r9
   82e52:	4b21      	ldr	r3, [pc, #132]	; (82ed8 <xTaskResumeAll+0xe8>)
   82e54:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82e56:	4b21      	ldr	r3, [pc, #132]	; (82edc <xTaskResumeAll+0xec>)
   82e58:	681b      	ldr	r3, [r3, #0]
   82e5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   82e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   82e5e:	429a      	cmp	r2, r3
   82e60:	bf28      	it	cs
   82e62:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82e64:	f8d8 3000 	ldr.w	r3, [r8]
   82e68:	2b00      	cmp	r3, #0
   82e6a:	d1dd      	bne.n	82e28 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82e6c:	4b1c      	ldr	r3, [pc, #112]	; (82ee0 <xTaskResumeAll+0xf0>)
   82e6e:	681b      	ldr	r3, [r3, #0]
   82e70:	b163      	cbz	r3, 82e8c <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82e72:	4b1b      	ldr	r3, [pc, #108]	; (82ee0 <xTaskResumeAll+0xf0>)
   82e74:	681b      	ldr	r3, [r3, #0]
   82e76:	b17b      	cbz	r3, 82e98 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   82e78:	4d1a      	ldr	r5, [pc, #104]	; (82ee4 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   82e7a:	4c19      	ldr	r4, [pc, #100]	; (82ee0 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   82e7c:	47a8      	blx	r5
						--uxMissedTicks;
   82e7e:	6823      	ldr	r3, [r4, #0]
   82e80:	3b01      	subs	r3, #1
   82e82:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82e84:	6823      	ldr	r3, [r4, #0]
   82e86:	2b00      	cmp	r3, #0
   82e88:	d1f8      	bne.n	82e7c <xTaskResumeAll+0x8c>
   82e8a:	e005      	b.n	82e98 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   82e8c:	2d01      	cmp	r5, #1
   82e8e:	d003      	beq.n	82e98 <xTaskResumeAll+0xa8>
   82e90:	4b15      	ldr	r3, [pc, #84]	; (82ee8 <xTaskResumeAll+0xf8>)
   82e92:	681b      	ldr	r3, [r3, #0]
   82e94:	2b01      	cmp	r3, #1
   82e96:	d10a      	bne.n	82eae <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   82e98:	2200      	movs	r2, #0
   82e9a:	4b13      	ldr	r3, [pc, #76]	; (82ee8 <xTaskResumeAll+0xf8>)
   82e9c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   82e9e:	4b13      	ldr	r3, [pc, #76]	; (82eec <xTaskResumeAll+0xfc>)
   82ea0:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   82ea2:	2401      	movs	r4, #1
   82ea4:	e004      	b.n	82eb0 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   82ea6:	2400      	movs	r4, #0
   82ea8:	e002      	b.n	82eb0 <xTaskResumeAll+0xc0>
   82eaa:	2400      	movs	r4, #0
   82eac:	e000      	b.n	82eb0 <xTaskResumeAll+0xc0>
   82eae:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   82eb0:	4b0f      	ldr	r3, [pc, #60]	; (82ef0 <xTaskResumeAll+0x100>)
   82eb2:	4798      	blx	r3

	return xAlreadyYielded;
}
   82eb4:	4620      	mov	r0, r4
   82eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82eba:	bf00      	nop
   82ebc:	20078408 	.word	0x20078408
   82ec0:	00082245 	.word	0x00082245
   82ec4:	00082255 	.word	0x00082255
   82ec8:	2007844c 	.word	0x2007844c
   82ecc:	000821bd 	.word	0x000821bd
   82ed0:	20078350 	.word	0x20078350
   82ed4:	20078354 	.word	0x20078354
   82ed8:	00082165 	.word	0x00082165
   82edc:	2007840c 	.word	0x2007840c
   82ee0:	20078304 	.word	0x20078304
   82ee4:	00082cd1 	.word	0x00082cd1
   82ee8:	20078448 	.word	0x20078448
   82eec:	00082235 	.word	0x00082235
   82ef0:	00082275 	.word	0x00082275
   82ef4:	20078410 	.word	0x20078410

00082ef8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   82ef8:	b538      	push	{r3, r4, r5, lr}
   82efa:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   82efc:	4605      	mov	r5, r0
   82efe:	b918      	cbnz	r0, 82f08 <vTaskDelayUntil+0x10>
   82f00:	4b19      	ldr	r3, [pc, #100]	; (82f68 <vTaskDelayUntil+0x70>)
   82f02:	4798      	blx	r3
   82f04:	bf00      	nop
   82f06:	e7fd      	b.n	82f04 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   82f08:	b919      	cbnz	r1, 82f12 <vTaskDelayUntil+0x1a>
   82f0a:	4b17      	ldr	r3, [pc, #92]	; (82f68 <vTaskDelayUntil+0x70>)
   82f0c:	4798      	blx	r3
   82f0e:	bf00      	nop
   82f10:	e7fd      	b.n	82f0e <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   82f12:	4b16      	ldr	r3, [pc, #88]	; (82f6c <vTaskDelayUntil+0x74>)
   82f14:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   82f16:	682b      	ldr	r3, [r5, #0]
   82f18:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
   82f1a:	4a15      	ldr	r2, [pc, #84]	; (82f70 <vTaskDelayUntil+0x78>)
   82f1c:	6812      	ldr	r2, [r2, #0]
   82f1e:	4293      	cmp	r3, r2
   82f20:	d907      	bls.n	82f32 <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   82f22:	42a3      	cmp	r3, r4
   82f24:	d91c      	bls.n	82f60 <vTaskDelayUntil+0x68>
   82f26:	4b12      	ldr	r3, [pc, #72]	; (82f70 <vTaskDelayUntil+0x78>)
   82f28:	681b      	ldr	r3, [r3, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82f2a:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   82f2c:	429c      	cmp	r4, r3
   82f2e:	d90f      	bls.n	82f50 <vTaskDelayUntil+0x58>
   82f30:	e006      	b.n	82f40 <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   82f32:	42a3      	cmp	r3, r4
   82f34:	d812      	bhi.n	82f5c <vTaskDelayUntil+0x64>
   82f36:	4b0e      	ldr	r3, [pc, #56]	; (82f70 <vTaskDelayUntil+0x78>)
   82f38:	681b      	ldr	r3, [r3, #0]
   82f3a:	429c      	cmp	r4, r3
   82f3c:	d80e      	bhi.n	82f5c <vTaskDelayUntil+0x64>
   82f3e:	e00f      	b.n	82f60 <vTaskDelayUntil+0x68>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82f40:	4b0c      	ldr	r3, [pc, #48]	; (82f74 <vTaskDelayUntil+0x7c>)
   82f42:	6818      	ldr	r0, [r3, #0]
   82f44:	3004      	adds	r0, #4
   82f46:	4b0c      	ldr	r3, [pc, #48]	; (82f78 <vTaskDelayUntil+0x80>)
   82f48:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82f4a:	4620      	mov	r0, r4
   82f4c:	4b0b      	ldr	r3, [pc, #44]	; (82f7c <vTaskDelayUntil+0x84>)
   82f4e:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82f50:	4b0b      	ldr	r3, [pc, #44]	; (82f80 <vTaskDelayUntil+0x88>)
   82f52:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82f54:	b930      	cbnz	r0, 82f64 <vTaskDelayUntil+0x6c>
		{
			portYIELD_WITHIN_API();
   82f56:	4b0b      	ldr	r3, [pc, #44]	; (82f84 <vTaskDelayUntil+0x8c>)
   82f58:	4798      	blx	r3
   82f5a:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82f5c:	602c      	str	r4, [r5, #0]
   82f5e:	e7ef      	b.n	82f40 <vTaskDelayUntil+0x48>
   82f60:	602c      	str	r4, [r5, #0]
   82f62:	e7f5      	b.n	82f50 <vTaskDelayUntil+0x58>
   82f64:	bd38      	pop	{r3, r4, r5, pc}
   82f66:	bf00      	nop
   82f68:	00082245 	.word	0x00082245
   82f6c:	00082ca1 	.word	0x00082ca1
   82f70:	20078428 	.word	0x20078428
   82f74:	2007840c 	.word	0x2007840c
   82f78:	000821bd 	.word	0x000821bd
   82f7c:	000829d9 	.word	0x000829d9
   82f80:	00082df1 	.word	0x00082df1
   82f84:	00082235 	.word	0x00082235

00082f88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   82f88:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   82f8a:	4604      	mov	r4, r0
   82f8c:	b178      	cbz	r0, 82fae <vTaskDelay+0x26>
		{
			vTaskSuspendAll();
   82f8e:	4b09      	ldr	r3, [pc, #36]	; (82fb4 <vTaskDelay+0x2c>)
   82f90:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   82f92:	4b09      	ldr	r3, [pc, #36]	; (82fb8 <vTaskDelay+0x30>)
   82f94:	681b      	ldr	r3, [r3, #0]
   82f96:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82f98:	4b08      	ldr	r3, [pc, #32]	; (82fbc <vTaskDelay+0x34>)
   82f9a:	6818      	ldr	r0, [r3, #0]
   82f9c:	3004      	adds	r0, #4
   82f9e:	4b08      	ldr	r3, [pc, #32]	; (82fc0 <vTaskDelay+0x38>)
   82fa0:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82fa2:	4620      	mov	r0, r4
   82fa4:	4b07      	ldr	r3, [pc, #28]	; (82fc4 <vTaskDelay+0x3c>)
   82fa6:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   82fa8:	4b07      	ldr	r3, [pc, #28]	; (82fc8 <vTaskDelay+0x40>)
   82faa:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82fac:	b908      	cbnz	r0, 82fb2 <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
   82fae:	4b07      	ldr	r3, [pc, #28]	; (82fcc <vTaskDelay+0x44>)
   82fb0:	4798      	blx	r3
   82fb2:	bd10      	pop	{r4, pc}
   82fb4:	00082ca1 	.word	0x00082ca1
   82fb8:	20078428 	.word	0x20078428
   82fbc:	2007840c 	.word	0x2007840c
   82fc0:	000821bd 	.word	0x000821bd
   82fc4:	000829d9 	.word	0x000829d9
   82fc8:	00082df1 	.word	0x00082df1
   82fcc:	00082235 	.word	0x00082235

00082fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   82fd0:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82fd2:	4d15      	ldr	r5, [pc, #84]	; (83028 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82fd4:	4e15      	ldr	r6, [pc, #84]	; (8302c <prvIdleTask+0x5c>)
			{
				taskYIELD();
   82fd6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 83050 <prvIdleTask+0x80>
   82fda:	e01c      	b.n	83016 <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   82fdc:	4b14      	ldr	r3, [pc, #80]	; (83030 <prvIdleTask+0x60>)
   82fde:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82fe0:	4b14      	ldr	r3, [pc, #80]	; (83034 <prvIdleTask+0x64>)
   82fe2:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   82fe4:	4b14      	ldr	r3, [pc, #80]	; (83038 <prvIdleTask+0x68>)
   82fe6:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   82fe8:	b1ac      	cbz	r4, 83016 <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   82fea:	4b14      	ldr	r3, [pc, #80]	; (8303c <prvIdleTask+0x6c>)
   82fec:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   82fee:	4b11      	ldr	r3, [pc, #68]	; (83034 <prvIdleTask+0x64>)
   82ff0:	68db      	ldr	r3, [r3, #12]
   82ff2:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   82ff4:	1d20      	adds	r0, r4, #4
   82ff6:	4b12      	ldr	r3, [pc, #72]	; (83040 <prvIdleTask+0x70>)
   82ff8:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   82ffa:	4b12      	ldr	r3, [pc, #72]	; (83044 <prvIdleTask+0x74>)
   82ffc:	681a      	ldr	r2, [r3, #0]
   82ffe:	3a01      	subs	r2, #1
   83000:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   83002:	682b      	ldr	r3, [r5, #0]
   83004:	3b01      	subs	r3, #1
   83006:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   83008:	4b0f      	ldr	r3, [pc, #60]	; (83048 <prvIdleTask+0x78>)
   8300a:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   8300c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8300e:	4f0f      	ldr	r7, [pc, #60]	; (8304c <prvIdleTask+0x7c>)
   83010:	47b8      	blx	r7
		vPortFree( pxTCB );
   83012:	4620      	mov	r0, r4
   83014:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   83016:	682b      	ldr	r3, [r5, #0]
   83018:	2b00      	cmp	r3, #0
   8301a:	d1df      	bne.n	82fdc <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   8301c:	6833      	ldr	r3, [r6, #0]
   8301e:	2b01      	cmp	r3, #1
   83020:	d9f9      	bls.n	83016 <prvIdleTask+0x46>
			{
				taskYIELD();
   83022:	47c0      	blx	r8
   83024:	e7f7      	b.n	83016 <prvIdleTask+0x46>
   83026:	bf00      	nop
   83028:	20078324 	.word	0x20078324
   8302c:	20078354 	.word	0x20078354
   83030:	00082ca1 	.word	0x00082ca1
   83034:	20078328 	.word	0x20078328
   83038:	00082df1 	.word	0x00082df1
   8303c:	00082255 	.word	0x00082255
   83040:	000821bd 	.word	0x000821bd
   83044:	2007844c 	.word	0x2007844c
   83048:	00082275 	.word	0x00082275
   8304c:	00082465 	.word	0x00082465
   83050:	00082235 	.word	0x00082235

00083054 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   83054:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   83056:	4b1d      	ldr	r3, [pc, #116]	; (830cc <vTaskSwitchContext+0x78>)
   83058:	681b      	ldr	r3, [r3, #0]
   8305a:	b95b      	cbnz	r3, 83074 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8305c:	4b1c      	ldr	r3, [pc, #112]	; (830d0 <vTaskSwitchContext+0x7c>)
   8305e:	681b      	ldr	r3, [r3, #0]
   83060:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   83064:	009b      	lsls	r3, r3, #2
   83066:	4a1b      	ldr	r2, [pc, #108]	; (830d4 <vTaskSwitchContext+0x80>)
   83068:	58d3      	ldr	r3, [r2, r3]
   8306a:	b9cb      	cbnz	r3, 830a0 <vTaskSwitchContext+0x4c>
   8306c:	4b18      	ldr	r3, [pc, #96]	; (830d0 <vTaskSwitchContext+0x7c>)
   8306e:	681b      	ldr	r3, [r3, #0]
   83070:	b953      	cbnz	r3, 83088 <vTaskSwitchContext+0x34>
   83072:	e005      	b.n	83080 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   83074:	2201      	movs	r2, #1
   83076:	4b18      	ldr	r3, [pc, #96]	; (830d8 <vTaskSwitchContext+0x84>)
   83078:	601a      	str	r2, [r3, #0]
   8307a:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8307c:	681a      	ldr	r2, [r3, #0]
   8307e:	b92a      	cbnz	r2, 8308c <vTaskSwitchContext+0x38>
   83080:	4b16      	ldr	r3, [pc, #88]	; (830dc <vTaskSwitchContext+0x88>)
   83082:	4798      	blx	r3
   83084:	bf00      	nop
   83086:	e7fd      	b.n	83084 <vTaskSwitchContext+0x30>
   83088:	4b11      	ldr	r3, [pc, #68]	; (830d0 <vTaskSwitchContext+0x7c>)
   8308a:	4912      	ldr	r1, [pc, #72]	; (830d4 <vTaskSwitchContext+0x80>)
   8308c:	681a      	ldr	r2, [r3, #0]
   8308e:	3a01      	subs	r2, #1
   83090:	601a      	str	r2, [r3, #0]
   83092:	681a      	ldr	r2, [r3, #0]
   83094:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   83098:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   8309c:	2a00      	cmp	r2, #0
   8309e:	d0ed      	beq.n	8307c <vTaskSwitchContext+0x28>
   830a0:	4b0b      	ldr	r3, [pc, #44]	; (830d0 <vTaskSwitchContext+0x7c>)
   830a2:	681b      	ldr	r3, [r3, #0]
   830a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   830a8:	4a0a      	ldr	r2, [pc, #40]	; (830d4 <vTaskSwitchContext+0x80>)
   830aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   830ae:	685a      	ldr	r2, [r3, #4]
   830b0:	6852      	ldr	r2, [r2, #4]
   830b2:	605a      	str	r2, [r3, #4]
   830b4:	f103 0108 	add.w	r1, r3, #8
   830b8:	428a      	cmp	r2, r1
   830ba:	bf04      	itt	eq
   830bc:	6852      	ldreq	r2, [r2, #4]
   830be:	605a      	streq	r2, [r3, #4]
   830c0:	685b      	ldr	r3, [r3, #4]
   830c2:	68da      	ldr	r2, [r3, #12]
   830c4:	4b06      	ldr	r3, [pc, #24]	; (830e0 <vTaskSwitchContext+0x8c>)
   830c6:	601a      	str	r2, [r3, #0]
   830c8:	bd08      	pop	{r3, pc}
   830ca:	bf00      	nop
   830cc:	20078408 	.word	0x20078408
   830d0:	20078350 	.word	0x20078350
   830d4:	20078354 	.word	0x20078354
   830d8:	20078448 	.word	0x20078448
   830dc:	00082245 	.word	0x00082245
   830e0:	2007840c 	.word	0x2007840c

000830e4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   830e4:	b538      	push	{r3, r4, r5, lr}
   830e6:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   830e8:	b918      	cbnz	r0, 830f2 <vTaskPlaceOnEventList+0xe>
   830ea:	4b0e      	ldr	r3, [pc, #56]	; (83124 <vTaskPlaceOnEventList+0x40>)
   830ec:	4798      	blx	r3
   830ee:	bf00      	nop
   830f0:	e7fd      	b.n	830ee <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   830f2:	4d0d      	ldr	r5, [pc, #52]	; (83128 <vTaskPlaceOnEventList+0x44>)
   830f4:	6829      	ldr	r1, [r5, #0]
   830f6:	3118      	adds	r1, #24
   830f8:	4b0c      	ldr	r3, [pc, #48]	; (8312c <vTaskPlaceOnEventList+0x48>)
   830fa:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   830fc:	6828      	ldr	r0, [r5, #0]
   830fe:	3004      	adds	r0, #4
   83100:	4b0b      	ldr	r3, [pc, #44]	; (83130 <vTaskPlaceOnEventList+0x4c>)
   83102:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   83104:	f1b4 3fff 	cmp.w	r4, #4294967295
   83108:	d105      	bne.n	83116 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8310a:	6829      	ldr	r1, [r5, #0]
   8310c:	4809      	ldr	r0, [pc, #36]	; (83134 <vTaskPlaceOnEventList+0x50>)
   8310e:	3104      	adds	r1, #4
   83110:	4b09      	ldr	r3, [pc, #36]	; (83138 <vTaskPlaceOnEventList+0x54>)
   83112:	4798      	blx	r3
   83114:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   83116:	4b09      	ldr	r3, [pc, #36]	; (8313c <vTaskPlaceOnEventList+0x58>)
   83118:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8311a:	4420      	add	r0, r4
   8311c:	4b08      	ldr	r3, [pc, #32]	; (83140 <vTaskPlaceOnEventList+0x5c>)
   8311e:	4798      	blx	r3
   83120:	bd38      	pop	{r3, r4, r5, pc}
   83122:	bf00      	nop
   83124:	00082245 	.word	0x00082245
   83128:	2007840c 	.word	0x2007840c
   8312c:	00082181 	.word	0x00082181
   83130:	000821bd 	.word	0x000821bd
   83134:	20078308 	.word	0x20078308
   83138:	00082165 	.word	0x00082165
   8313c:	20078428 	.word	0x20078428
   83140:	000829d9 	.word	0x000829d9

00083144 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   83144:	b538      	push	{r3, r4, r5, lr}
   83146:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   83148:	b918      	cbnz	r0, 83152 <vTaskPlaceOnEventListRestricted+0xe>
   8314a:	4b09      	ldr	r3, [pc, #36]	; (83170 <vTaskPlaceOnEventListRestricted+0x2c>)
   8314c:	4798      	blx	r3
   8314e:	bf00      	nop
   83150:	e7fd      	b.n	8314e <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   83152:	4c08      	ldr	r4, [pc, #32]	; (83174 <vTaskPlaceOnEventListRestricted+0x30>)
   83154:	6821      	ldr	r1, [r4, #0]
   83156:	3118      	adds	r1, #24
   83158:	4b07      	ldr	r3, [pc, #28]	; (83178 <vTaskPlaceOnEventListRestricted+0x34>)
   8315a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8315c:	6820      	ldr	r0, [r4, #0]
   8315e:	3004      	adds	r0, #4
   83160:	4b06      	ldr	r3, [pc, #24]	; (8317c <vTaskPlaceOnEventListRestricted+0x38>)
   83162:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   83164:	4b06      	ldr	r3, [pc, #24]	; (83180 <vTaskPlaceOnEventListRestricted+0x3c>)
   83166:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   83168:	4428      	add	r0, r5
   8316a:	4b06      	ldr	r3, [pc, #24]	; (83184 <vTaskPlaceOnEventListRestricted+0x40>)
   8316c:	4798      	blx	r3
   8316e:	bd38      	pop	{r3, r4, r5, pc}
   83170:	00082245 	.word	0x00082245
   83174:	2007840c 	.word	0x2007840c
   83178:	00082165 	.word	0x00082165
   8317c:	000821bd 	.word	0x000821bd
   83180:	20078428 	.word	0x20078428
   83184:	000829d9 	.word	0x000829d9

00083188 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   83188:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8318a:	68c3      	ldr	r3, [r0, #12]
   8318c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8318e:	b91c      	cbnz	r4, 83198 <xTaskRemoveFromEventList+0x10>
   83190:	4b16      	ldr	r3, [pc, #88]	; (831ec <xTaskRemoveFromEventList+0x64>)
   83192:	4798      	blx	r3
   83194:	bf00      	nop
   83196:	e7fd      	b.n	83194 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   83198:	f104 0518 	add.w	r5, r4, #24
   8319c:	4628      	mov	r0, r5
   8319e:	4b14      	ldr	r3, [pc, #80]	; (831f0 <xTaskRemoveFromEventList+0x68>)
   831a0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   831a2:	4b14      	ldr	r3, [pc, #80]	; (831f4 <xTaskRemoveFromEventList+0x6c>)
   831a4:	681b      	ldr	r3, [r3, #0]
   831a6:	b99b      	cbnz	r3, 831d0 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   831a8:	1d25      	adds	r5, r4, #4
   831aa:	4628      	mov	r0, r5
   831ac:	4b10      	ldr	r3, [pc, #64]	; (831f0 <xTaskRemoveFromEventList+0x68>)
   831ae:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   831b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   831b2:	4a11      	ldr	r2, [pc, #68]	; (831f8 <xTaskRemoveFromEventList+0x70>)
   831b4:	6812      	ldr	r2, [r2, #0]
   831b6:	4293      	cmp	r3, r2
   831b8:	bf84      	itt	hi
   831ba:	4a0f      	ldrhi	r2, [pc, #60]	; (831f8 <xTaskRemoveFromEventList+0x70>)
   831bc:	6013      	strhi	r3, [r2, #0]
   831be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   831c2:	480e      	ldr	r0, [pc, #56]	; (831fc <xTaskRemoveFromEventList+0x74>)
   831c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   831c8:	4629      	mov	r1, r5
   831ca:	4b0d      	ldr	r3, [pc, #52]	; (83200 <xTaskRemoveFromEventList+0x78>)
   831cc:	4798      	blx	r3
   831ce:	e003      	b.n	831d8 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   831d0:	480c      	ldr	r0, [pc, #48]	; (83204 <xTaskRemoveFromEventList+0x7c>)
   831d2:	4629      	mov	r1, r5
   831d4:	4b0a      	ldr	r3, [pc, #40]	; (83200 <xTaskRemoveFromEventList+0x78>)
   831d6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   831d8:	4b0b      	ldr	r3, [pc, #44]	; (83208 <xTaskRemoveFromEventList+0x80>)
   831da:	681b      	ldr	r3, [r3, #0]
   831dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   831de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   831e0:	4298      	cmp	r0, r3
   831e2:	bf34      	ite	cc
   831e4:	2000      	movcc	r0, #0
   831e6:	2001      	movcs	r0, #1
   831e8:	bd38      	pop	{r3, r4, r5, pc}
   831ea:	bf00      	nop
   831ec:	00082245 	.word	0x00082245
   831f0:	000821bd 	.word	0x000821bd
   831f4:	20078408 	.word	0x20078408
   831f8:	20078350 	.word	0x20078350
   831fc:	20078354 	.word	0x20078354
   83200:	00082165 	.word	0x00082165
   83204:	20078410 	.word	0x20078410
   83208:	2007840c 	.word	0x2007840c

0008320c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   8320c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8320e:	b918      	cbnz	r0, 83218 <vTaskSetTimeOutState+0xc>
   83210:	4b05      	ldr	r3, [pc, #20]	; (83228 <vTaskSetTimeOutState+0x1c>)
   83212:	4798      	blx	r3
   83214:	bf00      	nop
   83216:	e7fd      	b.n	83214 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   83218:	4a04      	ldr	r2, [pc, #16]	; (8322c <vTaskSetTimeOutState+0x20>)
   8321a:	6812      	ldr	r2, [r2, #0]
   8321c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8321e:	4a04      	ldr	r2, [pc, #16]	; (83230 <vTaskSetTimeOutState+0x24>)
   83220:	6812      	ldr	r2, [r2, #0]
   83222:	6042      	str	r2, [r0, #4]
   83224:	bd08      	pop	{r3, pc}
   83226:	bf00      	nop
   83228:	00082245 	.word	0x00082245
   8322c:	20078424 	.word	0x20078424
   83230:	20078428 	.word	0x20078428

00083234 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   83234:	b538      	push	{r3, r4, r5, lr}
   83236:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   83238:	4604      	mov	r4, r0
   8323a:	b918      	cbnz	r0, 83244 <xTaskCheckForTimeOut+0x10>
   8323c:	4b18      	ldr	r3, [pc, #96]	; (832a0 <xTaskCheckForTimeOut+0x6c>)
   8323e:	4798      	blx	r3
   83240:	bf00      	nop
   83242:	e7fd      	b.n	83240 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   83244:	b919      	cbnz	r1, 8324e <xTaskCheckForTimeOut+0x1a>
   83246:	4b16      	ldr	r3, [pc, #88]	; (832a0 <xTaskCheckForTimeOut+0x6c>)
   83248:	4798      	blx	r3
   8324a:	bf00      	nop
   8324c:	e7fd      	b.n	8324a <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8324e:	4b15      	ldr	r3, [pc, #84]	; (832a4 <xTaskCheckForTimeOut+0x70>)
   83250:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   83252:	682b      	ldr	r3, [r5, #0]
   83254:	f1b3 3fff 	cmp.w	r3, #4294967295
   83258:	d019      	beq.n	8328e <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8325a:	4a13      	ldr	r2, [pc, #76]	; (832a8 <xTaskCheckForTimeOut+0x74>)
   8325c:	6811      	ldr	r1, [r2, #0]
   8325e:	6822      	ldr	r2, [r4, #0]
   83260:	428a      	cmp	r2, r1
   83262:	d004      	beq.n	8326e <xTaskCheckForTimeOut+0x3a>
   83264:	4a11      	ldr	r2, [pc, #68]	; (832ac <xTaskCheckForTimeOut+0x78>)
   83266:	6811      	ldr	r1, [r2, #0]
   83268:	6862      	ldr	r2, [r4, #4]
   8326a:	428a      	cmp	r2, r1
   8326c:	d911      	bls.n	83292 <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8326e:	4a0f      	ldr	r2, [pc, #60]	; (832ac <xTaskCheckForTimeOut+0x78>)
   83270:	6811      	ldr	r1, [r2, #0]
   83272:	6862      	ldr	r2, [r4, #4]
   83274:	1a89      	subs	r1, r1, r2
   83276:	428b      	cmp	r3, r1
   83278:	d90d      	bls.n	83296 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   8327a:	490c      	ldr	r1, [pc, #48]	; (832ac <xTaskCheckForTimeOut+0x78>)
   8327c:	6809      	ldr	r1, [r1, #0]
   8327e:	1a52      	subs	r2, r2, r1
   83280:	4413      	add	r3, r2
   83282:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   83284:	4620      	mov	r0, r4
   83286:	4b0a      	ldr	r3, [pc, #40]	; (832b0 <xTaskCheckForTimeOut+0x7c>)
   83288:	4798      	blx	r3
			xReturn = pdFALSE;
   8328a:	2400      	movs	r4, #0
   8328c:	e004      	b.n	83298 <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   8328e:	2400      	movs	r4, #0
   83290:	e002      	b.n	83298 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   83292:	2401      	movs	r4, #1
   83294:	e000      	b.n	83298 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   83296:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   83298:	4b06      	ldr	r3, [pc, #24]	; (832b4 <xTaskCheckForTimeOut+0x80>)
   8329a:	4798      	blx	r3

	return xReturn;
}
   8329c:	4620      	mov	r0, r4
   8329e:	bd38      	pop	{r3, r4, r5, pc}
   832a0:	00082245 	.word	0x00082245
   832a4:	00082255 	.word	0x00082255
   832a8:	20078424 	.word	0x20078424
   832ac:	20078428 	.word	0x20078428
   832b0:	0008320d 	.word	0x0008320d
   832b4:	00082275 	.word	0x00082275

000832b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   832b8:	2201      	movs	r2, #1
   832ba:	4b01      	ldr	r3, [pc, #4]	; (832c0 <vTaskMissedYield+0x8>)
   832bc:	601a      	str	r2, [r3, #0]
   832be:	4770      	bx	lr
   832c0:	20078448 	.word	0x20078448

000832c4 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   832c4:	4b01      	ldr	r3, [pc, #4]	; (832cc <xTaskGetCurrentTaskHandle+0x8>)
   832c6:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   832c8:	4770      	bx	lr
   832ca:	bf00      	nop
   832cc:	2007840c 	.word	0x2007840c

000832d0 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   832d0:	4b05      	ldr	r3, [pc, #20]	; (832e8 <xTaskGetSchedulerState+0x18>)
   832d2:	681b      	ldr	r3, [r3, #0]
   832d4:	b133      	cbz	r3, 832e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   832d6:	4b05      	ldr	r3, [pc, #20]	; (832ec <xTaskGetSchedulerState+0x1c>)
   832d8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   832da:	2b00      	cmp	r3, #0
   832dc:	bf14      	ite	ne
   832de:	2002      	movne	r0, #2
   832e0:	2001      	moveq	r0, #1
   832e2:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   832e4:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   832e6:	4770      	bx	lr
   832e8:	20078320 	.word	0x20078320
   832ec:	20078408 	.word	0x20078408

000832f0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   832f0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   832f2:	4604      	mov	r4, r0
   832f4:	2800      	cmp	r0, #0
   832f6:	d02e      	beq.n	83356 <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   832f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   832fa:	4a17      	ldr	r2, [pc, #92]	; (83358 <vTaskPriorityInherit+0x68>)
   832fc:	6812      	ldr	r2, [r2, #0]
   832fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   83300:	4293      	cmp	r3, r2
   83302:	d228      	bcs.n	83356 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   83304:	4a14      	ldr	r2, [pc, #80]	; (83358 <vTaskPriorityInherit+0x68>)
   83306:	6812      	ldr	r2, [r2, #0]
   83308:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   8330a:	f1c2 0209 	rsb	r2, r2, #9
   8330e:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   83310:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   83314:	4a11      	ldr	r2, [pc, #68]	; (8335c <vTaskPriorityInherit+0x6c>)
   83316:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8331a:	6942      	ldr	r2, [r0, #20]
   8331c:	429a      	cmp	r2, r3
   8331e:	d116      	bne.n	8334e <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   83320:	1d05      	adds	r5, r0, #4
   83322:	4628      	mov	r0, r5
   83324:	4b0e      	ldr	r3, [pc, #56]	; (83360 <vTaskPriorityInherit+0x70>)
   83326:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   83328:	4b0b      	ldr	r3, [pc, #44]	; (83358 <vTaskPriorityInherit+0x68>)
   8332a:	681b      	ldr	r3, [r3, #0]
   8332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8332e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   83330:	4a0c      	ldr	r2, [pc, #48]	; (83364 <vTaskPriorityInherit+0x74>)
   83332:	6812      	ldr	r2, [r2, #0]
   83334:	4293      	cmp	r3, r2
   83336:	bf84      	itt	hi
   83338:	4a0a      	ldrhi	r2, [pc, #40]	; (83364 <vTaskPriorityInherit+0x74>)
   8333a:	6013      	strhi	r3, [r2, #0]
   8333c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   83340:	4806      	ldr	r0, [pc, #24]	; (8335c <vTaskPriorityInherit+0x6c>)
   83342:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   83346:	4629      	mov	r1, r5
   83348:	4b07      	ldr	r3, [pc, #28]	; (83368 <vTaskPriorityInherit+0x78>)
   8334a:	4798      	blx	r3
   8334c:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8334e:	4b02      	ldr	r3, [pc, #8]	; (83358 <vTaskPriorityInherit+0x68>)
   83350:	681b      	ldr	r3, [r3, #0]
   83352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83354:	62c3      	str	r3, [r0, #44]	; 0x2c
   83356:	bd38      	pop	{r3, r4, r5, pc}
   83358:	2007840c 	.word	0x2007840c
   8335c:	20078354 	.word	0x20078354
   83360:	000821bd 	.word	0x000821bd
   83364:	20078350 	.word	0x20078350
   83368:	00082165 	.word	0x00082165

0008336c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   8336c:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   8336e:	4604      	mov	r4, r0
   83370:	b1d0      	cbz	r0, 833a8 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   83372:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   83374:	6c83      	ldr	r3, [r0, #72]	; 0x48
   83376:	429a      	cmp	r2, r3
   83378:	d016      	beq.n	833a8 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8337a:	1d05      	adds	r5, r0, #4
   8337c:	4628      	mov	r0, r5
   8337e:	4b0b      	ldr	r3, [pc, #44]	; (833ac <vTaskPriorityDisinherit+0x40>)
   83380:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   83382:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   83384:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   83386:	f1c3 0209 	rsb	r2, r3, #9
   8338a:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   8338c:	4a08      	ldr	r2, [pc, #32]	; (833b0 <vTaskPriorityDisinherit+0x44>)
   8338e:	6812      	ldr	r2, [r2, #0]
   83390:	4293      	cmp	r3, r2
   83392:	bf84      	itt	hi
   83394:	4a06      	ldrhi	r2, [pc, #24]	; (833b0 <vTaskPriorityDisinherit+0x44>)
   83396:	6013      	strhi	r3, [r2, #0]
   83398:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8339c:	4805      	ldr	r0, [pc, #20]	; (833b4 <vTaskPriorityDisinherit+0x48>)
   8339e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   833a2:	4629      	mov	r1, r5
   833a4:	4b04      	ldr	r3, [pc, #16]	; (833b8 <vTaskPriorityDisinherit+0x4c>)
   833a6:	4798      	blx	r3
   833a8:	bd38      	pop	{r3, r4, r5, pc}
   833aa:	bf00      	nop
   833ac:	000821bd 	.word	0x000821bd
   833b0:	20078350 	.word	0x20078350
   833b4:	20078354 	.word	0x20078354
   833b8:	00082165 	.word	0x00082165

000833bc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   833bc:	b510      	push	{r4, lr}
   833be:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   833c0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   833c2:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   833c4:	4291      	cmp	r1, r2
   833c6:	d80a      	bhi.n	833de <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   833c8:	1ad2      	subs	r2, r2, r3
   833ca:	6981      	ldr	r1, [r0, #24]
   833cc:	428a      	cmp	r2, r1
   833ce:	d211      	bcs.n	833f4 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   833d0:	4b0a      	ldr	r3, [pc, #40]	; (833fc <prvInsertTimerInActiveList+0x40>)
   833d2:	6818      	ldr	r0, [r3, #0]
   833d4:	1d21      	adds	r1, r4, #4
   833d6:	4b0a      	ldr	r3, [pc, #40]	; (83400 <prvInsertTimerInActiveList+0x44>)
   833d8:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   833da:	2000      	movs	r0, #0
   833dc:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   833de:	429a      	cmp	r2, r3
   833e0:	d201      	bcs.n	833e6 <prvInsertTimerInActiveList+0x2a>
   833e2:	4299      	cmp	r1, r3
   833e4:	d208      	bcs.n	833f8 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   833e6:	4b07      	ldr	r3, [pc, #28]	; (83404 <prvInsertTimerInActiveList+0x48>)
   833e8:	6818      	ldr	r0, [r3, #0]
   833ea:	1d21      	adds	r1, r4, #4
   833ec:	4b04      	ldr	r3, [pc, #16]	; (83400 <prvInsertTimerInActiveList+0x44>)
   833ee:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   833f0:	2000      	movs	r0, #0
   833f2:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   833f4:	2001      	movs	r0, #1
   833f6:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   833f8:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   833fa:	bd10      	pop	{r4, pc}
   833fc:	20078488 	.word	0x20078488
   83400:	00082181 	.word	0x00082181
   83404:	20078454 	.word	0x20078454

00083408 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   83408:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8340a:	4b0d      	ldr	r3, [pc, #52]	; (83440 <prvCheckForValidListAndQueue+0x38>)
   8340c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8340e:	4b0d      	ldr	r3, [pc, #52]	; (83444 <prvCheckForValidListAndQueue+0x3c>)
   83410:	681b      	ldr	r3, [r3, #0]
   83412:	b98b      	cbnz	r3, 83438 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   83414:	4d0c      	ldr	r5, [pc, #48]	; (83448 <prvCheckForValidListAndQueue+0x40>)
   83416:	4628      	mov	r0, r5
   83418:	4e0c      	ldr	r6, [pc, #48]	; (8344c <prvCheckForValidListAndQueue+0x44>)
   8341a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   8341c:	4c0c      	ldr	r4, [pc, #48]	; (83450 <prvCheckForValidListAndQueue+0x48>)
   8341e:	4620      	mov	r0, r4
   83420:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   83422:	4b0c      	ldr	r3, [pc, #48]	; (83454 <prvCheckForValidListAndQueue+0x4c>)
   83424:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   83426:	4b0c      	ldr	r3, [pc, #48]	; (83458 <prvCheckForValidListAndQueue+0x50>)
   83428:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   8342a:	2005      	movs	r0, #5
   8342c:	210c      	movs	r1, #12
   8342e:	2200      	movs	r2, #0
   83430:	4b0a      	ldr	r3, [pc, #40]	; (8345c <prvCheckForValidListAndQueue+0x54>)
   83432:	4798      	blx	r3
   83434:	4b03      	ldr	r3, [pc, #12]	; (83444 <prvCheckForValidListAndQueue+0x3c>)
   83436:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   83438:	4b09      	ldr	r3, [pc, #36]	; (83460 <prvCheckForValidListAndQueue+0x58>)
   8343a:	4798      	blx	r3
   8343c:	bd70      	pop	{r4, r5, r6, pc}
   8343e:	bf00      	nop
   83440:	00082255 	.word	0x00082255
   83444:	20078484 	.word	0x20078484
   83448:	20078458 	.word	0x20078458
   8344c:	00082145 	.word	0x00082145
   83450:	2007846c 	.word	0x2007846c
   83454:	20078454 	.word	0x20078454
   83458:	20078488 	.word	0x20078488
   8345c:	0008262d 	.word	0x0008262d
   83460:	00082275 	.word	0x00082275

00083464 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   83464:	b510      	push	{r4, lr}
   83466:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   83468:	4b0b      	ldr	r3, [pc, #44]	; (83498 <xTimerCreateTimerTask+0x34>)
   8346a:	4798      	blx	r3

	if( xTimerQueue != NULL )
   8346c:	4b0b      	ldr	r3, [pc, #44]	; (8349c <xTimerCreateTimerTask+0x38>)
   8346e:	681b      	ldr	r3, [r3, #0]
   83470:	b163      	cbz	r3, 8348c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   83472:	2308      	movs	r3, #8
   83474:	9300      	str	r3, [sp, #0]
   83476:	2300      	movs	r3, #0
   83478:	9301      	str	r3, [sp, #4]
   8347a:	9302      	str	r3, [sp, #8]
   8347c:	9303      	str	r3, [sp, #12]
   8347e:	4808      	ldr	r0, [pc, #32]	; (834a0 <xTimerCreateTimerTask+0x3c>)
   83480:	4908      	ldr	r1, [pc, #32]	; (834a4 <xTimerCreateTimerTask+0x40>)
   83482:	f44f 7282 	mov.w	r2, #260	; 0x104
   83486:	4c08      	ldr	r4, [pc, #32]	; (834a8 <xTimerCreateTimerTask+0x44>)
   83488:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   8348a:	b918      	cbnz	r0, 83494 <xTimerCreateTimerTask+0x30>
   8348c:	4b07      	ldr	r3, [pc, #28]	; (834ac <xTimerCreateTimerTask+0x48>)
   8348e:	4798      	blx	r3
   83490:	bf00      	nop
   83492:	e7fd      	b.n	83490 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   83494:	b004      	add	sp, #16
   83496:	bd10      	pop	{r4, pc}
   83498:	00083409 	.word	0x00083409
   8349c:	20078484 	.word	0x20078484
   834a0:	000835b9 	.word	0x000835b9
   834a4:	0008716c 	.word	0x0008716c
   834a8:	00082a31 	.word	0x00082a31
   834ac:	00082245 	.word	0x00082245

000834b0 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   834b0:	b510      	push	{r4, lr}
   834b2:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   834b4:	4c0f      	ldr	r4, [pc, #60]	; (834f4 <xTimerGenericCommand+0x44>)
   834b6:	6824      	ldr	r4, [r4, #0]
   834b8:	b1c4      	cbz	r4, 834ec <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   834ba:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   834bc:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   834be:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   834c0:	b96b      	cbnz	r3, 834de <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   834c2:	4b0d      	ldr	r3, [pc, #52]	; (834f8 <xTimerGenericCommand+0x48>)
   834c4:	4798      	blx	r3
   834c6:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   834c8:	4b0a      	ldr	r3, [pc, #40]	; (834f4 <xTimerGenericCommand+0x44>)
   834ca:	6818      	ldr	r0, [r3, #0]
   834cc:	a901      	add	r1, sp, #4
   834ce:	bf07      	ittee	eq
   834d0:	9a06      	ldreq	r2, [sp, #24]
   834d2:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   834d4:	2200      	movne	r2, #0
   834d6:	4613      	movne	r3, r2
   834d8:	4c08      	ldr	r4, [pc, #32]	; (834fc <xTimerGenericCommand+0x4c>)
   834da:	47a0      	blx	r4
   834dc:	e007      	b.n	834ee <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   834de:	4620      	mov	r0, r4
   834e0:	a901      	add	r1, sp, #4
   834e2:	461a      	mov	r2, r3
   834e4:	2300      	movs	r3, #0
   834e6:	4c06      	ldr	r4, [pc, #24]	; (83500 <xTimerGenericCommand+0x50>)
   834e8:	47a0      	blx	r4
   834ea:	e000      	b.n	834ee <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   834ec:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   834ee:	b004      	add	sp, #16
   834f0:	bd10      	pop	{r4, pc}
   834f2:	bf00      	nop
   834f4:	20078484 	.word	0x20078484
   834f8:	000832d1 	.word	0x000832d1
   834fc:	00082685 	.word	0x00082685
   83500:	000827a1 	.word	0x000827a1

00083504 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   83504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83508:	b082      	sub	sp, #8
   8350a:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   8350c:	4b22      	ldr	r3, [pc, #136]	; (83598 <prvSampleTimeNow+0x94>)
   8350e:	4798      	blx	r3
   83510:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   83512:	4b22      	ldr	r3, [pc, #136]	; (8359c <prvSampleTimeNow+0x98>)
   83514:	681b      	ldr	r3, [r3, #0]
   83516:	4298      	cmp	r0, r3
   83518:	d234      	bcs.n	83584 <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8351a:	4e21      	ldr	r6, [pc, #132]	; (835a0 <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8351c:	4f21      	ldr	r7, [pc, #132]	; (835a4 <prvSampleTimeNow+0xa0>)
   8351e:	e024      	b.n	8356a <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83520:	68da      	ldr	r2, [r3, #12]
   83522:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83526:	68db      	ldr	r3, [r3, #12]
   83528:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8352a:	1d25      	adds	r5, r4, #4
   8352c:	4628      	mov	r0, r5
   8352e:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83530:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83532:	4620      	mov	r0, r4
   83534:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   83536:	69e3      	ldr	r3, [r4, #28]
   83538:	2b01      	cmp	r3, #1
   8353a:	d116      	bne.n	8356a <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   8353c:	69a3      	ldr	r3, [r4, #24]
   8353e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   83540:	4553      	cmp	r3, sl
   83542:	d906      	bls.n	83552 <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   83544:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83546:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83548:	6830      	ldr	r0, [r6, #0]
   8354a:	4629      	mov	r1, r5
   8354c:	4b16      	ldr	r3, [pc, #88]	; (835a8 <prvSampleTimeNow+0xa4>)
   8354e:	4798      	blx	r3
   83550:	e00b      	b.n	8356a <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83552:	2300      	movs	r3, #0
   83554:	9300      	str	r3, [sp, #0]
   83556:	4620      	mov	r0, r4
   83558:	4619      	mov	r1, r3
   8355a:	4652      	mov	r2, sl
   8355c:	4c13      	ldr	r4, [pc, #76]	; (835ac <prvSampleTimeNow+0xa8>)
   8355e:	47a0      	blx	r4
				configASSERT( xResult );
   83560:	b918      	cbnz	r0, 8356a <prvSampleTimeNow+0x66>
   83562:	4b13      	ldr	r3, [pc, #76]	; (835b0 <prvSampleTimeNow+0xac>)
   83564:	4798      	blx	r3
   83566:	bf00      	nop
   83568:	e7fd      	b.n	83566 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8356a:	6833      	ldr	r3, [r6, #0]
   8356c:	681a      	ldr	r2, [r3, #0]
   8356e:	2a00      	cmp	r2, #0
   83570:	d1d6      	bne.n	83520 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   83572:	4a10      	ldr	r2, [pc, #64]	; (835b4 <prvSampleTimeNow+0xb0>)
   83574:	6811      	ldr	r1, [r2, #0]
   83576:	480a      	ldr	r0, [pc, #40]	; (835a0 <prvSampleTimeNow+0x9c>)
   83578:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   8357a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   8357c:	2301      	movs	r3, #1
   8357e:	f8c9 3000 	str.w	r3, [r9]
   83582:	e002      	b.n	8358a <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   83584:	2300      	movs	r3, #0
   83586:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   8358a:	4b04      	ldr	r3, [pc, #16]	; (8359c <prvSampleTimeNow+0x98>)
   8358c:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   83590:	4640      	mov	r0, r8
   83592:	b002      	add	sp, #8
   83594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83598:	00082cb1 	.word	0x00082cb1
   8359c:	20078480 	.word	0x20078480
   835a0:	20078454 	.word	0x20078454
   835a4:	000821bd 	.word	0x000821bd
   835a8:	00082181 	.word	0x00082181
   835ac:	000834b1 	.word	0x000834b1
   835b0:	00082245 	.word	0x00082245
   835b4:	20078488 	.word	0x20078488

000835b8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   835b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   835bc:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   835be:	4d4d      	ldr	r5, [pc, #308]	; (836f4 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   835c0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 83724 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   835c4:	4b4c      	ldr	r3, [pc, #304]	; (836f8 <prvTimerTask+0x140>)
   835c6:	681b      	ldr	r3, [r3, #0]
   835c8:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   835ca:	2a00      	cmp	r2, #0
   835cc:	f000 8087 	beq.w	836de <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   835d0:	68db      	ldr	r3, [r3, #12]
   835d2:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   835d4:	4b49      	ldr	r3, [pc, #292]	; (836fc <prvTimerTask+0x144>)
   835d6:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   835d8:	a803      	add	r0, sp, #12
   835da:	4b49      	ldr	r3, [pc, #292]	; (83700 <prvTimerTask+0x148>)
   835dc:	4798      	blx	r3
   835de:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   835e0:	9b03      	ldr	r3, [sp, #12]
   835e2:	2b00      	cmp	r3, #0
   835e4:	d130      	bne.n	83648 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   835e6:	4286      	cmp	r6, r0
   835e8:	d824      	bhi.n	83634 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   835ea:	4b46      	ldr	r3, [pc, #280]	; (83704 <prvTimerTask+0x14c>)
   835ec:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   835ee:	4b42      	ldr	r3, [pc, #264]	; (836f8 <prvTimerTask+0x140>)
   835f0:	681b      	ldr	r3, [r3, #0]
   835f2:	68db      	ldr	r3, [r3, #12]
   835f4:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   835f6:	1d20      	adds	r0, r4, #4
   835f8:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   835fa:	69e3      	ldr	r3, [r4, #28]
   835fc:	2b01      	cmp	r3, #1
   835fe:	d114      	bne.n	8362a <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   83600:	69a1      	ldr	r1, [r4, #24]
   83602:	4620      	mov	r0, r4
   83604:	4431      	add	r1, r6
   83606:	463a      	mov	r2, r7
   83608:	4633      	mov	r3, r6
   8360a:	4f3f      	ldr	r7, [pc, #252]	; (83708 <prvTimerTask+0x150>)
   8360c:	47b8      	blx	r7
   8360e:	2801      	cmp	r0, #1
   83610:	d10b      	bne.n	8362a <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83612:	2300      	movs	r3, #0
   83614:	9300      	str	r3, [sp, #0]
   83616:	4620      	mov	r0, r4
   83618:	4619      	mov	r1, r3
   8361a:	4632      	mov	r2, r6
   8361c:	4e3b      	ldr	r6, [pc, #236]	; (8370c <prvTimerTask+0x154>)
   8361e:	47b0      	blx	r6
			configASSERT( xResult );
   83620:	b918      	cbnz	r0, 8362a <prvTimerTask+0x72>
   83622:	4b3b      	ldr	r3, [pc, #236]	; (83710 <prvTimerTask+0x158>)
   83624:	4798      	blx	r3
   83626:	bf00      	nop
   83628:	e7fd      	b.n	83626 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8362a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8362c:	4620      	mov	r0, r4
   8362e:	4798      	blx	r3
   83630:	e00c      	b.n	8364c <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   83632:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   83634:	6828      	ldr	r0, [r5, #0]
   83636:	1bf1      	subs	r1, r6, r7
   83638:	4b36      	ldr	r3, [pc, #216]	; (83714 <prvTimerTask+0x15c>)
   8363a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   8363c:	4b31      	ldr	r3, [pc, #196]	; (83704 <prvTimerTask+0x14c>)
   8363e:	4798      	blx	r3
   83640:	b920      	cbnz	r0, 8364c <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   83642:	4b35      	ldr	r3, [pc, #212]	; (83718 <prvTimerTask+0x160>)
   83644:	4798      	blx	r3
   83646:	e001      	b.n	8364c <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   83648:	4b2e      	ldr	r3, [pc, #184]	; (83704 <prvTimerTask+0x14c>)
   8364a:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8364c:	a802      	add	r0, sp, #8
   8364e:	4b2c      	ldr	r3, [pc, #176]	; (83700 <prvTimerTask+0x148>)
   83650:	4798      	blx	r3
   83652:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   83654:	4e31      	ldr	r6, [pc, #196]	; (8371c <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83656:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 83708 <prvTimerTask+0x150>
   8365a:	e038      	b.n	836ce <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   8365c:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   8365e:	b11c      	cbz	r4, 83668 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   83660:	6961      	ldr	r1, [r4, #20]
   83662:	b109      	cbz	r1, 83668 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   83664:	1d20      	adds	r0, r4, #4
   83666:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   83668:	9903      	ldr	r1, [sp, #12]
   8366a:	2902      	cmp	r1, #2
   8366c:	d01f      	beq.n	836ae <prvTimerTask+0xf6>
   8366e:	2903      	cmp	r1, #3
   83670:	d02a      	beq.n	836c8 <prvTimerTask+0x110>
   83672:	2900      	cmp	r1, #0
   83674:	d12b      	bne.n	836ce <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   83676:	9b04      	ldr	r3, [sp, #16]
   83678:	69a1      	ldr	r1, [r4, #24]
   8367a:	4620      	mov	r0, r4
   8367c:	4419      	add	r1, r3
   8367e:	463a      	mov	r2, r7
   83680:	47c8      	blx	r9
   83682:	2801      	cmp	r0, #1
   83684:	d123      	bne.n	836ce <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83686:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83688:	4620      	mov	r0, r4
   8368a:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8368c:	69e3      	ldr	r3, [r4, #28]
   8368e:	2b01      	cmp	r3, #1
   83690:	d11d      	bne.n	836ce <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   83692:	69a2      	ldr	r2, [r4, #24]
   83694:	2300      	movs	r3, #0
   83696:	9300      	str	r3, [sp, #0]
   83698:	4620      	mov	r0, r4
   8369a:	4619      	mov	r1, r3
   8369c:	9c04      	ldr	r4, [sp, #16]
   8369e:	4422      	add	r2, r4
   836a0:	4c1a      	ldr	r4, [pc, #104]	; (8370c <prvTimerTask+0x154>)
   836a2:	47a0      	blx	r4
						configASSERT( xResult );
   836a4:	b998      	cbnz	r0, 836ce <prvTimerTask+0x116>
   836a6:	4b1a      	ldr	r3, [pc, #104]	; (83710 <prvTimerTask+0x158>)
   836a8:	4798      	blx	r3
   836aa:	bf00      	nop
   836ac:	e7fd      	b.n	836aa <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   836ae:	9904      	ldr	r1, [sp, #16]
   836b0:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   836b2:	b919      	cbnz	r1, 836bc <prvTimerTask+0x104>
   836b4:	4b16      	ldr	r3, [pc, #88]	; (83710 <prvTimerTask+0x158>)
   836b6:	4798      	blx	r3
   836b8:	bf00      	nop
   836ba:	e7fd      	b.n	836b8 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   836bc:	4620      	mov	r0, r4
   836be:	4439      	add	r1, r7
   836c0:	463a      	mov	r2, r7
   836c2:	463b      	mov	r3, r7
   836c4:	47c8      	blx	r9
   836c6:	e002      	b.n	836ce <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   836c8:	4620      	mov	r0, r4
   836ca:	4b15      	ldr	r3, [pc, #84]	; (83720 <prvTimerTask+0x168>)
   836cc:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   836ce:	6828      	ldr	r0, [r5, #0]
   836d0:	a903      	add	r1, sp, #12
   836d2:	2200      	movs	r2, #0
   836d4:	4613      	mov	r3, r2
   836d6:	47b0      	blx	r6
   836d8:	2800      	cmp	r0, #0
   836da:	d1bf      	bne.n	8365c <prvTimerTask+0xa4>
   836dc:	e772      	b.n	835c4 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   836de:	4b07      	ldr	r3, [pc, #28]	; (836fc <prvTimerTask+0x144>)
   836e0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   836e2:	a803      	add	r0, sp, #12
   836e4:	4b06      	ldr	r3, [pc, #24]	; (83700 <prvTimerTask+0x148>)
   836e6:	4798      	blx	r3
   836e8:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   836ea:	9b03      	ldr	r3, [sp, #12]
   836ec:	2b00      	cmp	r3, #0
   836ee:	d0a0      	beq.n	83632 <prvTimerTask+0x7a>
   836f0:	e7aa      	b.n	83648 <prvTimerTask+0x90>
   836f2:	bf00      	nop
   836f4:	20078484 	.word	0x20078484
   836f8:	20078454 	.word	0x20078454
   836fc:	00082ca1 	.word	0x00082ca1
   83700:	00083505 	.word	0x00083505
   83704:	00082df1 	.word	0x00082df1
   83708:	000833bd 	.word	0x000833bd
   8370c:	000834b1 	.word	0x000834b1
   83710:	00082245 	.word	0x00082245
   83714:	0008298d 	.word	0x0008298d
   83718:	00082235 	.word	0x00082235
   8371c:	00082831 	.word	0x00082831
   83720:	00082465 	.word	0x00082465
   83724:	000821bd 	.word	0x000821bd

00083728 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   83728:	b500      	push	{lr}
   8372a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8372c:	4813      	ldr	r0, [pc, #76]	; (8377c <USART0_Handler+0x54>)
   8372e:	f10d 0107 	add.w	r1, sp, #7
   83732:	2201      	movs	r2, #1
   83734:	4b12      	ldr	r3, [pc, #72]	; (83780 <USART0_Handler+0x58>)
   83736:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   83738:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8373a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8373e:	2200      	movs	r2, #0
   83740:	4b10      	ldr	r3, [pc, #64]	; (83784 <USART0_Handler+0x5c>)
   83742:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   83744:	4b10      	ldr	r3, [pc, #64]	; (83788 <USART0_Handler+0x60>)
   83746:	781a      	ldrb	r2, [r3, #0]
   83748:	3201      	adds	r2, #1
   8374a:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8374c:	4b0f      	ldr	r3, [pc, #60]	; (8378c <USART0_Handler+0x64>)
   8374e:	781b      	ldrb	r3, [r3, #0]
   83750:	f89d 1007 	ldrb.w	r1, [sp, #7]
   83754:	4a0e      	ldr	r2, [pc, #56]	; (83790 <USART0_Handler+0x68>)
   83756:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   83758:	2b9b      	cmp	r3, #155	; 0x9b
   8375a:	d103      	bne.n	83764 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   8375c:	2200      	movs	r2, #0
   8375e:	4b0b      	ldr	r3, [pc, #44]	; (8378c <USART0_Handler+0x64>)
   83760:	701a      	strb	r2, [r3, #0]
   83762:	e002      	b.n	8376a <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   83764:	3301      	adds	r3, #1
   83766:	4a09      	ldr	r2, [pc, #36]	; (8378c <USART0_Handler+0x64>)
   83768:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8376a:	2201      	movs	r2, #1
   8376c:	4b05      	ldr	r3, [pc, #20]	; (83784 <USART0_Handler+0x5c>)
   8376e:	701a      	strb	r2, [r3, #0]
   83770:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   83774:	b662      	cpsie	i
}
   83776:	b003      	add	sp, #12
   83778:	f85d fb04 	ldr.w	pc, [sp], #4
   8377c:	40098000 	.word	0x40098000
   83780:	00081535 	.word	0x00081535
   83784:	2007013c 	.word	0x2007013c
   83788:	20078529 	.word	0x20078529
   8378c:	20078528 	.word	0x20078528
   83790:	2007848c 	.word	0x2007848c

00083794 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   83794:	b5f0      	push	{r4, r5, r6, r7, lr}
   83796:	b083      	sub	sp, #12
   83798:	4604      	mov	r4, r0
   8379a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8379c:	2300      	movs	r3, #0
   8379e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   837a0:	4b1f      	ldr	r3, [pc, #124]	; (83820 <usart_serial_getchar+0x8c>)
   837a2:	4298      	cmp	r0, r3
   837a4:	d107      	bne.n	837b6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   837a6:	461f      	mov	r7, r3
   837a8:	4e1e      	ldr	r6, [pc, #120]	; (83824 <usart_serial_getchar+0x90>)
   837aa:	4638      	mov	r0, r7
   837ac:	4629      	mov	r1, r5
   837ae:	47b0      	blx	r6
   837b0:	2800      	cmp	r0, #0
   837b2:	d1fa      	bne.n	837aa <usart_serial_getchar+0x16>
   837b4:	e019      	b.n	837ea <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   837b6:	4b1c      	ldr	r3, [pc, #112]	; (83828 <usart_serial_getchar+0x94>)
   837b8:	4298      	cmp	r0, r3
   837ba:	d109      	bne.n	837d0 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   837bc:	461f      	mov	r7, r3
   837be:	4e1b      	ldr	r6, [pc, #108]	; (8382c <usart_serial_getchar+0x98>)
   837c0:	4638      	mov	r0, r7
   837c2:	a901      	add	r1, sp, #4
   837c4:	47b0      	blx	r6
   837c6:	2800      	cmp	r0, #0
   837c8:	d1fa      	bne.n	837c0 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   837ca:	9b01      	ldr	r3, [sp, #4]
   837cc:	702b      	strb	r3, [r5, #0]
   837ce:	e019      	b.n	83804 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   837d0:	4b17      	ldr	r3, [pc, #92]	; (83830 <usart_serial_getchar+0x9c>)
   837d2:	4298      	cmp	r0, r3
   837d4:	d109      	bne.n	837ea <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   837d6:	461e      	mov	r6, r3
   837d8:	4c14      	ldr	r4, [pc, #80]	; (8382c <usart_serial_getchar+0x98>)
   837da:	4630      	mov	r0, r6
   837dc:	a901      	add	r1, sp, #4
   837de:	47a0      	blx	r4
   837e0:	2800      	cmp	r0, #0
   837e2:	d1fa      	bne.n	837da <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   837e4:	9b01      	ldr	r3, [sp, #4]
   837e6:	702b      	strb	r3, [r5, #0]
   837e8:	e018      	b.n	8381c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   837ea:	4b12      	ldr	r3, [pc, #72]	; (83834 <usart_serial_getchar+0xa0>)
   837ec:	429c      	cmp	r4, r3
   837ee:	d109      	bne.n	83804 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   837f0:	461e      	mov	r6, r3
   837f2:	4c0e      	ldr	r4, [pc, #56]	; (8382c <usart_serial_getchar+0x98>)
   837f4:	4630      	mov	r0, r6
   837f6:	a901      	add	r1, sp, #4
   837f8:	47a0      	blx	r4
   837fa:	2800      	cmp	r0, #0
   837fc:	d1fa      	bne.n	837f4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   837fe:	9b01      	ldr	r3, [sp, #4]
   83800:	702b      	strb	r3, [r5, #0]
   83802:	e00b      	b.n	8381c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83804:	4b0c      	ldr	r3, [pc, #48]	; (83838 <usart_serial_getchar+0xa4>)
   83806:	429c      	cmp	r4, r3
   83808:	d108      	bne.n	8381c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8380a:	461e      	mov	r6, r3
   8380c:	4c07      	ldr	r4, [pc, #28]	; (8382c <usart_serial_getchar+0x98>)
   8380e:	4630      	mov	r0, r6
   83810:	a901      	add	r1, sp, #4
   83812:	47a0      	blx	r4
   83814:	2800      	cmp	r0, #0
   83816:	d1fa      	bne.n	8380e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   83818:	9b01      	ldr	r3, [sp, #4]
   8381a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8381c:	b003      	add	sp, #12
   8381e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83820:	400e0800 	.word	0x400e0800
   83824:	00081ee5 	.word	0x00081ee5
   83828:	40098000 	.word	0x40098000
   8382c:	00081f0d 	.word	0x00081f0d
   83830:	4009c000 	.word	0x4009c000
   83834:	400a0000 	.word	0x400a0000
   83838:	400a4000 	.word	0x400a4000

0008383c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8383c:	b570      	push	{r4, r5, r6, lr}
   8383e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   83840:	4b21      	ldr	r3, [pc, #132]	; (838c8 <usart_serial_putchar+0x8c>)
   83842:	4298      	cmp	r0, r3
   83844:	d107      	bne.n	83856 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   83846:	461e      	mov	r6, r3
   83848:	4d20      	ldr	r5, [pc, #128]	; (838cc <usart_serial_putchar+0x90>)
   8384a:	4630      	mov	r0, r6
   8384c:	4621      	mov	r1, r4
   8384e:	47a8      	blx	r5
   83850:	2800      	cmp	r0, #0
   83852:	d1fa      	bne.n	8384a <usart_serial_putchar+0xe>
   83854:	e02b      	b.n	838ae <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83856:	4b1e      	ldr	r3, [pc, #120]	; (838d0 <usart_serial_putchar+0x94>)
   83858:	4298      	cmp	r0, r3
   8385a:	d107      	bne.n	8386c <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   8385c:	461e      	mov	r6, r3
   8385e:	4d1d      	ldr	r5, [pc, #116]	; (838d4 <usart_serial_putchar+0x98>)
   83860:	4630      	mov	r0, r6
   83862:	4621      	mov	r1, r4
   83864:	47a8      	blx	r5
   83866:	2800      	cmp	r0, #0
   83868:	d1fa      	bne.n	83860 <usart_serial_putchar+0x24>
   8386a:	e022      	b.n	838b2 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8386c:	4b1a      	ldr	r3, [pc, #104]	; (838d8 <usart_serial_putchar+0x9c>)
   8386e:	4298      	cmp	r0, r3
   83870:	d107      	bne.n	83882 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   83872:	461e      	mov	r6, r3
   83874:	4d17      	ldr	r5, [pc, #92]	; (838d4 <usart_serial_putchar+0x98>)
   83876:	4630      	mov	r0, r6
   83878:	4621      	mov	r1, r4
   8387a:	47a8      	blx	r5
   8387c:	2800      	cmp	r0, #0
   8387e:	d1fa      	bne.n	83876 <usart_serial_putchar+0x3a>
   83880:	e019      	b.n	838b6 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   83882:	4b16      	ldr	r3, [pc, #88]	; (838dc <usart_serial_putchar+0xa0>)
   83884:	4298      	cmp	r0, r3
   83886:	d107      	bne.n	83898 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   83888:	461e      	mov	r6, r3
   8388a:	4d12      	ldr	r5, [pc, #72]	; (838d4 <usart_serial_putchar+0x98>)
   8388c:	4630      	mov	r0, r6
   8388e:	4621      	mov	r1, r4
   83890:	47a8      	blx	r5
   83892:	2800      	cmp	r0, #0
   83894:	d1fa      	bne.n	8388c <usart_serial_putchar+0x50>
   83896:	e010      	b.n	838ba <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83898:	4b11      	ldr	r3, [pc, #68]	; (838e0 <usart_serial_putchar+0xa4>)
   8389a:	4298      	cmp	r0, r3
   8389c:	d10f      	bne.n	838be <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8389e:	461e      	mov	r6, r3
   838a0:	4d0c      	ldr	r5, [pc, #48]	; (838d4 <usart_serial_putchar+0x98>)
   838a2:	4630      	mov	r0, r6
   838a4:	4621      	mov	r1, r4
   838a6:	47a8      	blx	r5
   838a8:	2800      	cmp	r0, #0
   838aa:	d1fa      	bne.n	838a2 <usart_serial_putchar+0x66>
   838ac:	e009      	b.n	838c2 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   838ae:	2001      	movs	r0, #1
   838b0:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   838b2:	2001      	movs	r0, #1
   838b4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   838b6:	2001      	movs	r0, #1
   838b8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   838ba:	2001      	movs	r0, #1
   838bc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   838be:	2000      	movs	r0, #0
   838c0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   838c2:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   838c4:	bd70      	pop	{r4, r5, r6, pc}
   838c6:	bf00      	nop
   838c8:	400e0800 	.word	0x400e0800
   838cc:	00081ed5 	.word	0x00081ed5
   838d0:	40098000 	.word	0x40098000
   838d4:	00081ef9 	.word	0x00081ef9
   838d8:	4009c000 	.word	0x4009c000
   838dc:	400a0000 	.word	0x400a0000
   838e0:	400a4000 	.word	0x400a4000

000838e4 <configureConsole>:
/**************************************
* Initializing terminal window.
**************************************/
int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   838e4:	b530      	push	{r4, r5, lr}
   838e6:	b085      	sub	sp, #20
   838e8:	2008      	movs	r0, #8
   838ea:	4d13      	ldr	r5, [pc, #76]	; (83938 <configureConsole+0x54>)
   838ec:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   838ee:	4c13      	ldr	r4, [pc, #76]	; (8393c <configureConsole+0x58>)
   838f0:	4b13      	ldr	r3, [pc, #76]	; (83940 <configureConsole+0x5c>)
   838f2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   838f4:	4a13      	ldr	r2, [pc, #76]	; (83944 <configureConsole+0x60>)
   838f6:	4b14      	ldr	r3, [pc, #80]	; (83948 <configureConsole+0x64>)
   838f8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   838fa:	4a14      	ldr	r2, [pc, #80]	; (8394c <configureConsole+0x68>)
   838fc:	4b14      	ldr	r3, [pc, #80]	; (83950 <configureConsole+0x6c>)
   838fe:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   83900:	4b14      	ldr	r3, [pc, #80]	; (83954 <configureConsole+0x70>)
   83902:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   83904:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   83908:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8390a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8390e:	9303      	str	r3, [sp, #12]
   83910:	2008      	movs	r0, #8
   83912:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   83914:	4620      	mov	r0, r4
   83916:	a901      	add	r1, sp, #4
   83918:	4b0f      	ldr	r3, [pc, #60]	; (83958 <configureConsole+0x74>)
   8391a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8391c:	4d0f      	ldr	r5, [pc, #60]	; (8395c <configureConsole+0x78>)
   8391e:	682b      	ldr	r3, [r5, #0]
   83920:	6898      	ldr	r0, [r3, #8]
   83922:	2100      	movs	r1, #0
   83924:	4c0e      	ldr	r4, [pc, #56]	; (83960 <configureConsole+0x7c>)
   83926:	47a0      	blx	r4
	setbuf(stdin, NULL);
   83928:	682b      	ldr	r3, [r5, #0]
   8392a:	6858      	ldr	r0, [r3, #4]
   8392c:	2100      	movs	r1, #0
   8392e:	47a0      	blx	r4
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);

	return 0;
}
   83930:	2000      	movs	r0, #0
   83932:	b005      	add	sp, #20
   83934:	bd30      	pop	{r4, r5, pc}
   83936:	bf00      	nop
   83938:	00081c49 	.word	0x00081c49
   8393c:	400e0800 	.word	0x400e0800
   83940:	200785b4 	.word	0x200785b4
   83944:	0008383d 	.word	0x0008383d
   83948:	200785b0 	.word	0x200785b0
   8394c:	00083795 	.word	0x00083795
   83950:	200785ac 	.word	0x200785ac
   83954:	0501bd00 	.word	0x0501bd00
   83958:	00081e9d 	.word	0x00081e9d
   8395c:	200701b0 	.word	0x200701b0
   83960:	00083ba1 	.word	0x00083ba1

00083964 <main>:
/**************************************************
* main method. Initialize every thing.
***************************************************/
int main (void)
{
   83964:	b510      	push	{r4, lr}
   83966:	b084      	sub	sp, #16
	// initializing A/D, PWM Time counter, Interrupts etc.
	sysclk_init();
   83968:	4b47      	ldr	r3, [pc, #284]	; (83a88 <main+0x124>)
   8396a:	4798      	blx	r3
	board_init();
   8396c:	4b47      	ldr	r3, [pc, #284]	; (83a8c <main+0x128>)
   8396e:	4798      	blx	r3
	analogInit();
   83970:	4b47      	ldr	r3, [pc, #284]	; (83a90 <main+0x12c>)
   83972:	4798      	blx	r3
	setupUART();
   83974:	4b47      	ldr	r3, [pc, #284]	; (83a94 <main+0x130>)
   83976:	4798      	blx	r3
	configureConsole();
   83978:	4b47      	ldr	r3, [pc, #284]	; (83a98 <main+0x134>)
   8397a:	4798      	blx	r3
	configure_tc_LeftWheel();
   8397c:	4b47      	ldr	r3, [pc, #284]	; (83a9c <main+0x138>)
   8397e:	4798      	blx	r3
	configure_tc_RightWheel();
   83980:	4b47      	ldr	r3, [pc, #284]	; (83aa0 <main+0x13c>)
   83982:	4798      	blx	r3
	configure_interrupt_pio_LeftWheel();
   83984:	4b47      	ldr	r3, [pc, #284]	; (83aa4 <main+0x140>)
   83986:	4798      	blx	r3
	configure_interrupt_pio_RightWheel();
   83988:	4b47      	ldr	r3, [pc, #284]	; (83aa8 <main+0x144>)
   8398a:	4798      	blx	r3
	PWMInit();
   8398c:	4b47      	ldr	r3, [pc, #284]	; (83aac <main+0x148>)
   8398e:	4798      	blx	r3

	/*Start every Task*/
	if (xTaskCreate(TaskDriveLeftRight, (const signed char * const) "TaskDrive", 1024, NULL, 2, NULL) != pdPASS){
   83990:	2302      	movs	r3, #2
   83992:	9300      	str	r3, [sp, #0]
   83994:	2300      	movs	r3, #0
   83996:	9301      	str	r3, [sp, #4]
   83998:	9302      	str	r3, [sp, #8]
   8399a:	9303      	str	r3, [sp, #12]
   8399c:	4844      	ldr	r0, [pc, #272]	; (83ab0 <main+0x14c>)
   8399e:	4945      	ldr	r1, [pc, #276]	; (83ab4 <main+0x150>)
   839a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   839a4:	4c44      	ldr	r4, [pc, #272]	; (83ab8 <main+0x154>)
   839a6:	47a0      	blx	r4
   839a8:	2801      	cmp	r0, #1
   839aa:	d002      	beq.n	839b2 <main+0x4e>
		printf("Failed to create TaskDriveLeftRight\n");
   839ac:	4843      	ldr	r0, [pc, #268]	; (83abc <main+0x158>)
   839ae:	4b44      	ldr	r3, [pc, #272]	; (83ac0 <main+0x15c>)
   839b0:	4798      	blx	r3
	}
	if (xTaskCreate(TaskMatLab, (const signed char * const) "TaskMatlab", 1024, NULL, 1, NULL) != pdPASS){
   839b2:	2301      	movs	r3, #1
   839b4:	9300      	str	r3, [sp, #0]
   839b6:	2300      	movs	r3, #0
   839b8:	9301      	str	r3, [sp, #4]
   839ba:	9302      	str	r3, [sp, #8]
   839bc:	9303      	str	r3, [sp, #12]
   839be:	4841      	ldr	r0, [pc, #260]	; (83ac4 <main+0x160>)
   839c0:	4941      	ldr	r1, [pc, #260]	; (83ac8 <main+0x164>)
   839c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   839c6:	4c3c      	ldr	r4, [pc, #240]	; (83ab8 <main+0x154>)
   839c8:	47a0      	blx	r4
   839ca:	2801      	cmp	r0, #1
   839cc:	d002      	beq.n	839d4 <main+0x70>
		printf("Failed to create TaskDriveForward\n");
   839ce:	483f      	ldr	r0, [pc, #252]	; (83acc <main+0x168>)
   839d0:	4b3b      	ldr	r3, [pc, #236]	; (83ac0 <main+0x15c>)
   839d2:	4798      	blx	r3
	}
	if (xTaskCreate(TaskPIDLeft, (const signed char * const) "TaskPIDLeft", 1024, NULL, 3, NULL) != pdPASS){
   839d4:	2303      	movs	r3, #3
   839d6:	9300      	str	r3, [sp, #0]
   839d8:	2300      	movs	r3, #0
   839da:	9301      	str	r3, [sp, #4]
   839dc:	9302      	str	r3, [sp, #8]
   839de:	9303      	str	r3, [sp, #12]
   839e0:	483b      	ldr	r0, [pc, #236]	; (83ad0 <main+0x16c>)
   839e2:	493c      	ldr	r1, [pc, #240]	; (83ad4 <main+0x170>)
   839e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   839e8:	4c33      	ldr	r4, [pc, #204]	; (83ab8 <main+0x154>)
   839ea:	47a0      	blx	r4
   839ec:	2801      	cmp	r0, #1
   839ee:	d002      	beq.n	839f6 <main+0x92>
		printf("Failed to create TaskDriveForward\n");
   839f0:	4836      	ldr	r0, [pc, #216]	; (83acc <main+0x168>)
   839f2:	4b33      	ldr	r3, [pc, #204]	; (83ac0 <main+0x15c>)
   839f4:	4798      	blx	r3
	}
	if (xTaskCreate(TaskPIDRight, (const signed char * const) "TaskPIDRight", 1024, NULL, 3, NULL) != pdPASS){
   839f6:	2303      	movs	r3, #3
   839f8:	9300      	str	r3, [sp, #0]
   839fa:	2300      	movs	r3, #0
   839fc:	9301      	str	r3, [sp, #4]
   839fe:	9302      	str	r3, [sp, #8]
   83a00:	9303      	str	r3, [sp, #12]
   83a02:	4835      	ldr	r0, [pc, #212]	; (83ad8 <main+0x174>)
   83a04:	4935      	ldr	r1, [pc, #212]	; (83adc <main+0x178>)
   83a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83a0a:	4c2b      	ldr	r4, [pc, #172]	; (83ab8 <main+0x154>)
   83a0c:	47a0      	blx	r4
   83a0e:	2801      	cmp	r0, #1
   83a10:	d002      	beq.n	83a18 <main+0xb4>
		printf("Failed to create TaskDriveForward\n");
   83a12:	482e      	ldr	r0, [pc, #184]	; (83acc <main+0x168>)
   83a14:	4b2a      	ldr	r3, [pc, #168]	; (83ac0 <main+0x15c>)
   83a16:	4798      	blx	r3
	}
	if (xTaskCreate(TaskCalculateLeftWheel, (const signed char * const) "TaskCalcLeft", 1024, NULL, 4, NULL) != pdPASS){
   83a18:	2304      	movs	r3, #4
   83a1a:	9300      	str	r3, [sp, #0]
   83a1c:	2300      	movs	r3, #0
   83a1e:	9301      	str	r3, [sp, #4]
   83a20:	9302      	str	r3, [sp, #8]
   83a22:	9303      	str	r3, [sp, #12]
   83a24:	482e      	ldr	r0, [pc, #184]	; (83ae0 <main+0x17c>)
   83a26:	492f      	ldr	r1, [pc, #188]	; (83ae4 <main+0x180>)
   83a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83a2c:	4c22      	ldr	r4, [pc, #136]	; (83ab8 <main+0x154>)
   83a2e:	47a0      	blx	r4
   83a30:	2801      	cmp	r0, #1
   83a32:	d002      	beq.n	83a3a <main+0xd6>
		printf("Failed to create TaskCalculateLeftWheel\n");
   83a34:	482c      	ldr	r0, [pc, #176]	; (83ae8 <main+0x184>)
   83a36:	4b22      	ldr	r3, [pc, #136]	; (83ac0 <main+0x15c>)
   83a38:	4798      	blx	r3
	}
	if (xTaskCreate(TaskCalculateRightWheel, (const signed char * const) "TaskCalcRight", 1024, NULL, 4, NULL) != pdPASS){
   83a3a:	2304      	movs	r3, #4
   83a3c:	9300      	str	r3, [sp, #0]
   83a3e:	2300      	movs	r3, #0
   83a40:	9301      	str	r3, [sp, #4]
   83a42:	9302      	str	r3, [sp, #8]
   83a44:	9303      	str	r3, [sp, #12]
   83a46:	4829      	ldr	r0, [pc, #164]	; (83aec <main+0x188>)
   83a48:	4929      	ldr	r1, [pc, #164]	; (83af0 <main+0x18c>)
   83a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83a4e:	4c1a      	ldr	r4, [pc, #104]	; (83ab8 <main+0x154>)
   83a50:	47a0      	blx	r4
   83a52:	2801      	cmp	r0, #1
   83a54:	d002      	beq.n	83a5c <main+0xf8>
		printf("Failed to create TaskCalculateLeftWheel\n");
   83a56:	4824      	ldr	r0, [pc, #144]	; (83ae8 <main+0x184>)
   83a58:	4b19      	ldr	r3, [pc, #100]	; (83ac0 <main+0x15c>)
   83a5a:	4798      	blx	r3
	}
	if (xTaskCreate(TaskUltraLjud, (const signed char * const) "TaskUltra", 1024, NULL, 1, NULL) != pdPASS){
   83a5c:	2301      	movs	r3, #1
   83a5e:	9300      	str	r3, [sp, #0]
   83a60:	2300      	movs	r3, #0
   83a62:	9301      	str	r3, [sp, #4]
   83a64:	9302      	str	r3, [sp, #8]
   83a66:	9303      	str	r3, [sp, #12]
   83a68:	4822      	ldr	r0, [pc, #136]	; (83af4 <main+0x190>)
   83a6a:	4923      	ldr	r1, [pc, #140]	; (83af8 <main+0x194>)
   83a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83a70:	4c11      	ldr	r4, [pc, #68]	; (83ab8 <main+0x154>)
   83a72:	47a0      	blx	r4
   83a74:	2801      	cmp	r0, #1
   83a76:	d002      	beq.n	83a7e <main+0x11a>
		printf("Failed to create TaskCalculateLeftWheel\n");
   83a78:	481b      	ldr	r0, [pc, #108]	; (83ae8 <main+0x184>)
   83a7a:	4b11      	ldr	r3, [pc, #68]	; (83ac0 <main+0x15c>)
   83a7c:	4798      	blx	r3
	}
	
	vTaskStartScheduler();
   83a7e:	4b1f      	ldr	r3, [pc, #124]	; (83afc <main+0x198>)
   83a80:	4798      	blx	r3
}
   83a82:	2000      	movs	r0, #0
   83a84:	b004      	add	sp, #16
   83a86:	bd10      	pop	{r4, pc}
   83a88:	000814d1 	.word	0x000814d1
   83a8c:	0008168d 	.word	0x0008168d
   83a90:	00081421 	.word	0x00081421
   83a94:	00080411 	.word	0x00080411
   83a98:	000838e5 	.word	0x000838e5
   83a9c:	00080181 	.word	0x00080181
   83aa0:	0008024d 	.word	0x0008024d
   83aa4:	000801b9 	.word	0x000801b9
   83aa8:	00080285 	.word	0x00080285
   83aac:	0008037d 	.word	0x0008037d
   83ab0:	00080e15 	.word	0x00080e15
   83ab4:	00087174 	.word	0x00087174
   83ab8:	00082a31 	.word	0x00082a31
   83abc:	00087180 	.word	0x00087180
   83ac0:	00083b71 	.word	0x00083b71
   83ac4:	00080479 	.word	0x00080479
   83ac8:	000871a8 	.word	0x000871a8
   83acc:	000871b4 	.word	0x000871b4
   83ad0:	00081271 	.word	0x00081271
   83ad4:	000871d8 	.word	0x000871d8
   83ad8:	00080781 	.word	0x00080781
   83adc:	000871e4 	.word	0x000871e4
   83ae0:	00080ba9 	.word	0x00080ba9
   83ae4:	000871f4 	.word	0x000871f4
   83ae8:	00087204 	.word	0x00087204
   83aec:	00080cdd 	.word	0x00080cdd
   83af0:	00087230 	.word	0x00087230
   83af4:	00080931 	.word	0x00080931
   83af8:	00087240 	.word	0x00087240
   83afc:	00082c39 	.word	0x00082c39

00083b00 <__libc_init_array>:
   83b00:	b570      	push	{r4, r5, r6, lr}
   83b02:	4b0e      	ldr	r3, [pc, #56]	; (83b3c <__libc_init_array+0x3c>)
   83b04:	4d0e      	ldr	r5, [pc, #56]	; (83b40 <__libc_init_array+0x40>)
   83b06:	2400      	movs	r4, #0
   83b08:	1aed      	subs	r5, r5, r3
   83b0a:	10ad      	asrs	r5, r5, #2
   83b0c:	461e      	mov	r6, r3
   83b0e:	42ac      	cmp	r4, r5
   83b10:	d004      	beq.n	83b1c <__libc_init_array+0x1c>
   83b12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   83b16:	4790      	blx	r2
   83b18:	3401      	adds	r4, #1
   83b1a:	e7f8      	b.n	83b0e <__libc_init_array+0xe>
   83b1c:	f003 fc76 	bl	8740c <_init>
   83b20:	4d08      	ldr	r5, [pc, #32]	; (83b44 <__libc_init_array+0x44>)
   83b22:	4b09      	ldr	r3, [pc, #36]	; (83b48 <__libc_init_array+0x48>)
   83b24:	2400      	movs	r4, #0
   83b26:	1aed      	subs	r5, r5, r3
   83b28:	10ad      	asrs	r5, r5, #2
   83b2a:	461e      	mov	r6, r3
   83b2c:	42ac      	cmp	r4, r5
   83b2e:	d004      	beq.n	83b3a <__libc_init_array+0x3a>
   83b30:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   83b34:	4790      	blx	r2
   83b36:	3401      	adds	r4, #1
   83b38:	e7f8      	b.n	83b2c <__libc_init_array+0x2c>
   83b3a:	bd70      	pop	{r4, r5, r6, pc}
   83b3c:	00087418 	.word	0x00087418
   83b40:	00087418 	.word	0x00087418
   83b44:	0008741c 	.word	0x0008741c
   83b48:	00087418 	.word	0x00087418

00083b4c <memcpy>:
   83b4c:	b510      	push	{r4, lr}
   83b4e:	2300      	movs	r3, #0
   83b50:	4293      	cmp	r3, r2
   83b52:	d003      	beq.n	83b5c <memcpy+0x10>
   83b54:	5ccc      	ldrb	r4, [r1, r3]
   83b56:	54c4      	strb	r4, [r0, r3]
   83b58:	3301      	adds	r3, #1
   83b5a:	e7f9      	b.n	83b50 <memcpy+0x4>
   83b5c:	bd10      	pop	{r4, pc}

00083b5e <memset>:
   83b5e:	4402      	add	r2, r0
   83b60:	4603      	mov	r3, r0
   83b62:	4293      	cmp	r3, r2
   83b64:	d002      	beq.n	83b6c <memset+0xe>
   83b66:	f803 1b01 	strb.w	r1, [r3], #1
   83b6a:	e7fa      	b.n	83b62 <memset+0x4>
   83b6c:	4770      	bx	lr
	...

00083b70 <iprintf>:
   83b70:	b40f      	push	{r0, r1, r2, r3}
   83b72:	4b0a      	ldr	r3, [pc, #40]	; (83b9c <iprintf+0x2c>)
   83b74:	b513      	push	{r0, r1, r4, lr}
   83b76:	681c      	ldr	r4, [r3, #0]
   83b78:	b124      	cbz	r4, 83b84 <iprintf+0x14>
   83b7a:	69a3      	ldr	r3, [r4, #24]
   83b7c:	b913      	cbnz	r3, 83b84 <iprintf+0x14>
   83b7e:	4620      	mov	r0, r4
   83b80:	f001 fe20 	bl	857c4 <__sinit>
   83b84:	ab05      	add	r3, sp, #20
   83b86:	4620      	mov	r0, r4
   83b88:	68a1      	ldr	r1, [r4, #8]
   83b8a:	9a04      	ldr	r2, [sp, #16]
   83b8c:	9301      	str	r3, [sp, #4]
   83b8e:	f000 f8d9 	bl	83d44 <_vfiprintf_r>
   83b92:	b002      	add	sp, #8
   83b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83b98:	b004      	add	sp, #16
   83b9a:	4770      	bx	lr
   83b9c:	200701b0 	.word	0x200701b0

00083ba0 <setbuf>:
   83ba0:	2900      	cmp	r1, #0
   83ba2:	bf0c      	ite	eq
   83ba4:	2202      	moveq	r2, #2
   83ba6:	2200      	movne	r2, #0
   83ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83bac:	f000 b800 	b.w	83bb0 <setvbuf>

00083bb0 <setvbuf>:
   83bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83bb4:	461e      	mov	r6, r3
   83bb6:	4b3d      	ldr	r3, [pc, #244]	; (83cac <setvbuf+0xfc>)
   83bb8:	4604      	mov	r4, r0
   83bba:	681d      	ldr	r5, [r3, #0]
   83bbc:	460f      	mov	r7, r1
   83bbe:	4690      	mov	r8, r2
   83bc0:	b125      	cbz	r5, 83bcc <setvbuf+0x1c>
   83bc2:	69ab      	ldr	r3, [r5, #24]
   83bc4:	b913      	cbnz	r3, 83bcc <setvbuf+0x1c>
   83bc6:	4628      	mov	r0, r5
   83bc8:	f001 fdfc 	bl	857c4 <__sinit>
   83bcc:	4b38      	ldr	r3, [pc, #224]	; (83cb0 <setvbuf+0x100>)
   83bce:	429c      	cmp	r4, r3
   83bd0:	d101      	bne.n	83bd6 <setvbuf+0x26>
   83bd2:	686c      	ldr	r4, [r5, #4]
   83bd4:	e008      	b.n	83be8 <setvbuf+0x38>
   83bd6:	4b37      	ldr	r3, [pc, #220]	; (83cb4 <setvbuf+0x104>)
   83bd8:	429c      	cmp	r4, r3
   83bda:	d101      	bne.n	83be0 <setvbuf+0x30>
   83bdc:	68ac      	ldr	r4, [r5, #8]
   83bde:	e003      	b.n	83be8 <setvbuf+0x38>
   83be0:	4b35      	ldr	r3, [pc, #212]	; (83cb8 <setvbuf+0x108>)
   83be2:	429c      	cmp	r4, r3
   83be4:	bf08      	it	eq
   83be6:	68ec      	ldreq	r4, [r5, #12]
   83be8:	f1b8 0f02 	cmp.w	r8, #2
   83bec:	d859      	bhi.n	83ca2 <setvbuf+0xf2>
   83bee:	2e00      	cmp	r6, #0
   83bf0:	db57      	blt.n	83ca2 <setvbuf+0xf2>
   83bf2:	4628      	mov	r0, r5
   83bf4:	4621      	mov	r1, r4
   83bf6:	f001 fd67 	bl	856c8 <_fflush_r>
   83bfa:	2300      	movs	r3, #0
   83bfc:	6063      	str	r3, [r4, #4]
   83bfe:	61a3      	str	r3, [r4, #24]
   83c00:	89a3      	ldrh	r3, [r4, #12]
   83c02:	061b      	lsls	r3, r3, #24
   83c04:	d503      	bpl.n	83c0e <setvbuf+0x5e>
   83c06:	4628      	mov	r0, r5
   83c08:	6921      	ldr	r1, [r4, #16]
   83c0a:	f002 f99d 	bl	85f48 <_free_r>
   83c0e:	89a3      	ldrh	r3, [r4, #12]
   83c10:	f1b8 0f02 	cmp.w	r8, #2
   83c14:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83c18:	81a3      	strh	r3, [r4, #12]
   83c1a:	d012      	beq.n	83c42 <setvbuf+0x92>
   83c1c:	bb37      	cbnz	r7, 83c6c <setvbuf+0xbc>
   83c1e:	2e00      	cmp	r6, #0
   83c20:	bf08      	it	eq
   83c22:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   83c26:	4630      	mov	r0, r6
   83c28:	f001 fe86 	bl	85938 <malloc>
   83c2c:	4607      	mov	r7, r0
   83c2e:	b9c8      	cbnz	r0, 83c64 <setvbuf+0xb4>
   83c30:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83c34:	f001 fe80 	bl	85938 <malloc>
   83c38:	4607      	mov	r7, r0
   83c3a:	b988      	cbnz	r0, 83c60 <setvbuf+0xb0>
   83c3c:	f04f 30ff 	mov.w	r0, #4294967295
   83c40:	e000      	b.n	83c44 <setvbuf+0x94>
   83c42:	2000      	movs	r0, #0
   83c44:	89a3      	ldrh	r3, [r4, #12]
   83c46:	f043 0302 	orr.w	r3, r3, #2
   83c4a:	81a3      	strh	r3, [r4, #12]
   83c4c:	2300      	movs	r3, #0
   83c4e:	60a3      	str	r3, [r4, #8]
   83c50:	f104 0347 	add.w	r3, r4, #71	; 0x47
   83c54:	6023      	str	r3, [r4, #0]
   83c56:	6123      	str	r3, [r4, #16]
   83c58:	2301      	movs	r3, #1
   83c5a:	6163      	str	r3, [r4, #20]
   83c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c60:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83c64:	89a3      	ldrh	r3, [r4, #12]
   83c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83c6a:	81a3      	strh	r3, [r4, #12]
   83c6c:	f1b8 0f01 	cmp.w	r8, #1
   83c70:	d105      	bne.n	83c7e <setvbuf+0xce>
   83c72:	89a3      	ldrh	r3, [r4, #12]
   83c74:	f043 0301 	orr.w	r3, r3, #1
   83c78:	81a3      	strh	r3, [r4, #12]
   83c7a:	4273      	negs	r3, r6
   83c7c:	61a3      	str	r3, [r4, #24]
   83c7e:	4b0f      	ldr	r3, [pc, #60]	; (83cbc <setvbuf+0x10c>)
   83c80:	62ab      	str	r3, [r5, #40]	; 0x28
   83c82:	89a3      	ldrh	r3, [r4, #12]
   83c84:	6027      	str	r7, [r4, #0]
   83c86:	f003 0008 	and.w	r0, r3, #8
   83c8a:	b280      	uxth	r0, r0
   83c8c:	6127      	str	r7, [r4, #16]
   83c8e:	6166      	str	r6, [r4, #20]
   83c90:	b148      	cbz	r0, 83ca6 <setvbuf+0xf6>
   83c92:	f013 0f03 	tst.w	r3, #3
   83c96:	bf18      	it	ne
   83c98:	2600      	movne	r6, #0
   83c9a:	60a6      	str	r6, [r4, #8]
   83c9c:	2000      	movs	r0, #0
   83c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83ca2:	f04f 30ff 	mov.w	r0, #4294967295
   83ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83caa:	bf00      	nop
   83cac:	200701b0 	.word	0x200701b0
   83cb0:	000872a8 	.word	0x000872a8
   83cb4:	000872c8 	.word	0x000872c8
   83cb8:	000872e8 	.word	0x000872e8
   83cbc:	0008571d 	.word	0x0008571d

00083cc0 <strlen>:
   83cc0:	4603      	mov	r3, r0
   83cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
   83cc6:	2a00      	cmp	r2, #0
   83cc8:	d1fb      	bne.n	83cc2 <strlen+0x2>
   83cca:	1a18      	subs	r0, r3, r0
   83ccc:	3801      	subs	r0, #1
   83cce:	4770      	bx	lr

00083cd0 <strncpy>:
   83cd0:	b510      	push	{r4, lr}
   83cd2:	4603      	mov	r3, r0
   83cd4:	b132      	cbz	r2, 83ce4 <strncpy+0x14>
   83cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
   83cda:	3a01      	subs	r2, #1
   83cdc:	f803 4b01 	strb.w	r4, [r3], #1
   83ce0:	2c00      	cmp	r4, #0
   83ce2:	d1f7      	bne.n	83cd4 <strncpy+0x4>
   83ce4:	441a      	add	r2, r3
   83ce6:	4293      	cmp	r3, r2
   83ce8:	d003      	beq.n	83cf2 <strncpy+0x22>
   83cea:	2100      	movs	r1, #0
   83cec:	f803 1b01 	strb.w	r1, [r3], #1
   83cf0:	e7f9      	b.n	83ce6 <strncpy+0x16>
   83cf2:	bd10      	pop	{r4, pc}

00083cf4 <__sfputc_r>:
   83cf4:	6893      	ldr	r3, [r2, #8]
   83cf6:	b510      	push	{r4, lr}
   83cf8:	3b01      	subs	r3, #1
   83cfa:	2b00      	cmp	r3, #0
   83cfc:	6093      	str	r3, [r2, #8]
   83cfe:	da05      	bge.n	83d0c <__sfputc_r+0x18>
   83d00:	6994      	ldr	r4, [r2, #24]
   83d02:	42a3      	cmp	r3, r4
   83d04:	db08      	blt.n	83d18 <__sfputc_r+0x24>
   83d06:	b2cb      	uxtb	r3, r1
   83d08:	2b0a      	cmp	r3, #10
   83d0a:	d005      	beq.n	83d18 <__sfputc_r+0x24>
   83d0c:	6813      	ldr	r3, [r2, #0]
   83d0e:	1c58      	adds	r0, r3, #1
   83d10:	6010      	str	r0, [r2, #0]
   83d12:	7019      	strb	r1, [r3, #0]
   83d14:	b2c8      	uxtb	r0, r1
   83d16:	bd10      	pop	{r4, pc}
   83d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83d1c:	f000 bd3e 	b.w	8479c <__swbuf_r>

00083d20 <__sfputs_r>:
   83d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83d22:	4605      	mov	r5, r0
   83d24:	460e      	mov	r6, r1
   83d26:	4614      	mov	r4, r2
   83d28:	18d7      	adds	r7, r2, r3
   83d2a:	42bc      	cmp	r4, r7
   83d2c:	d008      	beq.n	83d40 <__sfputs_r+0x20>
   83d2e:	4628      	mov	r0, r5
   83d30:	f814 1b01 	ldrb.w	r1, [r4], #1
   83d34:	4632      	mov	r2, r6
   83d36:	f7ff ffdd 	bl	83cf4 <__sfputc_r>
   83d3a:	1c43      	adds	r3, r0, #1
   83d3c:	d1f5      	bne.n	83d2a <__sfputs_r+0xa>
   83d3e:	e000      	b.n	83d42 <__sfputs_r+0x22>
   83d40:	2000      	movs	r0, #0
   83d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00083d44 <_vfiprintf_r>:
   83d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83d48:	b09d      	sub	sp, #116	; 0x74
   83d4a:	460d      	mov	r5, r1
   83d4c:	4617      	mov	r7, r2
   83d4e:	9303      	str	r3, [sp, #12]
   83d50:	4606      	mov	r6, r0
   83d52:	b118      	cbz	r0, 83d5c <_vfiprintf_r+0x18>
   83d54:	6983      	ldr	r3, [r0, #24]
   83d56:	b90b      	cbnz	r3, 83d5c <_vfiprintf_r+0x18>
   83d58:	f001 fd34 	bl	857c4 <__sinit>
   83d5c:	4b73      	ldr	r3, [pc, #460]	; (83f2c <_vfiprintf_r+0x1e8>)
   83d5e:	429d      	cmp	r5, r3
   83d60:	d101      	bne.n	83d66 <_vfiprintf_r+0x22>
   83d62:	6875      	ldr	r5, [r6, #4]
   83d64:	e008      	b.n	83d78 <_vfiprintf_r+0x34>
   83d66:	4b72      	ldr	r3, [pc, #456]	; (83f30 <_vfiprintf_r+0x1ec>)
   83d68:	429d      	cmp	r5, r3
   83d6a:	d101      	bne.n	83d70 <_vfiprintf_r+0x2c>
   83d6c:	68b5      	ldr	r5, [r6, #8]
   83d6e:	e003      	b.n	83d78 <_vfiprintf_r+0x34>
   83d70:	4b70      	ldr	r3, [pc, #448]	; (83f34 <_vfiprintf_r+0x1f0>)
   83d72:	429d      	cmp	r5, r3
   83d74:	bf08      	it	eq
   83d76:	68f5      	ldreq	r5, [r6, #12]
   83d78:	89ab      	ldrh	r3, [r5, #12]
   83d7a:	0718      	lsls	r0, r3, #28
   83d7c:	d50a      	bpl.n	83d94 <_vfiprintf_r+0x50>
   83d7e:	692b      	ldr	r3, [r5, #16]
   83d80:	b143      	cbz	r3, 83d94 <_vfiprintf_r+0x50>
   83d82:	2300      	movs	r3, #0
   83d84:	9309      	str	r3, [sp, #36]	; 0x24
   83d86:	2320      	movs	r3, #32
   83d88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   83d8c:	2330      	movs	r3, #48	; 0x30
   83d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   83d92:	e038      	b.n	83e06 <_vfiprintf_r+0xc2>
   83d94:	4630      	mov	r0, r6
   83d96:	4629      	mov	r1, r5
   83d98:	f000 fd54 	bl	84844 <__swsetup_r>
   83d9c:	2800      	cmp	r0, #0
   83d9e:	d0f0      	beq.n	83d82 <_vfiprintf_r+0x3e>
   83da0:	f04f 30ff 	mov.w	r0, #4294967295
   83da4:	e0be      	b.n	83f24 <_vfiprintf_r+0x1e0>
   83da6:	9a03      	ldr	r2, [sp, #12]
   83da8:	1d11      	adds	r1, r2, #4
   83daa:	6812      	ldr	r2, [r2, #0]
   83dac:	9103      	str	r1, [sp, #12]
   83dae:	2a00      	cmp	r2, #0
   83db0:	db70      	blt.n	83e94 <_vfiprintf_r+0x150>
   83db2:	9207      	str	r2, [sp, #28]
   83db4:	3401      	adds	r4, #1
   83db6:	7823      	ldrb	r3, [r4, #0]
   83db8:	2b2e      	cmp	r3, #46	; 0x2e
   83dba:	d07d      	beq.n	83eb8 <_vfiprintf_r+0x174>
   83dbc:	4f5e      	ldr	r7, [pc, #376]	; (83f38 <_vfiprintf_r+0x1f4>)
   83dbe:	7821      	ldrb	r1, [r4, #0]
   83dc0:	4638      	mov	r0, r7
   83dc2:	2203      	movs	r2, #3
   83dc4:	f001 fdc0 	bl	85948 <memchr>
   83dc8:	b130      	cbz	r0, 83dd8 <_vfiprintf_r+0x94>
   83dca:	1bc7      	subs	r7, r0, r7
   83dcc:	2040      	movs	r0, #64	; 0x40
   83dce:	40b8      	lsls	r0, r7
   83dd0:	9b04      	ldr	r3, [sp, #16]
   83dd2:	3401      	adds	r4, #1
   83dd4:	4303      	orrs	r3, r0
   83dd6:	9304      	str	r3, [sp, #16]
   83dd8:	7821      	ldrb	r1, [r4, #0]
   83dda:	4858      	ldr	r0, [pc, #352]	; (83f3c <_vfiprintf_r+0x1f8>)
   83ddc:	2206      	movs	r2, #6
   83dde:	1c67      	adds	r7, r4, #1
   83de0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   83de4:	f001 fdb0 	bl	85948 <memchr>
   83de8:	2800      	cmp	r0, #0
   83dea:	f000 8089 	beq.w	83f00 <_vfiprintf_r+0x1bc>
   83dee:	4b54      	ldr	r3, [pc, #336]	; (83f40 <_vfiprintf_r+0x1fc>)
   83df0:	2b00      	cmp	r3, #0
   83df2:	d17c      	bne.n	83eee <_vfiprintf_r+0x1aa>
   83df4:	9b03      	ldr	r3, [sp, #12]
   83df6:	3307      	adds	r3, #7
   83df8:	f023 0307 	bic.w	r3, r3, #7
   83dfc:	3308      	adds	r3, #8
   83dfe:	9303      	str	r3, [sp, #12]
   83e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83e02:	4443      	add	r3, r8
   83e04:	9309      	str	r3, [sp, #36]	; 0x24
   83e06:	463b      	mov	r3, r7
   83e08:	461c      	mov	r4, r3
   83e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   83e0e:	b91a      	cbnz	r2, 83e18 <_vfiprintf_r+0xd4>
   83e10:	ebb4 0907 	subs.w	r9, r4, r7
   83e14:	d00e      	beq.n	83e34 <_vfiprintf_r+0xf0>
   83e16:	e002      	b.n	83e1e <_vfiprintf_r+0xda>
   83e18:	2a25      	cmp	r2, #37	; 0x25
   83e1a:	d1f5      	bne.n	83e08 <_vfiprintf_r+0xc4>
   83e1c:	e7f8      	b.n	83e10 <_vfiprintf_r+0xcc>
   83e1e:	4630      	mov	r0, r6
   83e20:	4629      	mov	r1, r5
   83e22:	463a      	mov	r2, r7
   83e24:	464b      	mov	r3, r9
   83e26:	f7ff ff7b 	bl	83d20 <__sfputs_r>
   83e2a:	3001      	adds	r0, #1
   83e2c:	d075      	beq.n	83f1a <_vfiprintf_r+0x1d6>
   83e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83e30:	444b      	add	r3, r9
   83e32:	9309      	str	r3, [sp, #36]	; 0x24
   83e34:	7823      	ldrb	r3, [r4, #0]
   83e36:	2b00      	cmp	r3, #0
   83e38:	d06f      	beq.n	83f1a <_vfiprintf_r+0x1d6>
   83e3a:	2300      	movs	r3, #0
   83e3c:	f04f 32ff 	mov.w	r2, #4294967295
   83e40:	9304      	str	r3, [sp, #16]
   83e42:	9307      	str	r3, [sp, #28]
   83e44:	9205      	str	r2, [sp, #20]
   83e46:	9306      	str	r3, [sp, #24]
   83e48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   83e4c:	931a      	str	r3, [sp, #104]	; 0x68
   83e4e:	f104 0901 	add.w	r9, r4, #1
   83e52:	4f3c      	ldr	r7, [pc, #240]	; (83f44 <_vfiprintf_r+0x200>)
   83e54:	464c      	mov	r4, r9
   83e56:	4638      	mov	r0, r7
   83e58:	7821      	ldrb	r1, [r4, #0]
   83e5a:	2205      	movs	r2, #5
   83e5c:	f001 fd74 	bl	85948 <memchr>
   83e60:	f109 0901 	add.w	r9, r9, #1
   83e64:	9b04      	ldr	r3, [sp, #16]
   83e66:	b128      	cbz	r0, 83e74 <_vfiprintf_r+0x130>
   83e68:	1bc7      	subs	r7, r0, r7
   83e6a:	2001      	movs	r0, #1
   83e6c:	40b8      	lsls	r0, r7
   83e6e:	4303      	orrs	r3, r0
   83e70:	9304      	str	r3, [sp, #16]
   83e72:	e7ee      	b.n	83e52 <_vfiprintf_r+0x10e>
   83e74:	06d9      	lsls	r1, r3, #27
   83e76:	bf44      	itt	mi
   83e78:	2220      	movmi	r2, #32
   83e7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   83e7e:	071a      	lsls	r2, r3, #28
   83e80:	bf44      	itt	mi
   83e82:	222b      	movmi	r2, #43	; 0x2b
   83e84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   83e88:	7822      	ldrb	r2, [r4, #0]
   83e8a:	2a2a      	cmp	r2, #42	; 0x2a
   83e8c:	d08b      	beq.n	83da6 <_vfiprintf_r+0x62>
   83e8e:	9b07      	ldr	r3, [sp, #28]
   83e90:	4621      	mov	r1, r4
   83e92:	e005      	b.n	83ea0 <_vfiprintf_r+0x15c>
   83e94:	4252      	negs	r2, r2
   83e96:	f043 0302 	orr.w	r3, r3, #2
   83e9a:	9207      	str	r2, [sp, #28]
   83e9c:	9304      	str	r3, [sp, #16]
   83e9e:	e789      	b.n	83db4 <_vfiprintf_r+0x70>
   83ea0:	460c      	mov	r4, r1
   83ea2:	7822      	ldrb	r2, [r4, #0]
   83ea4:	3101      	adds	r1, #1
   83ea6:	3a30      	subs	r2, #48	; 0x30
   83ea8:	2a09      	cmp	r2, #9
   83eaa:	d803      	bhi.n	83eb4 <_vfiprintf_r+0x170>
   83eac:	200a      	movs	r0, #10
   83eae:	fb00 2303 	mla	r3, r0, r3, r2
   83eb2:	e7f5      	b.n	83ea0 <_vfiprintf_r+0x15c>
   83eb4:	9307      	str	r3, [sp, #28]
   83eb6:	e77e      	b.n	83db6 <_vfiprintf_r+0x72>
   83eb8:	7863      	ldrb	r3, [r4, #1]
   83eba:	2b2a      	cmp	r3, #42	; 0x2a
   83ebc:	d109      	bne.n	83ed2 <_vfiprintf_r+0x18e>
   83ebe:	9b03      	ldr	r3, [sp, #12]
   83ec0:	3402      	adds	r4, #2
   83ec2:	1d1a      	adds	r2, r3, #4
   83ec4:	681b      	ldr	r3, [r3, #0]
   83ec6:	9203      	str	r2, [sp, #12]
   83ec8:	2b00      	cmp	r3, #0
   83eca:	bfb8      	it	lt
   83ecc:	f04f 33ff 	movlt.w	r3, #4294967295
   83ed0:	e00b      	b.n	83eea <_vfiprintf_r+0x1a6>
   83ed2:	1c61      	adds	r1, r4, #1
   83ed4:	2300      	movs	r3, #0
   83ed6:	460c      	mov	r4, r1
   83ed8:	7822      	ldrb	r2, [r4, #0]
   83eda:	3101      	adds	r1, #1
   83edc:	3a30      	subs	r2, #48	; 0x30
   83ede:	2a09      	cmp	r2, #9
   83ee0:	d803      	bhi.n	83eea <_vfiprintf_r+0x1a6>
   83ee2:	200a      	movs	r0, #10
   83ee4:	fb00 2303 	mla	r3, r0, r3, r2
   83ee8:	e7f5      	b.n	83ed6 <_vfiprintf_r+0x192>
   83eea:	9305      	str	r3, [sp, #20]
   83eec:	e766      	b.n	83dbc <_vfiprintf_r+0x78>
   83eee:	ab03      	add	r3, sp, #12
   83ef0:	9300      	str	r3, [sp, #0]
   83ef2:	4630      	mov	r0, r6
   83ef4:	a904      	add	r1, sp, #16
   83ef6:	462a      	mov	r2, r5
   83ef8:	4b13      	ldr	r3, [pc, #76]	; (83f48 <_vfiprintf_r+0x204>)
   83efa:	f000 f8bb 	bl	84074 <_printf_float>
   83efe:	e007      	b.n	83f10 <_vfiprintf_r+0x1cc>
   83f00:	ab03      	add	r3, sp, #12
   83f02:	9300      	str	r3, [sp, #0]
   83f04:	4630      	mov	r0, r6
   83f06:	a904      	add	r1, sp, #16
   83f08:	462a      	mov	r2, r5
   83f0a:	4b0f      	ldr	r3, [pc, #60]	; (83f48 <_vfiprintf_r+0x204>)
   83f0c:	f000 fb32 	bl	84574 <_printf_i>
   83f10:	f1b0 3fff 	cmp.w	r0, #4294967295
   83f14:	4680      	mov	r8, r0
   83f16:	f47f af73 	bne.w	83e00 <_vfiprintf_r+0xbc>
   83f1a:	89ab      	ldrh	r3, [r5, #12]
   83f1c:	065b      	lsls	r3, r3, #25
   83f1e:	f53f af3f 	bmi.w	83da0 <_vfiprintf_r+0x5c>
   83f22:	9809      	ldr	r0, [sp, #36]	; 0x24
   83f24:	b01d      	add	sp, #116	; 0x74
   83f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83f2a:	bf00      	nop
   83f2c:	000872a8 	.word	0x000872a8
   83f30:	000872c8 	.word	0x000872c8
   83f34:	000872e8 	.word	0x000872e8
   83f38:	0008725a 	.word	0x0008725a
   83f3c:	0008725e 	.word	0x0008725e
   83f40:	00084075 	.word	0x00084075
   83f44:	00087254 	.word	0x00087254
   83f48:	00083d21 	.word	0x00083d21

00083f4c <__cvt>:
   83f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83f50:	2b00      	cmp	r3, #0
   83f52:	b088      	sub	sp, #32
   83f54:	4614      	mov	r4, r2
   83f56:	461d      	mov	r5, r3
   83f58:	9e10      	ldr	r6, [sp, #64]	; 0x40
   83f5a:	9912      	ldr	r1, [sp, #72]	; 0x48
   83f5c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   83f5e:	da05      	bge.n	83f6c <__cvt+0x20>
   83f60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   83f64:	461d      	mov	r5, r3
   83f66:	4614      	mov	r4, r2
   83f68:	232d      	movs	r3, #45	; 0x2d
   83f6a:	e000      	b.n	83f6e <__cvt+0x22>
   83f6c:	2300      	movs	r3, #0
   83f6e:	700b      	strb	r3, [r1, #0]
   83f70:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83f72:	f023 0a20 	bic.w	sl, r3, #32
   83f76:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   83f7a:	d004      	beq.n	83f86 <__cvt+0x3a>
   83f7c:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   83f80:	d103      	bne.n	83f8a <__cvt+0x3e>
   83f82:	3601      	adds	r6, #1
   83f84:	e001      	b.n	83f8a <__cvt+0x3e>
   83f86:	2303      	movs	r3, #3
   83f88:	e000      	b.n	83f8c <__cvt+0x40>
   83f8a:	2302      	movs	r3, #2
   83f8c:	e88d 00c8 	stmia.w	sp, {r3, r6, r7}
   83f90:	ab06      	add	r3, sp, #24
   83f92:	9303      	str	r3, [sp, #12]
   83f94:	ab07      	add	r3, sp, #28
   83f96:	9304      	str	r3, [sp, #16]
   83f98:	4622      	mov	r2, r4
   83f9a:	462b      	mov	r3, r5
   83f9c:	f000 fd50 	bl	84a40 <_dtoa_r>
   83fa0:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   83fa4:	4680      	mov	r8, r0
   83fa6:	d102      	bne.n	83fae <__cvt+0x62>
   83fa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83faa:	07db      	lsls	r3, r3, #31
   83fac:	d525      	bpl.n	83ffa <__cvt+0xae>
   83fae:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   83fb2:	eb08 0906 	add.w	r9, r8, r6
   83fb6:	d10f      	bne.n	83fd8 <__cvt+0x8c>
   83fb8:	f898 3000 	ldrb.w	r3, [r8]
   83fbc:	2b30      	cmp	r3, #48	; 0x30
   83fbe:	d109      	bne.n	83fd4 <__cvt+0x88>
   83fc0:	4620      	mov	r0, r4
   83fc2:	4629      	mov	r1, r5
   83fc4:	2200      	movs	r2, #0
   83fc6:	2300      	movs	r3, #0
   83fc8:	f002 fd54 	bl	86a74 <__aeabi_dcmpeq>
   83fcc:	b910      	cbnz	r0, 83fd4 <__cvt+0x88>
   83fce:	f1c6 0601 	rsb	r6, r6, #1
   83fd2:	603e      	str	r6, [r7, #0]
   83fd4:	683b      	ldr	r3, [r7, #0]
   83fd6:	4499      	add	r9, r3
   83fd8:	4620      	mov	r0, r4
   83fda:	4629      	mov	r1, r5
   83fdc:	2200      	movs	r2, #0
   83fde:	2300      	movs	r3, #0
   83fe0:	f002 fd48 	bl	86a74 <__aeabi_dcmpeq>
   83fe4:	b108      	cbz	r0, 83fea <__cvt+0x9e>
   83fe6:	f8cd 901c 	str.w	r9, [sp, #28]
   83fea:	9b07      	ldr	r3, [sp, #28]
   83fec:	454b      	cmp	r3, r9
   83fee:	d204      	bcs.n	83ffa <__cvt+0xae>
   83ff0:	1c5a      	adds	r2, r3, #1
   83ff2:	9207      	str	r2, [sp, #28]
   83ff4:	2230      	movs	r2, #48	; 0x30
   83ff6:	701a      	strb	r2, [r3, #0]
   83ff8:	e7f7      	b.n	83fea <__cvt+0x9e>
   83ffa:	9b07      	ldr	r3, [sp, #28]
   83ffc:	4640      	mov	r0, r8
   83ffe:	ebc8 0203 	rsb	r2, r8, r3
   84002:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84004:	601a      	str	r2, [r3, #0]
   84006:	b008      	add	sp, #32
   84008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008400c <__exponent>:
   8400c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   8400e:	4603      	mov	r3, r0
   84010:	2900      	cmp	r1, #0
   84012:	f803 2b02 	strb.w	r2, [r3], #2
   84016:	da03      	bge.n	84020 <__exponent+0x14>
   84018:	4249      	negs	r1, r1
   8401a:	461a      	mov	r2, r3
   8401c:	242d      	movs	r4, #45	; 0x2d
   8401e:	e001      	b.n	84024 <__exponent+0x18>
   84020:	461a      	mov	r2, r3
   84022:	242b      	movs	r4, #43	; 0x2b
   84024:	2909      	cmp	r1, #9
   84026:	7044      	strb	r4, [r0, #1]
   84028:	dd1b      	ble.n	84062 <__exponent+0x56>
   8402a:	f10d 0406 	add.w	r4, sp, #6
   8402e:	260a      	movs	r6, #10
   84030:	fb91 f5f6 	sdiv	r5, r1, r6
   84034:	fb06 1115 	mls	r1, r6, r5, r1
   84038:	2d09      	cmp	r5, #9
   8403a:	f101 0130 	add.w	r1, r1, #48	; 0x30
   8403e:	4623      	mov	r3, r4
   84040:	f804 1901 	strb.w	r1, [r4], #-1
   84044:	4629      	mov	r1, r5
   84046:	dcf2      	bgt.n	8402e <__exponent+0x22>
   84048:	f105 0130 	add.w	r1, r5, #48	; 0x30
   8404c:	f803 1d01 	strb.w	r1, [r3, #-1]!
   84050:	f10d 0107 	add.w	r1, sp, #7
   84054:	428b      	cmp	r3, r1
   84056:	d20a      	bcs.n	8406e <__exponent+0x62>
   84058:	f813 1b01 	ldrb.w	r1, [r3], #1
   8405c:	f802 1b01 	strb.w	r1, [r2], #1
   84060:	e7f6      	b.n	84050 <__exponent+0x44>
   84062:	2430      	movs	r4, #48	; 0x30
   84064:	461a      	mov	r2, r3
   84066:	4421      	add	r1, r4
   84068:	f802 4b02 	strb.w	r4, [r2], #2
   8406c:	7059      	strb	r1, [r3, #1]
   8406e:	1a10      	subs	r0, r2, r0
   84070:	b002      	add	sp, #8
   84072:	bd70      	pop	{r4, r5, r6, pc}

00084074 <_printf_float>:
   84074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84078:	b08f      	sub	sp, #60	; 0x3c
   8407a:	460c      	mov	r4, r1
   8407c:	4616      	mov	r6, r2
   8407e:	461f      	mov	r7, r3
   84080:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
   84084:	4605      	mov	r5, r0
   84086:	f001 fc07 	bl	85898 <_localeconv_r>
   8408a:	f8d0 a000 	ldr.w	sl, [r0]
   8408e:	4650      	mov	r0, sl
   84090:	f7ff fe16 	bl	83cc0 <strlen>
   84094:	2300      	movs	r3, #0
   84096:	930c      	str	r3, [sp, #48]	; 0x30
   84098:	f8d9 3000 	ldr.w	r3, [r9]
   8409c:	9009      	str	r0, [sp, #36]	; 0x24
   8409e:	3307      	adds	r3, #7
   840a0:	f023 0307 	bic.w	r3, r3, #7
   840a4:	f103 0208 	add.w	r2, r3, #8
   840a8:	e9d3 0100 	ldrd	r0, r1, [r3]
   840ac:	f894 8018 	ldrb.w	r8, [r4, #24]
   840b0:	f8c9 2000 	str.w	r2, [r9]
   840b4:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
   840b8:	f001 ffde 	bl	86078 <__fpclassifyd>
   840bc:	2801      	cmp	r0, #1
   840be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   840c2:	d117      	bne.n	840f4 <_printf_float+0x80>
   840c4:	2200      	movs	r2, #0
   840c6:	2300      	movs	r3, #0
   840c8:	f002 fcde 	bl	86a88 <__aeabi_dcmplt>
   840cc:	b110      	cbz	r0, 840d4 <_printf_float+0x60>
   840ce:	232d      	movs	r3, #45	; 0x2d
   840d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   840d4:	4b90      	ldr	r3, [pc, #576]	; (84318 <_printf_float+0x2a4>)
   840d6:	4a91      	ldr	r2, [pc, #580]	; (8431c <_printf_float+0x2a8>)
   840d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   840dc:	bf8c      	ite	hi
   840de:	4691      	movhi	r9, r2
   840e0:	4699      	movls	r9, r3
   840e2:	2303      	movs	r3, #3
   840e4:	6123      	str	r3, [r4, #16]
   840e6:	6823      	ldr	r3, [r4, #0]
   840e8:	f023 0304 	bic.w	r3, r3, #4
   840ec:	6023      	str	r3, [r4, #0]
   840ee:	f04f 0b00 	mov.w	fp, #0
   840f2:	e086      	b.n	84202 <_printf_float+0x18e>
   840f4:	f001 ffc0 	bl	86078 <__fpclassifyd>
   840f8:	6823      	ldr	r3, [r4, #0]
   840fa:	b948      	cbnz	r0, 84110 <_printf_float+0x9c>
   840fc:	4a88      	ldr	r2, [pc, #544]	; (84320 <_printf_float+0x2ac>)
   840fe:	4989      	ldr	r1, [pc, #548]	; (84324 <_printf_float+0x2b0>)
   84100:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   84104:	bf8c      	ite	hi
   84106:	4689      	movhi	r9, r1
   84108:	4691      	movls	r9, r2
   8410a:	2203      	movs	r2, #3
   8410c:	6122      	str	r2, [r4, #16]
   8410e:	e7eb      	b.n	840e8 <_printf_float+0x74>
   84110:	6862      	ldr	r2, [r4, #4]
   84112:	f028 0b20 	bic.w	fp, r8, #32
   84116:	1c51      	adds	r1, r2, #1
   84118:	d101      	bne.n	8411e <_printf_float+0xaa>
   8411a:	2206      	movs	r2, #6
   8411c:	e004      	b.n	84128 <_printf_float+0xb4>
   8411e:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   84122:	d102      	bne.n	8412a <_printf_float+0xb6>
   84124:	b90a      	cbnz	r2, 8412a <_printf_float+0xb6>
   84126:	2201      	movs	r2, #1
   84128:	6062      	str	r2, [r4, #4]
   8412a:	6860      	ldr	r0, [r4, #4]
   8412c:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   84130:	e88d 0003 	stmia.w	sp, {r0, r1}
   84134:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   84138:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   8413c:	9002      	str	r0, [sp, #8]
   8413e:	a80b      	add	r0, sp, #44	; 0x2c
   84140:	9003      	str	r0, [sp, #12]
   84142:	a80c      	add	r0, sp, #48	; 0x30
   84144:	9005      	str	r0, [sp, #20]
   84146:	2000      	movs	r0, #0
   84148:	6021      	str	r1, [r4, #0]
   8414a:	9006      	str	r0, [sp, #24]
   8414c:	f8cd 8010 	str.w	r8, [sp, #16]
   84150:	4628      	mov	r0, r5
   84152:	f7ff fefb 	bl	83f4c <__cvt>
   84156:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   8415a:	4681      	mov	r9, r0
   8415c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8415e:	d109      	bne.n	84174 <_printf_float+0x100>
   84160:	1cc8      	adds	r0, r1, #3
   84162:	db02      	blt.n	8416a <_printf_float+0xf6>
   84164:	6863      	ldr	r3, [r4, #4]
   84166:	4299      	cmp	r1, r3
   84168:	dd30      	ble.n	841cc <_printf_float+0x158>
   8416a:	f1a8 0802 	sub.w	r8, r8, #2
   8416e:	fa5f f888 	uxtb.w	r8, r8
   84172:	e002      	b.n	8417a <_printf_float+0x106>
   84174:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   84178:	d812      	bhi.n	841a0 <_printf_float+0x12c>
   8417a:	3901      	subs	r1, #1
   8417c:	4642      	mov	r2, r8
   8417e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   84182:	910b      	str	r1, [sp, #44]	; 0x2c
   84184:	f7ff ff42 	bl	8400c <__exponent>
   84188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8418a:	4683      	mov	fp, r0
   8418c:	1883      	adds	r3, r0, r2
   8418e:	2a01      	cmp	r2, #1
   84190:	6123      	str	r3, [r4, #16]
   84192:	dc02      	bgt.n	8419a <_printf_float+0x126>
   84194:	6822      	ldr	r2, [r4, #0]
   84196:	07d2      	lsls	r2, r2, #31
   84198:	d52d      	bpl.n	841f6 <_printf_float+0x182>
   8419a:	3301      	adds	r3, #1
   8419c:	6123      	str	r3, [r4, #16]
   8419e:	e02a      	b.n	841f6 <_printf_float+0x182>
   841a0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   841a4:	d114      	bne.n	841d0 <_printf_float+0x15c>
   841a6:	2900      	cmp	r1, #0
   841a8:	6863      	ldr	r3, [r4, #4]
   841aa:	dd07      	ble.n	841bc <_printf_float+0x148>
   841ac:	6121      	str	r1, [r4, #16]
   841ae:	b913      	cbnz	r3, 841b6 <_printf_float+0x142>
   841b0:	6822      	ldr	r2, [r4, #0]
   841b2:	07d0      	lsls	r0, r2, #31
   841b4:	d51c      	bpl.n	841f0 <_printf_float+0x17c>
   841b6:	3301      	adds	r3, #1
   841b8:	440b      	add	r3, r1
   841ba:	e018      	b.n	841ee <_printf_float+0x17a>
   841bc:	b913      	cbnz	r3, 841c4 <_printf_float+0x150>
   841be:	6822      	ldr	r2, [r4, #0]
   841c0:	07d2      	lsls	r2, r2, #31
   841c2:	d501      	bpl.n	841c8 <_printf_float+0x154>
   841c4:	3302      	adds	r3, #2
   841c6:	e012      	b.n	841ee <_printf_float+0x17a>
   841c8:	2301      	movs	r3, #1
   841ca:	e010      	b.n	841ee <_printf_float+0x17a>
   841cc:	f04f 0867 	mov.w	r8, #103	; 0x67
   841d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   841d2:	4291      	cmp	r1, r2
   841d4:	db05      	blt.n	841e2 <_printf_float+0x16e>
   841d6:	6823      	ldr	r3, [r4, #0]
   841d8:	6121      	str	r1, [r4, #16]
   841da:	07d8      	lsls	r0, r3, #31
   841dc:	d508      	bpl.n	841f0 <_printf_float+0x17c>
   841de:	1c4b      	adds	r3, r1, #1
   841e0:	e005      	b.n	841ee <_printf_float+0x17a>
   841e2:	2900      	cmp	r1, #0
   841e4:	bfd4      	ite	le
   841e6:	f1c1 0302 	rsble	r3, r1, #2
   841ea:	2301      	movgt	r3, #1
   841ec:	4413      	add	r3, r2
   841ee:	6123      	str	r3, [r4, #16]
   841f0:	65a1      	str	r1, [r4, #88]	; 0x58
   841f2:	f04f 0b00 	mov.w	fp, #0
   841f6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   841fa:	b113      	cbz	r3, 84202 <_printf_float+0x18e>
   841fc:	232d      	movs	r3, #45	; 0x2d
   841fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   84202:	9700      	str	r7, [sp, #0]
   84204:	4628      	mov	r0, r5
   84206:	4621      	mov	r1, r4
   84208:	aa0d      	add	r2, sp, #52	; 0x34
   8420a:	4633      	mov	r3, r6
   8420c:	f000 f940 	bl	84490 <_printf_common>
   84210:	3001      	adds	r0, #1
   84212:	d102      	bne.n	8421a <_printf_float+0x1a6>
   84214:	f04f 30ff 	mov.w	r0, #4294967295
   84218:	e136      	b.n	84488 <_printf_float+0x414>
   8421a:	6823      	ldr	r3, [r4, #0]
   8421c:	055a      	lsls	r2, r3, #21
   8421e:	d404      	bmi.n	8422a <_printf_float+0x1b6>
   84220:	4628      	mov	r0, r5
   84222:	4631      	mov	r1, r6
   84224:	464a      	mov	r2, r9
   84226:	6923      	ldr	r3, [r4, #16]
   84228:	e108      	b.n	8443c <_printf_float+0x3c8>
   8422a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   8422e:	f240 80cb 	bls.w	843c8 <_printf_float+0x354>
   84232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   84236:	2200      	movs	r2, #0
   84238:	2300      	movs	r3, #0
   8423a:	f002 fc1b 	bl	86a74 <__aeabi_dcmpeq>
   8423e:	2800      	cmp	r0, #0
   84240:	d02a      	beq.n	84298 <_printf_float+0x224>
   84242:	4628      	mov	r0, r5
   84244:	4631      	mov	r1, r6
   84246:	4a38      	ldr	r2, [pc, #224]	; (84328 <_printf_float+0x2b4>)
   84248:	2301      	movs	r3, #1
   8424a:	47b8      	blx	r7
   8424c:	3001      	adds	r0, #1
   8424e:	d0e1      	beq.n	84214 <_printf_float+0x1a0>
   84250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84254:	429a      	cmp	r2, r3
   84256:	db07      	blt.n	84268 <_printf_float+0x1f4>
   84258:	6823      	ldr	r3, [r4, #0]
   8425a:	07d8      	lsls	r0, r3, #31
   8425c:	d404      	bmi.n	84268 <_printf_float+0x1f4>
   8425e:	6823      	ldr	r3, [r4, #0]
   84260:	079b      	lsls	r3, r3, #30
   84262:	f100 80f8 	bmi.w	84456 <_printf_float+0x3e2>
   84266:	e0fd      	b.n	84464 <_printf_float+0x3f0>
   84268:	4628      	mov	r0, r5
   8426a:	4631      	mov	r1, r6
   8426c:	4652      	mov	r2, sl
   8426e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84270:	47b8      	blx	r7
   84272:	3001      	adds	r0, #1
   84274:	d0ce      	beq.n	84214 <_printf_float+0x1a0>
   84276:	f04f 0800 	mov.w	r8, #0
   8427a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8427c:	3b01      	subs	r3, #1
   8427e:	4598      	cmp	r8, r3
   84280:	daed      	bge.n	8425e <_printf_float+0x1ea>
   84282:	4628      	mov	r0, r5
   84284:	4631      	mov	r1, r6
   84286:	f104 021a 	add.w	r2, r4, #26
   8428a:	2301      	movs	r3, #1
   8428c:	47b8      	blx	r7
   8428e:	3001      	adds	r0, #1
   84290:	d0c0      	beq.n	84214 <_printf_float+0x1a0>
   84292:	f108 0801 	add.w	r8, r8, #1
   84296:	e7f0      	b.n	8427a <_printf_float+0x206>
   84298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8429a:	2b00      	cmp	r3, #0
   8429c:	dc28      	bgt.n	842f0 <_printf_float+0x27c>
   8429e:	4628      	mov	r0, r5
   842a0:	4631      	mov	r1, r6
   842a2:	4a21      	ldr	r2, [pc, #132]	; (84328 <_printf_float+0x2b4>)
   842a4:	2301      	movs	r3, #1
   842a6:	47b8      	blx	r7
   842a8:	3001      	adds	r0, #1
   842aa:	d0b3      	beq.n	84214 <_printf_float+0x1a0>
   842ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   842ae:	b923      	cbnz	r3, 842ba <_printf_float+0x246>
   842b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   842b2:	b913      	cbnz	r3, 842ba <_printf_float+0x246>
   842b4:	6823      	ldr	r3, [r4, #0]
   842b6:	07d9      	lsls	r1, r3, #31
   842b8:	d5d1      	bpl.n	8425e <_printf_float+0x1ea>
   842ba:	4628      	mov	r0, r5
   842bc:	4631      	mov	r1, r6
   842be:	4652      	mov	r2, sl
   842c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   842c2:	47b8      	blx	r7
   842c4:	3001      	adds	r0, #1
   842c6:	d0a5      	beq.n	84214 <_printf_float+0x1a0>
   842c8:	f04f 0800 	mov.w	r8, #0
   842cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   842ce:	4628      	mov	r0, r5
   842d0:	425b      	negs	r3, r3
   842d2:	4598      	cmp	r8, r3
   842d4:	4631      	mov	r1, r6
   842d6:	da08      	bge.n	842ea <_printf_float+0x276>
   842d8:	f104 021a 	add.w	r2, r4, #26
   842dc:	2301      	movs	r3, #1
   842de:	47b8      	blx	r7
   842e0:	3001      	adds	r0, #1
   842e2:	d097      	beq.n	84214 <_printf_float+0x1a0>
   842e4:	f108 0801 	add.w	r8, r8, #1
   842e8:	e7f0      	b.n	842cc <_printf_float+0x258>
   842ea:	464a      	mov	r2, r9
   842ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   842ee:	e0a5      	b.n	8443c <_printf_float+0x3c8>
   842f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   842f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   842f4:	429a      	cmp	r2, r3
   842f6:	bfb4      	ite	lt
   842f8:	4693      	movlt	fp, r2
   842fa:	469b      	movge	fp, r3
   842fc:	f1bb 0f00 	cmp.w	fp, #0
   84300:	dc02      	bgt.n	84308 <_printf_float+0x294>
   84302:	f04f 0800 	mov.w	r8, #0
   84306:	e01c      	b.n	84342 <_printf_float+0x2ce>
   84308:	4628      	mov	r0, r5
   8430a:	4631      	mov	r1, r6
   8430c:	464a      	mov	r2, r9
   8430e:	465b      	mov	r3, fp
   84310:	47b8      	blx	r7
   84312:	3001      	adds	r0, #1
   84314:	d1f5      	bne.n	84302 <_printf_float+0x28e>
   84316:	e77d      	b.n	84214 <_printf_float+0x1a0>
   84318:	00087265 	.word	0x00087265
   8431c:	00087269 	.word	0x00087269
   84320:	0008726d 	.word	0x0008726d
   84324:	00087271 	.word	0x00087271
   84328:	00087275 	.word	0x00087275
   8432c:	4628      	mov	r0, r5
   8432e:	4631      	mov	r1, r6
   84330:	f104 021a 	add.w	r2, r4, #26
   84334:	2301      	movs	r3, #1
   84336:	47b8      	blx	r7
   84338:	3001      	adds	r0, #1
   8433a:	f43f af6b 	beq.w	84214 <_printf_float+0x1a0>
   8433e:	f108 0801 	add.w	r8, r8, #1
   84342:	6da3      	ldr	r3, [r4, #88]	; 0x58
   84344:	ea2b 72eb 	bic.w	r2, fp, fp, asr #31
   84348:	1a9a      	subs	r2, r3, r2
   8434a:	4590      	cmp	r8, r2
   8434c:	dbee      	blt.n	8432c <_printf_float+0x2b8>
   8434e:	eb09 0803 	add.w	r8, r9, r3
   84352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84356:	429a      	cmp	r2, r3
   84358:	db0f      	blt.n	8437a <_printf_float+0x306>
   8435a:	6823      	ldr	r3, [r4, #0]
   8435c:	07da      	lsls	r2, r3, #31
   8435e:	d40c      	bmi.n	8437a <_printf_float+0x306>
   84360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84364:	4499      	add	r9, r3
   84366:	ebc8 0909 	rsb	r9, r8, r9
   8436a:	1a9b      	subs	r3, r3, r2
   8436c:	4599      	cmp	r9, r3
   8436e:	bfa8      	it	ge
   84370:	4699      	movge	r9, r3
   84372:	f1b9 0f00 	cmp.w	r9, #0
   84376:	dc08      	bgt.n	8438a <_printf_float+0x316>
   84378:	e00f      	b.n	8439a <_printf_float+0x326>
   8437a:	4628      	mov	r0, r5
   8437c:	4631      	mov	r1, r6
   8437e:	4652      	mov	r2, sl
   84380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84382:	47b8      	blx	r7
   84384:	3001      	adds	r0, #1
   84386:	d1eb      	bne.n	84360 <_printf_float+0x2ec>
   84388:	e744      	b.n	84214 <_printf_float+0x1a0>
   8438a:	4628      	mov	r0, r5
   8438c:	4631      	mov	r1, r6
   8438e:	4642      	mov	r2, r8
   84390:	464b      	mov	r3, r9
   84392:	47b8      	blx	r7
   84394:	3001      	adds	r0, #1
   84396:	f43f af3d 	beq.w	84214 <_printf_float+0x1a0>
   8439a:	f04f 0800 	mov.w	r8, #0
   8439e:	e00a      	b.n	843b6 <_printf_float+0x342>
   843a0:	4628      	mov	r0, r5
   843a2:	4631      	mov	r1, r6
   843a4:	f104 021a 	add.w	r2, r4, #26
   843a8:	2301      	movs	r3, #1
   843aa:	47b8      	blx	r7
   843ac:	3001      	adds	r0, #1
   843ae:	f43f af31 	beq.w	84214 <_printf_float+0x1a0>
   843b2:	f108 0801 	add.w	r8, r8, #1
   843b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   843b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   843ba:	ea29 71e9 	bic.w	r1, r9, r9, asr #31
   843be:	1ad3      	subs	r3, r2, r3
   843c0:	1a5b      	subs	r3, r3, r1
   843c2:	4598      	cmp	r8, r3
   843c4:	dbec      	blt.n	843a0 <_printf_float+0x32c>
   843c6:	e74a      	b.n	8425e <_printf_float+0x1ea>
   843c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   843ca:	2a01      	cmp	r2, #1
   843cc:	dc01      	bgt.n	843d2 <_printf_float+0x35e>
   843ce:	07db      	lsls	r3, r3, #31
   843d0:	d539      	bpl.n	84446 <_printf_float+0x3d2>
   843d2:	4628      	mov	r0, r5
   843d4:	4631      	mov	r1, r6
   843d6:	464a      	mov	r2, r9
   843d8:	2301      	movs	r3, #1
   843da:	47b8      	blx	r7
   843dc:	3001      	adds	r0, #1
   843de:	f43f af19 	beq.w	84214 <_printf_float+0x1a0>
   843e2:	4628      	mov	r0, r5
   843e4:	4631      	mov	r1, r6
   843e6:	4652      	mov	r2, sl
   843e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   843ea:	47b8      	blx	r7
   843ec:	3001      	adds	r0, #1
   843ee:	f43f af11 	beq.w	84214 <_printf_float+0x1a0>
   843f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   843f6:	2200      	movs	r2, #0
   843f8:	2300      	movs	r3, #0
   843fa:	f002 fb3b 	bl	86a74 <__aeabi_dcmpeq>
   843fe:	b110      	cbz	r0, 84406 <_printf_float+0x392>
   84400:	f04f 0800 	mov.w	r8, #0
   84404:	e011      	b.n	8442a <_printf_float+0x3b6>
   84406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84408:	4628      	mov	r0, r5
   8440a:	4631      	mov	r1, r6
   8440c:	f109 0201 	add.w	r2, r9, #1
   84410:	3b01      	subs	r3, #1
   84412:	e01c      	b.n	8444e <_printf_float+0x3da>
   84414:	4628      	mov	r0, r5
   84416:	4631      	mov	r1, r6
   84418:	f104 021a 	add.w	r2, r4, #26
   8441c:	2301      	movs	r3, #1
   8441e:	47b8      	blx	r7
   84420:	3001      	adds	r0, #1
   84422:	f43f aef7 	beq.w	84214 <_printf_float+0x1a0>
   84426:	f108 0801 	add.w	r8, r8, #1
   8442a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8442c:	3b01      	subs	r3, #1
   8442e:	4598      	cmp	r8, r3
   84430:	dbf0      	blt.n	84414 <_printf_float+0x3a0>
   84432:	4628      	mov	r0, r5
   84434:	4631      	mov	r1, r6
   84436:	f104 0250 	add.w	r2, r4, #80	; 0x50
   8443a:	465b      	mov	r3, fp
   8443c:	47b8      	blx	r7
   8443e:	3001      	adds	r0, #1
   84440:	f47f af0d 	bne.w	8425e <_printf_float+0x1ea>
   84444:	e6e6      	b.n	84214 <_printf_float+0x1a0>
   84446:	4628      	mov	r0, r5
   84448:	4631      	mov	r1, r6
   8444a:	464a      	mov	r2, r9
   8444c:	2301      	movs	r3, #1
   8444e:	47b8      	blx	r7
   84450:	3001      	adds	r0, #1
   84452:	d1ee      	bne.n	84432 <_printf_float+0x3be>
   84454:	e6de      	b.n	84214 <_printf_float+0x1a0>
   84456:	f04f 0800 	mov.w	r8, #0
   8445a:	68e2      	ldr	r2, [r4, #12]
   8445c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8445e:	1ad3      	subs	r3, r2, r3
   84460:	4598      	cmp	r8, r3
   84462:	db05      	blt.n	84470 <_printf_float+0x3fc>
   84464:	68e0      	ldr	r0, [r4, #12]
   84466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84468:	4298      	cmp	r0, r3
   8446a:	bfb8      	it	lt
   8446c:	4618      	movlt	r0, r3
   8446e:	e00b      	b.n	84488 <_printf_float+0x414>
   84470:	4628      	mov	r0, r5
   84472:	4631      	mov	r1, r6
   84474:	f104 0219 	add.w	r2, r4, #25
   84478:	2301      	movs	r3, #1
   8447a:	47b8      	blx	r7
   8447c:	3001      	adds	r0, #1
   8447e:	f43f aec9 	beq.w	84214 <_printf_float+0x1a0>
   84482:	f108 0801 	add.w	r8, r8, #1
   84486:	e7e8      	b.n	8445a <_printf_float+0x3e6>
   84488:	b00f      	add	sp, #60	; 0x3c
   8448a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8448e:	bf00      	nop

00084490 <_printf_common>:
   84490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84494:	4615      	mov	r5, r2
   84496:	461f      	mov	r7, r3
   84498:	688a      	ldr	r2, [r1, #8]
   8449a:	690b      	ldr	r3, [r1, #16]
   8449c:	4606      	mov	r6, r0
   8449e:	429a      	cmp	r2, r3
   844a0:	bfa8      	it	ge
   844a2:	4613      	movge	r3, r2
   844a4:	602b      	str	r3, [r5, #0]
   844a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   844aa:	460c      	mov	r4, r1
   844ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
   844b0:	b10a      	cbz	r2, 844b6 <_printf_common+0x26>
   844b2:	3301      	adds	r3, #1
   844b4:	602b      	str	r3, [r5, #0]
   844b6:	6823      	ldr	r3, [r4, #0]
   844b8:	0699      	lsls	r1, r3, #26
   844ba:	d502      	bpl.n	844c2 <_printf_common+0x32>
   844bc:	682b      	ldr	r3, [r5, #0]
   844be:	3302      	adds	r3, #2
   844c0:	602b      	str	r3, [r5, #0]
   844c2:	6823      	ldr	r3, [r4, #0]
   844c4:	f013 0906 	ands.w	r9, r3, #6
   844c8:	d01d      	beq.n	84506 <_printf_common+0x76>
   844ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   844ce:	6822      	ldr	r2, [r4, #0]
   844d0:	3300      	adds	r3, #0
   844d2:	bf18      	it	ne
   844d4:	2301      	movne	r3, #1
   844d6:	0692      	lsls	r2, r2, #26
   844d8:	d51f      	bpl.n	8451a <_printf_common+0x8a>
   844da:	18e1      	adds	r1, r4, r3
   844dc:	2030      	movs	r0, #48	; 0x30
   844de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   844e2:	1c5a      	adds	r2, r3, #1
   844e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   844e8:	4422      	add	r2, r4
   844ea:	3302      	adds	r3, #2
   844ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   844f0:	e013      	b.n	8451a <_printf_common+0x8a>
   844f2:	4630      	mov	r0, r6
   844f4:	4639      	mov	r1, r7
   844f6:	f104 0219 	add.w	r2, r4, #25
   844fa:	2301      	movs	r3, #1
   844fc:	47c0      	blx	r8
   844fe:	3001      	adds	r0, #1
   84500:	d007      	beq.n	84512 <_printf_common+0x82>
   84502:	f109 0901 	add.w	r9, r9, #1
   84506:	68e2      	ldr	r2, [r4, #12]
   84508:	682b      	ldr	r3, [r5, #0]
   8450a:	1ad3      	subs	r3, r2, r3
   8450c:	4599      	cmp	r9, r3
   8450e:	dbf0      	blt.n	844f2 <_printf_common+0x62>
   84510:	e7db      	b.n	844ca <_printf_common+0x3a>
   84512:	f04f 30ff 	mov.w	r0, #4294967295
   84516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8451a:	4630      	mov	r0, r6
   8451c:	4639      	mov	r1, r7
   8451e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84522:	47c0      	blx	r8
   84524:	3001      	adds	r0, #1
   84526:	d0f4      	beq.n	84512 <_printf_common+0x82>
   84528:	6823      	ldr	r3, [r4, #0]
   8452a:	682a      	ldr	r2, [r5, #0]
   8452c:	f003 0306 	and.w	r3, r3, #6
   84530:	68e1      	ldr	r1, [r4, #12]
   84532:	2b04      	cmp	r3, #4
   84534:	bf08      	it	eq
   84536:	ebc2 0501 	rsbeq	r5, r2, r1
   8453a:	6923      	ldr	r3, [r4, #16]
   8453c:	68a2      	ldr	r2, [r4, #8]
   8453e:	bf0c      	ite	eq
   84540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   84544:	2500      	movne	r5, #0
   84546:	429a      	cmp	r2, r3
   84548:	bfc4      	itt	gt
   8454a:	ebc3 0302 	rsbgt	r3, r3, r2
   8454e:	18ed      	addgt	r5, r5, r3
   84550:	f04f 0900 	mov.w	r9, #0
   84554:	45a9      	cmp	r9, r5
   84556:	da0a      	bge.n	8456e <_printf_common+0xde>
   84558:	4630      	mov	r0, r6
   8455a:	4639      	mov	r1, r7
   8455c:	f104 021a 	add.w	r2, r4, #26
   84560:	2301      	movs	r3, #1
   84562:	47c0      	blx	r8
   84564:	3001      	adds	r0, #1
   84566:	d0d4      	beq.n	84512 <_printf_common+0x82>
   84568:	f109 0901 	add.w	r9, r9, #1
   8456c:	e7f2      	b.n	84554 <_printf_common+0xc4>
   8456e:	2000      	movs	r0, #0
   84570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084574 <_printf_i>:
   84574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   84578:	7e0e      	ldrb	r6, [r1, #24]
   8457a:	4680      	mov	r8, r0
   8457c:	2e6e      	cmp	r6, #110	; 0x6e
   8457e:	460c      	mov	r4, r1
   84580:	4691      	mov	r9, r2
   84582:	469a      	mov	sl, r3
   84584:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   84586:	f101 0043 	add.w	r0, r1, #67	; 0x43
   8458a:	f000 80a5 	beq.w	846d8 <_printf_i+0x164>
   8458e:	d811      	bhi.n	845b4 <_printf_i+0x40>
   84590:	2e63      	cmp	r6, #99	; 0x63
   84592:	d022      	beq.n	845da <_printf_i+0x66>
   84594:	d809      	bhi.n	845aa <_printf_i+0x36>
   84596:	2e00      	cmp	r6, #0
   84598:	f000 80af 	beq.w	846fa <_printf_i+0x186>
   8459c:	2e58      	cmp	r6, #88	; 0x58
   8459e:	f040 80bf 	bne.w	84720 <_printf_i+0x1ac>
   845a2:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
   845a6:	4a7b      	ldr	r2, [pc, #492]	; (84794 <_printf_i+0x220>)
   845a8:	e04f      	b.n	8464a <_printf_i+0xd6>
   845aa:	2e64      	cmp	r6, #100	; 0x64
   845ac:	d01e      	beq.n	845ec <_printf_i+0x78>
   845ae:	2e69      	cmp	r6, #105	; 0x69
   845b0:	d01c      	beq.n	845ec <_printf_i+0x78>
   845b2:	e0b5      	b.n	84720 <_printf_i+0x1ac>
   845b4:	2e73      	cmp	r6, #115	; 0x73
   845b6:	f000 80a4 	beq.w	84702 <_printf_i+0x18e>
   845ba:	d809      	bhi.n	845d0 <_printf_i+0x5c>
   845bc:	2e6f      	cmp	r6, #111	; 0x6f
   845be:	d02b      	beq.n	84618 <_printf_i+0xa4>
   845c0:	2e70      	cmp	r6, #112	; 0x70
   845c2:	f040 80ad 	bne.w	84720 <_printf_i+0x1ac>
   845c6:	680b      	ldr	r3, [r1, #0]
   845c8:	f043 0320 	orr.w	r3, r3, #32
   845cc:	600b      	str	r3, [r1, #0]
   845ce:	e038      	b.n	84642 <_printf_i+0xce>
   845d0:	2e75      	cmp	r6, #117	; 0x75
   845d2:	d021      	beq.n	84618 <_printf_i+0xa4>
   845d4:	2e78      	cmp	r6, #120	; 0x78
   845d6:	d034      	beq.n	84642 <_printf_i+0xce>
   845d8:	e0a2      	b.n	84720 <_printf_i+0x1ac>
   845da:	682b      	ldr	r3, [r5, #0]
   845dc:	f101 0742 	add.w	r7, r1, #66	; 0x42
   845e0:	1d1a      	adds	r2, r3, #4
   845e2:	681b      	ldr	r3, [r3, #0]
   845e4:	602a      	str	r2, [r5, #0]
   845e6:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
   845ea:	e09d      	b.n	84728 <_printf_i+0x1b4>
   845ec:	6822      	ldr	r2, [r4, #0]
   845ee:	682b      	ldr	r3, [r5, #0]
   845f0:	f012 0f80 	tst.w	r2, #128	; 0x80
   845f4:	d003      	beq.n	845fe <_printf_i+0x8a>
   845f6:	1d1a      	adds	r2, r3, #4
   845f8:	602a      	str	r2, [r5, #0]
   845fa:	681d      	ldr	r5, [r3, #0]
   845fc:	e005      	b.n	8460a <_printf_i+0x96>
   845fe:	0651      	lsls	r1, r2, #25
   84600:	d5f9      	bpl.n	845f6 <_printf_i+0x82>
   84602:	1d1a      	adds	r2, r3, #4
   84604:	602a      	str	r2, [r5, #0]
   84606:	f9b3 5000 	ldrsh.w	r5, [r3]
   8460a:	2d00      	cmp	r5, #0
   8460c:	da39      	bge.n	84682 <_printf_i+0x10e>
   8460e:	232d      	movs	r3, #45	; 0x2d
   84610:	426d      	negs	r5, r5
   84612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   84616:	e034      	b.n	84682 <_printf_i+0x10e>
   84618:	6822      	ldr	r2, [r4, #0]
   8461a:	682b      	ldr	r3, [r5, #0]
   8461c:	f012 0f80 	tst.w	r2, #128	; 0x80
   84620:	d003      	beq.n	8462a <_printf_i+0xb6>
   84622:	1d1a      	adds	r2, r3, #4
   84624:	602a      	str	r2, [r5, #0]
   84626:	681d      	ldr	r5, [r3, #0]
   84628:	e004      	b.n	84634 <_printf_i+0xc0>
   8462a:	0652      	lsls	r2, r2, #25
   8462c:	d5f9      	bpl.n	84622 <_printf_i+0xae>
   8462e:	1d1a      	adds	r2, r3, #4
   84630:	602a      	str	r2, [r5, #0]
   84632:	881d      	ldrh	r5, [r3, #0]
   84634:	7e23      	ldrb	r3, [r4, #24]
   84636:	4a57      	ldr	r2, [pc, #348]	; (84794 <_printf_i+0x220>)
   84638:	2b6f      	cmp	r3, #111	; 0x6f
   8463a:	bf14      	ite	ne
   8463c:	230a      	movne	r3, #10
   8463e:	2308      	moveq	r3, #8
   84640:	e01b      	b.n	8467a <_printf_i+0x106>
   84642:	2378      	movs	r3, #120	; 0x78
   84644:	4a54      	ldr	r2, [pc, #336]	; (84798 <_printf_i+0x224>)
   84646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   8464a:	6823      	ldr	r3, [r4, #0]
   8464c:	6829      	ldr	r1, [r5, #0]
   8464e:	f013 0f80 	tst.w	r3, #128	; 0x80
   84652:	f101 0604 	add.w	r6, r1, #4
   84656:	602e      	str	r6, [r5, #0]
   84658:	d001      	beq.n	8465e <_printf_i+0xea>
   8465a:	680d      	ldr	r5, [r1, #0]
   8465c:	e002      	b.n	84664 <_printf_i+0xf0>
   8465e:	065f      	lsls	r7, r3, #25
   84660:	d5fb      	bpl.n	8465a <_printf_i+0xe6>
   84662:	880d      	ldrh	r5, [r1, #0]
   84664:	07de      	lsls	r6, r3, #31
   84666:	bf44      	itt	mi
   84668:	f043 0320 	orrmi.w	r3, r3, #32
   8466c:	6023      	strmi	r3, [r4, #0]
   8466e:	b91d      	cbnz	r5, 84678 <_printf_i+0x104>
   84670:	6823      	ldr	r3, [r4, #0]
   84672:	f023 0320 	bic.w	r3, r3, #32
   84676:	6023      	str	r3, [r4, #0]
   84678:	2310      	movs	r3, #16
   8467a:	2100      	movs	r1, #0
   8467c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   84680:	e001      	b.n	84686 <_printf_i+0x112>
   84682:	4a44      	ldr	r2, [pc, #272]	; (84794 <_printf_i+0x220>)
   84684:	230a      	movs	r3, #10
   84686:	6866      	ldr	r6, [r4, #4]
   84688:	2e00      	cmp	r6, #0
   8468a:	60a6      	str	r6, [r4, #8]
   8468c:	db03      	blt.n	84696 <_printf_i+0x122>
   8468e:	6821      	ldr	r1, [r4, #0]
   84690:	f021 0104 	bic.w	r1, r1, #4
   84694:	6021      	str	r1, [r4, #0]
   84696:	b905      	cbnz	r5, 8469a <_printf_i+0x126>
   84698:	b16e      	cbz	r6, 846b6 <_printf_i+0x142>
   8469a:	f104 0142 	add.w	r1, r4, #66	; 0x42
   8469e:	fbb5 f6f3 	udiv	r6, r5, r3
   846a2:	fb03 5516 	mls	r5, r3, r6, r5
   846a6:	5d55      	ldrb	r5, [r2, r5]
   846a8:	460f      	mov	r7, r1
   846aa:	f801 5901 	strb.w	r5, [r1], #-1
   846ae:	4635      	mov	r5, r6
   846b0:	2e00      	cmp	r6, #0
   846b2:	d1f4      	bne.n	8469e <_printf_i+0x12a>
   846b4:	e000      	b.n	846b8 <_printf_i+0x144>
   846b6:	4607      	mov	r7, r0
   846b8:	2b08      	cmp	r3, #8
   846ba:	d10a      	bne.n	846d2 <_printf_i+0x15e>
   846bc:	6823      	ldr	r3, [r4, #0]
   846be:	07dd      	lsls	r5, r3, #31
   846c0:	d507      	bpl.n	846d2 <_printf_i+0x15e>
   846c2:	6862      	ldr	r2, [r4, #4]
   846c4:	6923      	ldr	r3, [r4, #16]
   846c6:	429a      	cmp	r2, r3
   846c8:	dc03      	bgt.n	846d2 <_printf_i+0x15e>
   846ca:	2330      	movs	r3, #48	; 0x30
   846cc:	f807 3c01 	strb.w	r3, [r7, #-1]
   846d0:	3f01      	subs	r7, #1
   846d2:	1bc0      	subs	r0, r0, r7
   846d4:	6120      	str	r0, [r4, #16]
   846d6:	e02c      	b.n	84732 <_printf_i+0x1be>
   846d8:	6809      	ldr	r1, [r1, #0]
   846da:	682b      	ldr	r3, [r5, #0]
   846dc:	f011 0f80 	tst.w	r1, #128	; 0x80
   846e0:	6962      	ldr	r2, [r4, #20]
   846e2:	d004      	beq.n	846ee <_printf_i+0x17a>
   846e4:	1d19      	adds	r1, r3, #4
   846e6:	6029      	str	r1, [r5, #0]
   846e8:	681b      	ldr	r3, [r3, #0]
   846ea:	601a      	str	r2, [r3, #0]
   846ec:	e005      	b.n	846fa <_printf_i+0x186>
   846ee:	0649      	lsls	r1, r1, #25
   846f0:	d5f8      	bpl.n	846e4 <_printf_i+0x170>
   846f2:	1d19      	adds	r1, r3, #4
   846f4:	6029      	str	r1, [r5, #0]
   846f6:	681b      	ldr	r3, [r3, #0]
   846f8:	801a      	strh	r2, [r3, #0]
   846fa:	2300      	movs	r3, #0
   846fc:	6123      	str	r3, [r4, #16]
   846fe:	4607      	mov	r7, r0
   84700:	e017      	b.n	84732 <_printf_i+0x1be>
   84702:	682b      	ldr	r3, [r5, #0]
   84704:	1d1a      	adds	r2, r3, #4
   84706:	602a      	str	r2, [r5, #0]
   84708:	681f      	ldr	r7, [r3, #0]
   8470a:	4638      	mov	r0, r7
   8470c:	f7ff fad8 	bl	83cc0 <strlen>
   84710:	6863      	ldr	r3, [r4, #4]
   84712:	6120      	str	r0, [r4, #16]
   84714:	4298      	cmp	r0, r3
   84716:	bf88      	it	hi
   84718:	6123      	strhi	r3, [r4, #16]
   8471a:	6923      	ldr	r3, [r4, #16]
   8471c:	6063      	str	r3, [r4, #4]
   8471e:	e005      	b.n	8472c <_printf_i+0x1b8>
   84720:	f104 0742 	add.w	r7, r4, #66	; 0x42
   84724:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
   84728:	2301      	movs	r3, #1
   8472a:	6123      	str	r3, [r4, #16]
   8472c:	2300      	movs	r3, #0
   8472e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   84732:	f8cd a000 	str.w	sl, [sp]
   84736:	4640      	mov	r0, r8
   84738:	4621      	mov	r1, r4
   8473a:	aa03      	add	r2, sp, #12
   8473c:	464b      	mov	r3, r9
   8473e:	f7ff fea7 	bl	84490 <_printf_common>
   84742:	3001      	adds	r0, #1
   84744:	d102      	bne.n	8474c <_printf_i+0x1d8>
   84746:	f04f 30ff 	mov.w	r0, #4294967295
   8474a:	e01f      	b.n	8478c <_printf_i+0x218>
   8474c:	4640      	mov	r0, r8
   8474e:	4649      	mov	r1, r9
   84750:	463a      	mov	r2, r7
   84752:	6923      	ldr	r3, [r4, #16]
   84754:	47d0      	blx	sl
   84756:	3001      	adds	r0, #1
   84758:	d0f5      	beq.n	84746 <_printf_i+0x1d2>
   8475a:	6823      	ldr	r3, [r4, #0]
   8475c:	079b      	lsls	r3, r3, #30
   8475e:	d405      	bmi.n	8476c <_printf_i+0x1f8>
   84760:	68e0      	ldr	r0, [r4, #12]
   84762:	9b03      	ldr	r3, [sp, #12]
   84764:	4298      	cmp	r0, r3
   84766:	bfb8      	it	lt
   84768:	4618      	movlt	r0, r3
   8476a:	e00f      	b.n	8478c <_printf_i+0x218>
   8476c:	2500      	movs	r5, #0
   8476e:	68e2      	ldr	r2, [r4, #12]
   84770:	9b03      	ldr	r3, [sp, #12]
   84772:	1ad3      	subs	r3, r2, r3
   84774:	429d      	cmp	r5, r3
   84776:	daf3      	bge.n	84760 <_printf_i+0x1ec>
   84778:	4640      	mov	r0, r8
   8477a:	4649      	mov	r1, r9
   8477c:	f104 0219 	add.w	r2, r4, #25
   84780:	2301      	movs	r3, #1
   84782:	47d0      	blx	sl
   84784:	3001      	adds	r0, #1
   84786:	d0de      	beq.n	84746 <_printf_i+0x1d2>
   84788:	3501      	adds	r5, #1
   8478a:	e7f0      	b.n	8476e <_printf_i+0x1fa>
   8478c:	b004      	add	sp, #16
   8478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84792:	bf00      	nop
   84794:	00087277 	.word	0x00087277
   84798:	00087288 	.word	0x00087288

0008479c <__swbuf_r>:
   8479c:	b570      	push	{r4, r5, r6, lr}
   8479e:	460e      	mov	r6, r1
   847a0:	4614      	mov	r4, r2
   847a2:	4605      	mov	r5, r0
   847a4:	b118      	cbz	r0, 847ae <__swbuf_r+0x12>
   847a6:	6983      	ldr	r3, [r0, #24]
   847a8:	b90b      	cbnz	r3, 847ae <__swbuf_r+0x12>
   847aa:	f001 f80b 	bl	857c4 <__sinit>
   847ae:	4b22      	ldr	r3, [pc, #136]	; (84838 <__swbuf_r+0x9c>)
   847b0:	429c      	cmp	r4, r3
   847b2:	d101      	bne.n	847b8 <__swbuf_r+0x1c>
   847b4:	686c      	ldr	r4, [r5, #4]
   847b6:	e008      	b.n	847ca <__swbuf_r+0x2e>
   847b8:	4b20      	ldr	r3, [pc, #128]	; (8483c <__swbuf_r+0xa0>)
   847ba:	429c      	cmp	r4, r3
   847bc:	d101      	bne.n	847c2 <__swbuf_r+0x26>
   847be:	68ac      	ldr	r4, [r5, #8]
   847c0:	e003      	b.n	847ca <__swbuf_r+0x2e>
   847c2:	4b1f      	ldr	r3, [pc, #124]	; (84840 <__swbuf_r+0xa4>)
   847c4:	429c      	cmp	r4, r3
   847c6:	bf08      	it	eq
   847c8:	68ec      	ldreq	r4, [r5, #12]
   847ca:	69a3      	ldr	r3, [r4, #24]
   847cc:	60a3      	str	r3, [r4, #8]
   847ce:	89a3      	ldrh	r3, [r4, #12]
   847d0:	071a      	lsls	r2, r3, #28
   847d2:	d509      	bpl.n	847e8 <__swbuf_r+0x4c>
   847d4:	6923      	ldr	r3, [r4, #16]
   847d6:	b13b      	cbz	r3, 847e8 <__swbuf_r+0x4c>
   847d8:	6923      	ldr	r3, [r4, #16]
   847da:	6820      	ldr	r0, [r4, #0]
   847dc:	b2f6      	uxtb	r6, r6
   847de:	1ac0      	subs	r0, r0, r3
   847e0:	6963      	ldr	r3, [r4, #20]
   847e2:	4298      	cmp	r0, r3
   847e4:	db0f      	blt.n	84806 <__swbuf_r+0x6a>
   847e6:	e008      	b.n	847fa <__swbuf_r+0x5e>
   847e8:	4628      	mov	r0, r5
   847ea:	4621      	mov	r1, r4
   847ec:	f000 f82a 	bl	84844 <__swsetup_r>
   847f0:	2800      	cmp	r0, #0
   847f2:	d0f1      	beq.n	847d8 <__swbuf_r+0x3c>
   847f4:	f04f 30ff 	mov.w	r0, #4294967295
   847f8:	bd70      	pop	{r4, r5, r6, pc}
   847fa:	4628      	mov	r0, r5
   847fc:	4621      	mov	r1, r4
   847fe:	f000 ff63 	bl	856c8 <_fflush_r>
   84802:	2800      	cmp	r0, #0
   84804:	d1f6      	bne.n	847f4 <__swbuf_r+0x58>
   84806:	68a3      	ldr	r3, [r4, #8]
   84808:	3001      	adds	r0, #1
   8480a:	3b01      	subs	r3, #1
   8480c:	60a3      	str	r3, [r4, #8]
   8480e:	6823      	ldr	r3, [r4, #0]
   84810:	1c5a      	adds	r2, r3, #1
   84812:	6022      	str	r2, [r4, #0]
   84814:	701e      	strb	r6, [r3, #0]
   84816:	6963      	ldr	r3, [r4, #20]
   84818:	4298      	cmp	r0, r3
   8481a:	d004      	beq.n	84826 <__swbuf_r+0x8a>
   8481c:	89a3      	ldrh	r3, [r4, #12]
   8481e:	07db      	lsls	r3, r3, #31
   84820:	d507      	bpl.n	84832 <__swbuf_r+0x96>
   84822:	2e0a      	cmp	r6, #10
   84824:	d105      	bne.n	84832 <__swbuf_r+0x96>
   84826:	4628      	mov	r0, r5
   84828:	4621      	mov	r1, r4
   8482a:	f000 ff4d 	bl	856c8 <_fflush_r>
   8482e:	2800      	cmp	r0, #0
   84830:	d1e0      	bne.n	847f4 <__swbuf_r+0x58>
   84832:	4630      	mov	r0, r6
   84834:	bd70      	pop	{r4, r5, r6, pc}
   84836:	bf00      	nop
   84838:	000872a8 	.word	0x000872a8
   8483c:	000872c8 	.word	0x000872c8
   84840:	000872e8 	.word	0x000872e8

00084844 <__swsetup_r>:
   84844:	4b32      	ldr	r3, [pc, #200]	; (84910 <__swsetup_r+0xcc>)
   84846:	b570      	push	{r4, r5, r6, lr}
   84848:	681d      	ldr	r5, [r3, #0]
   8484a:	4606      	mov	r6, r0
   8484c:	460c      	mov	r4, r1
   8484e:	b125      	cbz	r5, 8485a <__swsetup_r+0x16>
   84850:	69ab      	ldr	r3, [r5, #24]
   84852:	b913      	cbnz	r3, 8485a <__swsetup_r+0x16>
   84854:	4628      	mov	r0, r5
   84856:	f000 ffb5 	bl	857c4 <__sinit>
   8485a:	4b2e      	ldr	r3, [pc, #184]	; (84914 <__swsetup_r+0xd0>)
   8485c:	429c      	cmp	r4, r3
   8485e:	d101      	bne.n	84864 <__swsetup_r+0x20>
   84860:	686c      	ldr	r4, [r5, #4]
   84862:	e008      	b.n	84876 <__swsetup_r+0x32>
   84864:	4b2c      	ldr	r3, [pc, #176]	; (84918 <__swsetup_r+0xd4>)
   84866:	429c      	cmp	r4, r3
   84868:	d101      	bne.n	8486e <__swsetup_r+0x2a>
   8486a:	68ac      	ldr	r4, [r5, #8]
   8486c:	e003      	b.n	84876 <__swsetup_r+0x32>
   8486e:	4b2b      	ldr	r3, [pc, #172]	; (8491c <__swsetup_r+0xd8>)
   84870:	429c      	cmp	r4, r3
   84872:	bf08      	it	eq
   84874:	68ec      	ldreq	r4, [r5, #12]
   84876:	89a2      	ldrh	r2, [r4, #12]
   84878:	b293      	uxth	r3, r2
   8487a:	0719      	lsls	r1, r3, #28
   8487c:	d420      	bmi.n	848c0 <__swsetup_r+0x7c>
   8487e:	06dd      	lsls	r5, r3, #27
   84880:	d405      	bmi.n	8488e <__swsetup_r+0x4a>
   84882:	2309      	movs	r3, #9
   84884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84888:	6033      	str	r3, [r6, #0]
   8488a:	81a2      	strh	r2, [r4, #12]
   8488c:	e03b      	b.n	84906 <__swsetup_r+0xc2>
   8488e:	0758      	lsls	r0, r3, #29
   84890:	d512      	bpl.n	848b8 <__swsetup_r+0x74>
   84892:	6b61      	ldr	r1, [r4, #52]	; 0x34
   84894:	b141      	cbz	r1, 848a8 <__swsetup_r+0x64>
   84896:	f104 0344 	add.w	r3, r4, #68	; 0x44
   8489a:	4299      	cmp	r1, r3
   8489c:	d002      	beq.n	848a4 <__swsetup_r+0x60>
   8489e:	4630      	mov	r0, r6
   848a0:	f001 fb52 	bl	85f48 <_free_r>
   848a4:	2300      	movs	r3, #0
   848a6:	6363      	str	r3, [r4, #52]	; 0x34
   848a8:	89a3      	ldrh	r3, [r4, #12]
   848aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   848ae:	81a3      	strh	r3, [r4, #12]
   848b0:	2300      	movs	r3, #0
   848b2:	6063      	str	r3, [r4, #4]
   848b4:	6923      	ldr	r3, [r4, #16]
   848b6:	6023      	str	r3, [r4, #0]
   848b8:	89a3      	ldrh	r3, [r4, #12]
   848ba:	f043 0308 	orr.w	r3, r3, #8
   848be:	81a3      	strh	r3, [r4, #12]
   848c0:	6923      	ldr	r3, [r4, #16]
   848c2:	b94b      	cbnz	r3, 848d8 <__swsetup_r+0x94>
   848c4:	89a3      	ldrh	r3, [r4, #12]
   848c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
   848ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   848ce:	d003      	beq.n	848d8 <__swsetup_r+0x94>
   848d0:	4630      	mov	r0, r6
   848d2:	4621      	mov	r1, r4
   848d4:	f000 ffe4 	bl	858a0 <__smakebuf_r>
   848d8:	89a3      	ldrh	r3, [r4, #12]
   848da:	f013 0201 	ands.w	r2, r3, #1
   848de:	d005      	beq.n	848ec <__swsetup_r+0xa8>
   848e0:	2200      	movs	r2, #0
   848e2:	60a2      	str	r2, [r4, #8]
   848e4:	6962      	ldr	r2, [r4, #20]
   848e6:	4252      	negs	r2, r2
   848e8:	61a2      	str	r2, [r4, #24]
   848ea:	e003      	b.n	848f4 <__swsetup_r+0xb0>
   848ec:	0799      	lsls	r1, r3, #30
   848ee:	bf58      	it	pl
   848f0:	6962      	ldrpl	r2, [r4, #20]
   848f2:	60a2      	str	r2, [r4, #8]
   848f4:	6922      	ldr	r2, [r4, #16]
   848f6:	b94a      	cbnz	r2, 8490c <__swsetup_r+0xc8>
   848f8:	f003 0080 	and.w	r0, r3, #128	; 0x80
   848fc:	b280      	uxth	r0, r0
   848fe:	b130      	cbz	r0, 8490e <__swsetup_r+0xca>
   84900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84904:	81a3      	strh	r3, [r4, #12]
   84906:	f04f 30ff 	mov.w	r0, #4294967295
   8490a:	bd70      	pop	{r4, r5, r6, pc}
   8490c:	2000      	movs	r0, #0
   8490e:	bd70      	pop	{r4, r5, r6, pc}
   84910:	200701b0 	.word	0x200701b0
   84914:	000872a8 	.word	0x000872a8
   84918:	000872c8 	.word	0x000872c8
   8491c:	000872e8 	.word	0x000872e8

00084920 <quorem>:
   84920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84924:	6903      	ldr	r3, [r0, #16]
   84926:	690c      	ldr	r4, [r1, #16]
   84928:	4680      	mov	r8, r0
   8492a:	42a3      	cmp	r3, r4
   8492c:	f2c0 8083 	blt.w	84a36 <quorem+0x116>
   84930:	3c01      	subs	r4, #1
   84932:	00a2      	lsls	r2, r4, #2
   84934:	f101 0714 	add.w	r7, r1, #20
   84938:	f100 0514 	add.w	r5, r0, #20
   8493c:	4691      	mov	r9, r2
   8493e:	9200      	str	r2, [sp, #0]
   84940:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   84944:	442a      	add	r2, r5
   84946:	9201      	str	r2, [sp, #4]
   84948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   8494c:	3601      	adds	r6, #1
   8494e:	fbb2 f6f6 	udiv	r6, r2, r6
   84952:	44b9      	add	r9, r7
   84954:	2e00      	cmp	r6, #0
   84956:	d03b      	beq.n	849d0 <quorem+0xb0>
   84958:	f04f 0e00 	mov.w	lr, #0
   8495c:	463a      	mov	r2, r7
   8495e:	4628      	mov	r0, r5
   84960:	46f3      	mov	fp, lr
   84962:	f852 cb04 	ldr.w	ip, [r2], #4
   84966:	6803      	ldr	r3, [r0, #0]
   84968:	fa1f fa8c 	uxth.w	sl, ip
   8496c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   84970:	fb0a ea06 	mla	sl, sl, r6, lr
   84974:	fb0c fc06 	mul.w	ip, ip, r6
   84978:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
   8497c:	fa1f fa8a 	uxth.w	sl, sl
   84980:	ebca 0b0b 	rsb	fp, sl, fp
   84984:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   84988:	fa1f fa83 	uxth.w	sl, r3
   8498c:	fa1f fc8c 	uxth.w	ip, ip
   84990:	44da      	add	sl, fp
   84992:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
   84996:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
   8499a:	fa1f fa8a 	uxth.w	sl, sl
   8499e:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
   849a2:	454a      	cmp	r2, r9
   849a4:	ea4f 4b2c 	mov.w	fp, ip, asr #16
   849a8:	f840 ab04 	str.w	sl, [r0], #4
   849ac:	d9d9      	bls.n	84962 <quorem+0x42>
   849ae:	9a00      	ldr	r2, [sp, #0]
   849b0:	58ab      	ldr	r3, [r5, r2]
   849b2:	b96b      	cbnz	r3, 849d0 <quorem+0xb0>
   849b4:	9a01      	ldr	r2, [sp, #4]
   849b6:	1f13      	subs	r3, r2, #4
   849b8:	42ab      	cmp	r3, r5
   849ba:	461a      	mov	r2, r3
   849bc:	d802      	bhi.n	849c4 <quorem+0xa4>
   849be:	f8c8 4010 	str.w	r4, [r8, #16]
   849c2:	e005      	b.n	849d0 <quorem+0xb0>
   849c4:	6812      	ldr	r2, [r2, #0]
   849c6:	3b04      	subs	r3, #4
   849c8:	2a00      	cmp	r2, #0
   849ca:	d1f8      	bne.n	849be <quorem+0x9e>
   849cc:	3c01      	subs	r4, #1
   849ce:	e7f3      	b.n	849b8 <quorem+0x98>
   849d0:	4640      	mov	r0, r8
   849d2:	f001 f9dc 	bl	85d8e <__mcmp>
   849d6:	2800      	cmp	r0, #0
   849d8:	db2b      	blt.n	84a32 <quorem+0x112>
   849da:	3601      	adds	r6, #1
   849dc:	462b      	mov	r3, r5
   849de:	2000      	movs	r0, #0
   849e0:	f857 cb04 	ldr.w	ip, [r7], #4
   849e4:	681a      	ldr	r2, [r3, #0]
   849e6:	fa1f f18c 	uxth.w	r1, ip
   849ea:	1a41      	subs	r1, r0, r1
   849ec:	fa1f fa82 	uxth.w	sl, r2
   849f0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   849f4:	4451      	add	r1, sl
   849f6:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
   849fa:	eb02 4221 	add.w	r2, r2, r1, asr #16
   849fe:	b289      	uxth	r1, r1
   84a00:	1410      	asrs	r0, r2, #16
   84a02:	454f      	cmp	r7, r9
   84a04:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   84a08:	f843 2b04 	str.w	r2, [r3], #4
   84a0c:	d9e8      	bls.n	849e0 <quorem+0xc0>
   84a0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   84a12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   84a16:	b962      	cbnz	r2, 84a32 <quorem+0x112>
   84a18:	3b04      	subs	r3, #4
   84a1a:	42ab      	cmp	r3, r5
   84a1c:	461a      	mov	r2, r3
   84a1e:	d802      	bhi.n	84a26 <quorem+0x106>
   84a20:	f8c8 4010 	str.w	r4, [r8, #16]
   84a24:	e005      	b.n	84a32 <quorem+0x112>
   84a26:	6812      	ldr	r2, [r2, #0]
   84a28:	3b04      	subs	r3, #4
   84a2a:	2a00      	cmp	r2, #0
   84a2c:	d1f8      	bne.n	84a20 <quorem+0x100>
   84a2e:	3c01      	subs	r4, #1
   84a30:	e7f3      	b.n	84a1a <quorem+0xfa>
   84a32:	4630      	mov	r0, r6
   84a34:	e000      	b.n	84a38 <quorem+0x118>
   84a36:	2000      	movs	r0, #0
   84a38:	b003      	add	sp, #12
   84a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00084a40 <_dtoa_r>:
   84a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a44:	6a45      	ldr	r5, [r0, #36]	; 0x24
   84a46:	b09b      	sub	sp, #108	; 0x6c
   84a48:	4682      	mov	sl, r0
   84a4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84a4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   84a50:	b945      	cbnz	r5, 84a64 <_dtoa_r+0x24>
   84a52:	2010      	movs	r0, #16
   84a54:	f000 ff70 	bl	85938 <malloc>
   84a58:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
   84a5c:	6045      	str	r5, [r0, #4]
   84a5e:	6085      	str	r5, [r0, #8]
   84a60:	6005      	str	r5, [r0, #0]
   84a62:	60c5      	str	r5, [r0, #12]
   84a64:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   84a68:	6819      	ldr	r1, [r3, #0]
   84a6a:	b161      	cbz	r1, 84a86 <_dtoa_r+0x46>
   84a6c:	685b      	ldr	r3, [r3, #4]
   84a6e:	2201      	movs	r2, #1
   84a70:	604b      	str	r3, [r1, #4]
   84a72:	fa02 f303 	lsl.w	r3, r2, r3
   84a76:	4650      	mov	r0, sl
   84a78:	608b      	str	r3, [r1, #8]
   84a7a:	f000 ffa8 	bl	859ce <_Bfree>
   84a7e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   84a82:	2200      	movs	r2, #0
   84a84:	601a      	str	r2, [r3, #0]
   84a86:	9805      	ldr	r0, [sp, #20]
   84a88:	2800      	cmp	r0, #0
   84a8a:	da05      	bge.n	84a98 <_dtoa_r+0x58>
   84a8c:	2301      	movs	r3, #1
   84a8e:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   84a92:	6023      	str	r3, [r4, #0]
   84a94:	9105      	str	r1, [sp, #20]
   84a96:	e001      	b.n	84a9c <_dtoa_r+0x5c>
   84a98:	2300      	movs	r3, #0
   84a9a:	6023      	str	r3, [r4, #0]
   84a9c:	9f05      	ldr	r7, [sp, #20]
   84a9e:	4a9c      	ldr	r2, [pc, #624]	; (84d10 <_dtoa_r+0x2d0>)
   84aa0:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   84aa4:	0d1b      	lsrs	r3, r3, #20
   84aa6:	051b      	lsls	r3, r3, #20
   84aa8:	4293      	cmp	r3, r2
   84aaa:	d11d      	bne.n	84ae8 <_dtoa_r+0xa8>
   84aac:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84aae:	f242 730f 	movw	r3, #9999	; 0x270f
   84ab2:	6013      	str	r3, [r2, #0]
   84ab4:	9b04      	ldr	r3, [sp, #16]
   84ab6:	b943      	cbnz	r3, 84aca <_dtoa_r+0x8a>
   84ab8:	4b96      	ldr	r3, [pc, #600]	; (84d14 <_dtoa_r+0x2d4>)
   84aba:	4a97      	ldr	r2, [pc, #604]	; (84d18 <_dtoa_r+0x2d8>)
   84abc:	f3c7 0013 	ubfx	r0, r7, #0, #20
   84ac0:	2800      	cmp	r0, #0
   84ac2:	bf0c      	ite	eq
   84ac4:	4610      	moveq	r0, r2
   84ac6:	4618      	movne	r0, r3
   84ac8:	e000      	b.n	84acc <_dtoa_r+0x8c>
   84aca:	4892      	ldr	r0, [pc, #584]	; (84d14 <_dtoa_r+0x2d4>)
   84acc:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   84ace:	2f00      	cmp	r7, #0
   84ad0:	f000 8571 	beq.w	855b6 <_dtoa_r+0xb76>
   84ad4:	78c3      	ldrb	r3, [r0, #3]
   84ad6:	b113      	cbz	r3, 84ade <_dtoa_r+0x9e>
   84ad8:	f100 0308 	add.w	r3, r0, #8
   84adc:	e000      	b.n	84ae0 <_dtoa_r+0xa0>
   84ade:	1cc3      	adds	r3, r0, #3
   84ae0:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   84ae2:	603b      	str	r3, [r7, #0]
   84ae4:	f000 bd67 	b.w	855b6 <_dtoa_r+0xb76>
   84ae8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   84aec:	2200      	movs	r2, #0
   84aee:	4620      	mov	r0, r4
   84af0:	4629      	mov	r1, r5
   84af2:	2300      	movs	r3, #0
   84af4:	f001 ffbe 	bl	86a74 <__aeabi_dcmpeq>
   84af8:	4680      	mov	r8, r0
   84afa:	b158      	cbz	r0, 84b14 <_dtoa_r+0xd4>
   84afc:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84afe:	2301      	movs	r3, #1
   84b00:	603b      	str	r3, [r7, #0]
   84b02:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   84b04:	2f00      	cmp	r7, #0
   84b06:	f000 8553 	beq.w	855b0 <_dtoa_r+0xb70>
   84b0a:	4884      	ldr	r0, [pc, #528]	; (84d1c <_dtoa_r+0x2dc>)
   84b0c:	6038      	str	r0, [r7, #0]
   84b0e:	3801      	subs	r0, #1
   84b10:	f000 bd51 	b.w	855b6 <_dtoa_r+0xb76>
   84b14:	ab19      	add	r3, sp, #100	; 0x64
   84b16:	9300      	str	r3, [sp, #0]
   84b18:	ab18      	add	r3, sp, #96	; 0x60
   84b1a:	9301      	str	r3, [sp, #4]
   84b1c:	4650      	mov	r0, sl
   84b1e:	4622      	mov	r2, r4
   84b20:	462b      	mov	r3, r5
   84b22:	f001 f9b0 	bl	85e86 <__d2b>
   84b26:	f3c7 560a 	ubfx	r6, r7, #20, #11
   84b2a:	4683      	mov	fp, r0
   84b2c:	b15e      	cbz	r6, 84b46 <_dtoa_r+0x106>
   84b2e:	f3c5 0313 	ubfx	r3, r5, #0, #20
   84b32:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   84b36:	4620      	mov	r0, r4
   84b38:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   84b3c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   84b40:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
   84b44:	e01c      	b.n	84b80 <_dtoa_r+0x140>
   84b46:	9b19      	ldr	r3, [sp, #100]	; 0x64
   84b48:	9e18      	ldr	r6, [sp, #96]	; 0x60
   84b4a:	441e      	add	r6, r3
   84b4c:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   84b50:	429e      	cmp	r6, r3
   84b52:	db09      	blt.n	84b68 <_dtoa_r+0x128>
   84b54:	9904      	ldr	r1, [sp, #16]
   84b56:	331f      	adds	r3, #31
   84b58:	f206 4012 	addw	r0, r6, #1042	; 0x412
   84b5c:	1b9b      	subs	r3, r3, r6
   84b5e:	fa21 f000 	lsr.w	r0, r1, r0
   84b62:	409f      	lsls	r7, r3
   84b64:	4338      	orrs	r0, r7
   84b66:	e004      	b.n	84b72 <_dtoa_r+0x132>
   84b68:	486d      	ldr	r0, [pc, #436]	; (84d20 <_dtoa_r+0x2e0>)
   84b6a:	9a04      	ldr	r2, [sp, #16]
   84b6c:	1b80      	subs	r0, r0, r6
   84b6e:	fa02 f000 	lsl.w	r0, r2, r0
   84b72:	f001 fca1 	bl	864b8 <__aeabi_ui2d>
   84b76:	2701      	movs	r7, #1
   84b78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   84b7c:	3e01      	subs	r6, #1
   84b7e:	9715      	str	r7, [sp, #84]	; 0x54
   84b80:	2200      	movs	r2, #0
   84b82:	4b68      	ldr	r3, [pc, #416]	; (84d24 <_dtoa_r+0x2e4>)
   84b84:	f001 fb5a 	bl	8623c <__aeabi_dsub>
   84b88:	a35b      	add	r3, pc, #364	; (adr r3, 84cf8 <_dtoa_r+0x2b8>)
   84b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   84b8e:	f001 fd09 	bl	865a4 <__aeabi_dmul>
   84b92:	a35b      	add	r3, pc, #364	; (adr r3, 84d00 <_dtoa_r+0x2c0>)
   84b94:	e9d3 2300 	ldrd	r2, r3, [r3]
   84b98:	f001 fb52 	bl	86240 <__adddf3>
   84b9c:	4604      	mov	r4, r0
   84b9e:	4630      	mov	r0, r6
   84ba0:	460d      	mov	r5, r1
   84ba2:	f001 fc99 	bl	864d8 <__aeabi_i2d>
   84ba6:	a358      	add	r3, pc, #352	; (adr r3, 84d08 <_dtoa_r+0x2c8>)
   84ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
   84bac:	f001 fcfa 	bl	865a4 <__aeabi_dmul>
   84bb0:	4602      	mov	r2, r0
   84bb2:	460b      	mov	r3, r1
   84bb4:	4620      	mov	r0, r4
   84bb6:	4629      	mov	r1, r5
   84bb8:	f001 fb42 	bl	86240 <__adddf3>
   84bbc:	4604      	mov	r4, r0
   84bbe:	460d      	mov	r5, r1
   84bc0:	f001 ff8a 	bl	86ad8 <__aeabi_d2iz>
   84bc4:	4629      	mov	r1, r5
   84bc6:	4681      	mov	r9, r0
   84bc8:	2200      	movs	r2, #0
   84bca:	4620      	mov	r0, r4
   84bcc:	2300      	movs	r3, #0
   84bce:	f001 ff5b 	bl	86a88 <__aeabi_dcmplt>
   84bd2:	b158      	cbz	r0, 84bec <_dtoa_r+0x1ac>
   84bd4:	4648      	mov	r0, r9
   84bd6:	f001 fc7f 	bl	864d8 <__aeabi_i2d>
   84bda:	4602      	mov	r2, r0
   84bdc:	460b      	mov	r3, r1
   84bde:	4620      	mov	r0, r4
   84be0:	4629      	mov	r1, r5
   84be2:	f001 ff47 	bl	86a74 <__aeabi_dcmpeq>
   84be6:	b908      	cbnz	r0, 84bec <_dtoa_r+0x1ac>
   84be8:	f109 39ff 	add.w	r9, r9, #4294967295
   84bec:	f1b9 0f16 	cmp.w	r9, #22
   84bf0:	d80d      	bhi.n	84c0e <_dtoa_r+0x1ce>
   84bf2:	4b4d      	ldr	r3, [pc, #308]	; (84d28 <_dtoa_r+0x2e8>)
   84bf4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   84bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
   84bfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   84c00:	f001 ff60 	bl	86ac4 <__aeabi_dcmpgt>
   84c04:	b130      	cbz	r0, 84c14 <_dtoa_r+0x1d4>
   84c06:	f109 39ff 	add.w	r9, r9, #4294967295
   84c0a:	2700      	movs	r7, #0
   84c0c:	e000      	b.n	84c10 <_dtoa_r+0x1d0>
   84c0e:	2701      	movs	r7, #1
   84c10:	9714      	str	r7, [sp, #80]	; 0x50
   84c12:	e000      	b.n	84c16 <_dtoa_r+0x1d6>
   84c14:	9014      	str	r0, [sp, #80]	; 0x50
   84c16:	9b18      	ldr	r3, [sp, #96]	; 0x60
   84c18:	1b9e      	subs	r6, r3, r6
   84c1a:	3e01      	subs	r6, #1
   84c1c:	9609      	str	r6, [sp, #36]	; 0x24
   84c1e:	d504      	bpl.n	84c2a <_dtoa_r+0x1ea>
   84c20:	4277      	negs	r7, r6
   84c22:	9708      	str	r7, [sp, #32]
   84c24:	2700      	movs	r7, #0
   84c26:	9709      	str	r7, [sp, #36]	; 0x24
   84c28:	e001      	b.n	84c2e <_dtoa_r+0x1ee>
   84c2a:	2700      	movs	r7, #0
   84c2c:	9708      	str	r7, [sp, #32]
   84c2e:	f1b9 0f00 	cmp.w	r9, #0
   84c32:	db07      	blt.n	84c44 <_dtoa_r+0x204>
   84c34:	9f09      	ldr	r7, [sp, #36]	; 0x24
   84c36:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   84c3a:	444f      	add	r7, r9
   84c3c:	9709      	str	r7, [sp, #36]	; 0x24
   84c3e:	2700      	movs	r7, #0
   84c40:	970e      	str	r7, [sp, #56]	; 0x38
   84c42:	e008      	b.n	84c56 <_dtoa_r+0x216>
   84c44:	9f08      	ldr	r7, [sp, #32]
   84c46:	ebc9 0707 	rsb	r7, r9, r7
   84c4a:	9708      	str	r7, [sp, #32]
   84c4c:	f1c9 0700 	rsb	r7, r9, #0
   84c50:	970e      	str	r7, [sp, #56]	; 0x38
   84c52:	2700      	movs	r7, #0
   84c54:	9711      	str	r7, [sp, #68]	; 0x44
   84c56:	9f24      	ldr	r7, [sp, #144]	; 0x90
   84c58:	2f09      	cmp	r7, #9
   84c5a:	d829      	bhi.n	84cb0 <_dtoa_r+0x270>
   84c5c:	2f05      	cmp	r7, #5
   84c5e:	bfc4      	itt	gt
   84c60:	3f04      	subgt	r7, #4
   84c62:	9724      	strgt	r7, [sp, #144]	; 0x90
   84c64:	9f24      	ldr	r7, [sp, #144]	; 0x90
   84c66:	bfc8      	it	gt
   84c68:	2500      	movgt	r5, #0
   84c6a:	f1a7 0302 	sub.w	r3, r7, #2
   84c6e:	bfd8      	it	le
   84c70:	2501      	movle	r5, #1
   84c72:	2b03      	cmp	r3, #3
   84c74:	d821      	bhi.n	84cba <_dtoa_r+0x27a>
   84c76:	e8df f003 	tbb	[pc, r3]
   84c7a:	0f06      	.short	0x0f06
   84c7c:	0402      	.short	0x0402
   84c7e:	2701      	movs	r7, #1
   84c80:	e002      	b.n	84c88 <_dtoa_r+0x248>
   84c82:	2701      	movs	r7, #1
   84c84:	e009      	b.n	84c9a <_dtoa_r+0x25a>
   84c86:	2700      	movs	r7, #0
   84c88:	970f      	str	r7, [sp, #60]	; 0x3c
   84c8a:	9f25      	ldr	r7, [sp, #148]	; 0x94
   84c8c:	2f00      	cmp	r7, #0
   84c8e:	dd1e      	ble.n	84cce <_dtoa_r+0x28e>
   84c90:	970b      	str	r7, [sp, #44]	; 0x2c
   84c92:	9707      	str	r7, [sp, #28]
   84c94:	463b      	mov	r3, r7
   84c96:	e01f      	b.n	84cd8 <_dtoa_r+0x298>
   84c98:	2700      	movs	r7, #0
   84c9a:	970f      	str	r7, [sp, #60]	; 0x3c
   84c9c:	9f25      	ldr	r7, [sp, #148]	; 0x94
   84c9e:	444f      	add	r7, r9
   84ca0:	970b      	str	r7, [sp, #44]	; 0x2c
   84ca2:	3701      	adds	r7, #1
   84ca4:	463b      	mov	r3, r7
   84ca6:	9707      	str	r7, [sp, #28]
   84ca8:	2b01      	cmp	r3, #1
   84caa:	bfb8      	it	lt
   84cac:	2301      	movlt	r3, #1
   84cae:	e013      	b.n	84cd8 <_dtoa_r+0x298>
   84cb0:	2501      	movs	r5, #1
   84cb2:	2700      	movs	r7, #0
   84cb4:	9724      	str	r7, [sp, #144]	; 0x90
   84cb6:	950f      	str	r5, [sp, #60]	; 0x3c
   84cb8:	e001      	b.n	84cbe <_dtoa_r+0x27e>
   84cba:	2701      	movs	r7, #1
   84cbc:	970f      	str	r7, [sp, #60]	; 0x3c
   84cbe:	f04f 37ff 	mov.w	r7, #4294967295
   84cc2:	970b      	str	r7, [sp, #44]	; 0x2c
   84cc4:	9707      	str	r7, [sp, #28]
   84cc6:	2700      	movs	r7, #0
   84cc8:	2312      	movs	r3, #18
   84cca:	9725      	str	r7, [sp, #148]	; 0x94
   84ccc:	e004      	b.n	84cd8 <_dtoa_r+0x298>
   84cce:	2701      	movs	r7, #1
   84cd0:	970b      	str	r7, [sp, #44]	; 0x2c
   84cd2:	9707      	str	r7, [sp, #28]
   84cd4:	463b      	mov	r3, r7
   84cd6:	9725      	str	r7, [sp, #148]	; 0x94
   84cd8:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
   84cdc:	2200      	movs	r2, #0
   84cde:	6062      	str	r2, [r4, #4]
   84ce0:	2104      	movs	r1, #4
   84ce2:	f101 0214 	add.w	r2, r1, #20
   84ce6:	429a      	cmp	r2, r3
   84ce8:	d820      	bhi.n	84d2c <_dtoa_r+0x2ec>
   84cea:	6862      	ldr	r2, [r4, #4]
   84cec:	0049      	lsls	r1, r1, #1
   84cee:	3201      	adds	r2, #1
   84cf0:	6062      	str	r2, [r4, #4]
   84cf2:	e7f6      	b.n	84ce2 <_dtoa_r+0x2a2>
   84cf4:	f3af 8000 	nop.w
   84cf8:	636f4361 	.word	0x636f4361
   84cfc:	3fd287a7 	.word	0x3fd287a7
   84d00:	8b60c8b3 	.word	0x8b60c8b3
   84d04:	3fc68a28 	.word	0x3fc68a28
   84d08:	509f79fb 	.word	0x509f79fb
   84d0c:	3fd34413 	.word	0x3fd34413
   84d10:	7ff00000 	.word	0x7ff00000
   84d14:	000872a2 	.word	0x000872a2
   84d18:	00087299 	.word	0x00087299
   84d1c:	00087276 	.word	0x00087276
   84d20:	fffffbee 	.word	0xfffffbee
   84d24:	3ff80000 	.word	0x3ff80000
   84d28:	00087310 	.word	0x00087310
   84d2c:	4650      	mov	r0, sl
   84d2e:	6861      	ldr	r1, [r4, #4]
   84d30:	f000 fe18 	bl	85964 <_Balloc>
   84d34:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   84d38:	6020      	str	r0, [r4, #0]
   84d3a:	9f07      	ldr	r7, [sp, #28]
   84d3c:	681b      	ldr	r3, [r3, #0]
   84d3e:	2f0e      	cmp	r7, #14
   84d40:	930a      	str	r3, [sp, #40]	; 0x28
   84d42:	f200 816b 	bhi.w	8501c <_dtoa_r+0x5dc>
   84d46:	2d00      	cmp	r5, #0
   84d48:	f000 8168 	beq.w	8501c <_dtoa_r+0x5dc>
   84d4c:	f1b9 0f00 	cmp.w	r9, #0
   84d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   84d54:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   84d58:	dd31      	ble.n	84dbe <_dtoa_r+0x37e>
   84d5a:	4a81      	ldr	r2, [pc, #516]	; (84f60 <_dtoa_r+0x520>)
   84d5c:	f009 030f 	and.w	r3, r9, #15
   84d60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   84d64:	ea4f 1429 	mov.w	r4, r9, asr #4
   84d68:	e9d3 0100 	ldrd	r0, r1, [r3]
   84d6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   84d70:	06e0      	lsls	r0, r4, #27
   84d72:	d50c      	bpl.n	84d8e <_dtoa_r+0x34e>
   84d74:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   84d78:	4b7a      	ldr	r3, [pc, #488]	; (84f64 <_dtoa_r+0x524>)
   84d7a:	f004 040f 	and.w	r4, r4, #15
   84d7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   84d82:	f001 fd39 	bl	867f8 <__aeabi_ddiv>
   84d86:	2703      	movs	r7, #3
   84d88:	e9cd 0104 	strd	r0, r1, [sp, #16]
   84d8c:	e000      	b.n	84d90 <_dtoa_r+0x350>
   84d8e:	2702      	movs	r7, #2
   84d90:	4d74      	ldr	r5, [pc, #464]	; (84f64 <_dtoa_r+0x524>)
   84d92:	b16c      	cbz	r4, 84db0 <_dtoa_r+0x370>
   84d94:	07e1      	lsls	r1, r4, #31
   84d96:	d508      	bpl.n	84daa <_dtoa_r+0x36a>
   84d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   84d9c:	e9d5 2300 	ldrd	r2, r3, [r5]
   84da0:	f001 fc00 	bl	865a4 <__aeabi_dmul>
   84da4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   84da8:	3701      	adds	r7, #1
   84daa:	1064      	asrs	r4, r4, #1
   84dac:	3508      	adds	r5, #8
   84dae:	e7f0      	b.n	84d92 <_dtoa_r+0x352>
   84db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   84db4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   84db8:	f001 fd1e 	bl	867f8 <__aeabi_ddiv>
   84dbc:	e01b      	b.n	84df6 <_dtoa_r+0x3b6>
   84dbe:	f1c9 0400 	rsb	r4, r9, #0
   84dc2:	b1dc      	cbz	r4, 84dfc <_dtoa_r+0x3bc>
   84dc4:	4b66      	ldr	r3, [pc, #408]	; (84f60 <_dtoa_r+0x520>)
   84dc6:	f004 020f 	and.w	r2, r4, #15
   84dca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84dce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   84dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   84dd6:	f001 fbe5 	bl	865a4 <__aeabi_dmul>
   84dda:	4d62      	ldr	r5, [pc, #392]	; (84f64 <_dtoa_r+0x524>)
   84ddc:	1124      	asrs	r4, r4, #4
   84dde:	2702      	movs	r7, #2
   84de0:	b14c      	cbz	r4, 84df6 <_dtoa_r+0x3b6>
   84de2:	07e2      	lsls	r2, r4, #31
   84de4:	d504      	bpl.n	84df0 <_dtoa_r+0x3b0>
   84de6:	e9d5 2300 	ldrd	r2, r3, [r5]
   84dea:	3701      	adds	r7, #1
   84dec:	f001 fbda 	bl	865a4 <__aeabi_dmul>
   84df0:	1064      	asrs	r4, r4, #1
   84df2:	3508      	adds	r5, #8
   84df4:	e7f4      	b.n	84de0 <_dtoa_r+0x3a0>
   84df6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   84dfa:	e000      	b.n	84dfe <_dtoa_r+0x3be>
   84dfc:	2702      	movs	r7, #2
   84dfe:	9914      	ldr	r1, [sp, #80]	; 0x50
   84e00:	b1e9      	cbz	r1, 84e3e <_dtoa_r+0x3fe>
   84e02:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   84e06:	2200      	movs	r2, #0
   84e08:	4620      	mov	r0, r4
   84e0a:	4629      	mov	r1, r5
   84e0c:	4b56      	ldr	r3, [pc, #344]	; (84f68 <_dtoa_r+0x528>)
   84e0e:	f001 fe3b 	bl	86a88 <__aeabi_dcmplt>
   84e12:	b1c8      	cbz	r0, 84e48 <_dtoa_r+0x408>
   84e14:	9a07      	ldr	r2, [sp, #28]
   84e16:	b1e2      	cbz	r2, 84e52 <_dtoa_r+0x412>
   84e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84e1a:	2b00      	cmp	r3, #0
   84e1c:	f340 80fa 	ble.w	85014 <_dtoa_r+0x5d4>
   84e20:	f109 30ff 	add.w	r0, r9, #4294967295
   84e24:	9010      	str	r0, [sp, #64]	; 0x40
   84e26:	4629      	mov	r1, r5
   84e28:	4620      	mov	r0, r4
   84e2a:	2200      	movs	r2, #0
   84e2c:	4b4f      	ldr	r3, [pc, #316]	; (84f6c <_dtoa_r+0x52c>)
   84e2e:	f001 fbb9 	bl	865a4 <__aeabi_dmul>
   84e32:	e9cd 0104 	strd	r0, r1, [sp, #16]
   84e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84e38:	3701      	adds	r7, #1
   84e3a:	910c      	str	r1, [sp, #48]	; 0x30
   84e3c:	e00d      	b.n	84e5a <_dtoa_r+0x41a>
   84e3e:	9a07      	ldr	r2, [sp, #28]
   84e40:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   84e44:	920c      	str	r2, [sp, #48]	; 0x30
   84e46:	e008      	b.n	84e5a <_dtoa_r+0x41a>
   84e48:	9b07      	ldr	r3, [sp, #28]
   84e4a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   84e4e:	930c      	str	r3, [sp, #48]	; 0x30
   84e50:	e003      	b.n	84e5a <_dtoa_r+0x41a>
   84e52:	9807      	ldr	r0, [sp, #28]
   84e54:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   84e58:	900c      	str	r0, [sp, #48]	; 0x30
   84e5a:	4638      	mov	r0, r7
   84e5c:	f001 fb3c 	bl	864d8 <__aeabi_i2d>
   84e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   84e64:	f001 fb9e 	bl	865a4 <__aeabi_dmul>
   84e68:	2200      	movs	r2, #0
   84e6a:	4b41      	ldr	r3, [pc, #260]	; (84f70 <_dtoa_r+0x530>)
   84e6c:	f001 f9e8 	bl	86240 <__adddf3>
   84e70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84e72:	4604      	mov	r4, r0
   84e74:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
   84e78:	b9cf      	cbnz	r7, 84eae <_dtoa_r+0x46e>
   84e7a:	2200      	movs	r2, #0
   84e7c:	4b3d      	ldr	r3, [pc, #244]	; (84f74 <_dtoa_r+0x534>)
   84e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   84e82:	f001 f9db 	bl	8623c <__aeabi_dsub>
   84e86:	4622      	mov	r2, r4
   84e88:	462b      	mov	r3, r5
   84e8a:	4606      	mov	r6, r0
   84e8c:	460f      	mov	r7, r1
   84e8e:	f001 fe19 	bl	86ac4 <__aeabi_dcmpgt>
   84e92:	2800      	cmp	r0, #0
   84e94:	f040 8253 	bne.w	8533e <_dtoa_r+0x8fe>
   84e98:	4622      	mov	r2, r4
   84e9a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   84e9e:	4630      	mov	r0, r6
   84ea0:	4639      	mov	r1, r7
   84ea2:	f001 fdf1 	bl	86a88 <__aeabi_dcmplt>
   84ea6:	2800      	cmp	r0, #0
   84ea8:	f040 823f 	bne.w	8532a <_dtoa_r+0x8ea>
   84eac:	e0b2      	b.n	85014 <_dtoa_r+0x5d4>
   84eae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84eb0:	4b2b      	ldr	r3, [pc, #172]	; (84f60 <_dtoa_r+0x520>)
   84eb2:	1e7a      	subs	r2, r7, #1
   84eb4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   84eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84eba:	2f00      	cmp	r7, #0
   84ebc:	d05e      	beq.n	84f7c <_dtoa_r+0x53c>
   84ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
   84ec2:	2000      	movs	r0, #0
   84ec4:	492c      	ldr	r1, [pc, #176]	; (84f78 <_dtoa_r+0x538>)
   84ec6:	f001 fc97 	bl	867f8 <__aeabi_ddiv>
   84eca:	4622      	mov	r2, r4
   84ecc:	462b      	mov	r3, r5
   84ece:	f001 f9b5 	bl	8623c <__aeabi_dsub>
   84ed2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   84ed6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   84eda:	4604      	mov	r4, r0
   84edc:	460d      	mov	r5, r1
   84ede:	4639      	mov	r1, r7
   84ee0:	4630      	mov	r0, r6
   84ee2:	f001 fdf9 	bl	86ad8 <__aeabi_d2iz>
   84ee6:	9002      	str	r0, [sp, #8]
   84ee8:	f001 faf6 	bl	864d8 <__aeabi_i2d>
   84eec:	4602      	mov	r2, r0
   84eee:	460b      	mov	r3, r1
   84ef0:	4630      	mov	r0, r6
   84ef2:	4639      	mov	r1, r7
   84ef4:	f001 f9a2 	bl	8623c <__aeabi_dsub>
   84ef8:	f8dd c008 	ldr.w	ip, [sp, #8]
   84efc:	4622      	mov	r2, r4
   84efe:	f10c 0330 	add.w	r3, ip, #48	; 0x30
   84f02:	f808 3b01 	strb.w	r3, [r8], #1
   84f06:	462b      	mov	r3, r5
   84f08:	4606      	mov	r6, r0
   84f0a:	460f      	mov	r7, r1
   84f0c:	f001 fdbc 	bl	86a88 <__aeabi_dcmplt>
   84f10:	2800      	cmp	r0, #0
   84f12:	f040 833b 	bne.w	8558c <_dtoa_r+0xb4c>
   84f16:	4632      	mov	r2, r6
   84f18:	463b      	mov	r3, r7
   84f1a:	2000      	movs	r0, #0
   84f1c:	4912      	ldr	r1, [pc, #72]	; (84f68 <_dtoa_r+0x528>)
   84f1e:	f001 f98d 	bl	8623c <__aeabi_dsub>
   84f22:	4622      	mov	r2, r4
   84f24:	462b      	mov	r3, r5
   84f26:	f001 fdaf 	bl	86a88 <__aeabi_dcmplt>
   84f2a:	2800      	cmp	r0, #0
   84f2c:	f040 80d5 	bne.w	850da <_dtoa_r+0x69a>
   84f30:	980a      	ldr	r0, [sp, #40]	; 0x28
   84f32:	990c      	ldr	r1, [sp, #48]	; 0x30
   84f34:	ebc0 0308 	rsb	r3, r0, r8
   84f38:	428b      	cmp	r3, r1
   84f3a:	da6b      	bge.n	85014 <_dtoa_r+0x5d4>
   84f3c:	4620      	mov	r0, r4
   84f3e:	4629      	mov	r1, r5
   84f40:	2200      	movs	r2, #0
   84f42:	4b0a      	ldr	r3, [pc, #40]	; (84f6c <_dtoa_r+0x52c>)
   84f44:	f001 fb2e 	bl	865a4 <__aeabi_dmul>
   84f48:	2200      	movs	r2, #0
   84f4a:	4604      	mov	r4, r0
   84f4c:	460d      	mov	r5, r1
   84f4e:	4630      	mov	r0, r6
   84f50:	4639      	mov	r1, r7
   84f52:	4b06      	ldr	r3, [pc, #24]	; (84f6c <_dtoa_r+0x52c>)
   84f54:	f001 fb26 	bl	865a4 <__aeabi_dmul>
   84f58:	4606      	mov	r6, r0
   84f5a:	460f      	mov	r7, r1
   84f5c:	e7bf      	b.n	84ede <_dtoa_r+0x49e>
   84f5e:	bf00      	nop
   84f60:	00087310 	.word	0x00087310
   84f64:	000873d8 	.word	0x000873d8
   84f68:	3ff00000 	.word	0x3ff00000
   84f6c:	40240000 	.word	0x40240000
   84f70:	401c0000 	.word	0x401c0000
   84f74:	40140000 	.word	0x40140000
   84f78:	3fe00000 	.word	0x3fe00000
   84f7c:	4622      	mov	r2, r4
   84f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
   84f82:	462b      	mov	r3, r5
   84f84:	f001 fb0e 	bl	865a4 <__aeabi_dmul>
   84f88:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   84f8c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   84f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84f92:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   84f96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84f98:	4490      	add	r8, r2
   84f9a:	4639      	mov	r1, r7
   84f9c:	4630      	mov	r0, r6
   84f9e:	f001 fd9b 	bl	86ad8 <__aeabi_d2iz>
   84fa2:	4605      	mov	r5, r0
   84fa4:	f001 fa98 	bl	864d8 <__aeabi_i2d>
   84fa8:	4602      	mov	r2, r0
   84faa:	460b      	mov	r3, r1
   84fac:	4630      	mov	r0, r6
   84fae:	4639      	mov	r1, r7
   84fb0:	f001 f944 	bl	8623c <__aeabi_dsub>
   84fb4:	3530      	adds	r5, #48	; 0x30
   84fb6:	f804 5b01 	strb.w	r5, [r4], #1
   84fba:	4544      	cmp	r4, r8
   84fbc:	4606      	mov	r6, r0
   84fbe:	460f      	mov	r7, r1
   84fc0:	d121      	bne.n	85006 <_dtoa_r+0x5c6>
   84fc2:	2200      	movs	r2, #0
   84fc4:	4b87      	ldr	r3, [pc, #540]	; (851e4 <_dtoa_r+0x7a4>)
   84fc6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   84fca:	f001 f939 	bl	86240 <__adddf3>
   84fce:	4602      	mov	r2, r0
   84fd0:	460b      	mov	r3, r1
   84fd2:	4630      	mov	r0, r6
   84fd4:	4639      	mov	r1, r7
   84fd6:	f001 fd75 	bl	86ac4 <__aeabi_dcmpgt>
   84fda:	2800      	cmp	r0, #0
   84fdc:	d17d      	bne.n	850da <_dtoa_r+0x69a>
   84fde:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   84fe2:	2000      	movs	r0, #0
   84fe4:	497f      	ldr	r1, [pc, #508]	; (851e4 <_dtoa_r+0x7a4>)
   84fe6:	f001 f929 	bl	8623c <__aeabi_dsub>
   84fea:	4602      	mov	r2, r0
   84fec:	460b      	mov	r3, r1
   84fee:	4630      	mov	r0, r6
   84ff0:	4639      	mov	r1, r7
   84ff2:	f001 fd49 	bl	86a88 <__aeabi_dcmplt>
   84ff6:	b168      	cbz	r0, 85014 <_dtoa_r+0x5d4>
   84ff8:	46a0      	mov	r8, r4
   84ffa:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   84ffe:	3c01      	subs	r4, #1
   85000:	2b30      	cmp	r3, #48	; 0x30
   85002:	d0f9      	beq.n	84ff8 <_dtoa_r+0x5b8>
   85004:	e2c2      	b.n	8558c <_dtoa_r+0xb4c>
   85006:	2200      	movs	r2, #0
   85008:	4b77      	ldr	r3, [pc, #476]	; (851e8 <_dtoa_r+0x7a8>)
   8500a:	f001 facb 	bl	865a4 <__aeabi_dmul>
   8500e:	4606      	mov	r6, r0
   85010:	460f      	mov	r7, r1
   85012:	e7c2      	b.n	84f9a <_dtoa_r+0x55a>
   85014:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85018:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8501c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8501e:	2b00      	cmp	r3, #0
   85020:	db7c      	blt.n	8511c <_dtoa_r+0x6dc>
   85022:	f1b9 0f0e 	cmp.w	r9, #14
   85026:	dc79      	bgt.n	8511c <_dtoa_r+0x6dc>
   85028:	4b70      	ldr	r3, [pc, #448]	; (851ec <_dtoa_r+0x7ac>)
   8502a:	9f25      	ldr	r7, [sp, #148]	; 0x94
   8502c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   85030:	2f00      	cmp	r7, #0
   85032:	e9d3 4500 	ldrd	r4, r5, [r3]
   85036:	da14      	bge.n	85062 <_dtoa_r+0x622>
   85038:	9f07      	ldr	r7, [sp, #28]
   8503a:	2f00      	cmp	r7, #0
   8503c:	dc11      	bgt.n	85062 <_dtoa_r+0x622>
   8503e:	f040 8176 	bne.w	8532e <_dtoa_r+0x8ee>
   85042:	4620      	mov	r0, r4
   85044:	4629      	mov	r1, r5
   85046:	2200      	movs	r2, #0
   85048:	4b69      	ldr	r3, [pc, #420]	; (851f0 <_dtoa_r+0x7b0>)
   8504a:	f001 faab 	bl	865a4 <__aeabi_dmul>
   8504e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   85052:	f001 fd2d 	bl	86ab0 <__aeabi_dcmpge>
   85056:	9d07      	ldr	r5, [sp, #28]
   85058:	462c      	mov	r4, r5
   8505a:	2800      	cmp	r0, #0
   8505c:	f040 8169 	bne.w	85332 <_dtoa_r+0x8f2>
   85060:	e171      	b.n	85346 <_dtoa_r+0x906>
   85062:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   85066:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8506a:	4622      	mov	r2, r4
   8506c:	462b      	mov	r3, r5
   8506e:	4630      	mov	r0, r6
   85070:	4639      	mov	r1, r7
   85072:	f001 fbc1 	bl	867f8 <__aeabi_ddiv>
   85076:	f001 fd2f 	bl	86ad8 <__aeabi_d2iz>
   8507a:	9004      	str	r0, [sp, #16]
   8507c:	f001 fa2c 	bl	864d8 <__aeabi_i2d>
   85080:	4622      	mov	r2, r4
   85082:	462b      	mov	r3, r5
   85084:	f001 fa8e 	bl	865a4 <__aeabi_dmul>
   85088:	4602      	mov	r2, r0
   8508a:	460b      	mov	r3, r1
   8508c:	4630      	mov	r0, r6
   8508e:	4639      	mov	r1, r7
   85090:	f001 f8d4 	bl	8623c <__aeabi_dsub>
   85094:	9f04      	ldr	r7, [sp, #16]
   85096:	4602      	mov	r2, r0
   85098:	f107 0630 	add.w	r6, r7, #48	; 0x30
   8509c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   8509e:	f808 6b01 	strb.w	r6, [r8], #1
   850a2:	ebc7 0608 	rsb	r6, r7, r8
   850a6:	9f07      	ldr	r7, [sp, #28]
   850a8:	460b      	mov	r3, r1
   850aa:	42be      	cmp	r6, r7
   850ac:	d129      	bne.n	85102 <_dtoa_r+0x6c2>
   850ae:	f001 f8c7 	bl	86240 <__adddf3>
   850b2:	4622      	mov	r2, r4
   850b4:	462b      	mov	r3, r5
   850b6:	4606      	mov	r6, r0
   850b8:	460f      	mov	r7, r1
   850ba:	f001 fd03 	bl	86ac4 <__aeabi_dcmpgt>
   850be:	b970      	cbnz	r0, 850de <_dtoa_r+0x69e>
   850c0:	4630      	mov	r0, r6
   850c2:	4639      	mov	r1, r7
   850c4:	4622      	mov	r2, r4
   850c6:	462b      	mov	r3, r5
   850c8:	f001 fcd4 	bl	86a74 <__aeabi_dcmpeq>
   850cc:	2800      	cmp	r0, #0
   850ce:	f000 825f 	beq.w	85590 <_dtoa_r+0xb50>
   850d2:	9f04      	ldr	r7, [sp, #16]
   850d4:	07fb      	lsls	r3, r7, #31
   850d6:	d402      	bmi.n	850de <_dtoa_r+0x69e>
   850d8:	e25a      	b.n	85590 <_dtoa_r+0xb50>
   850da:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   850de:	4643      	mov	r3, r8
   850e0:	4698      	mov	r8, r3
   850e2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
   850e6:	3b01      	subs	r3, #1
   850e8:	2a39      	cmp	r2, #57	; 0x39
   850ea:	d106      	bne.n	850fa <_dtoa_r+0x6ba>
   850ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   850ee:	429f      	cmp	r7, r3
   850f0:	d1f6      	bne.n	850e0 <_dtoa_r+0x6a0>
   850f2:	2230      	movs	r2, #48	; 0x30
   850f4:	f109 0901 	add.w	r9, r9, #1
   850f8:	703a      	strb	r2, [r7, #0]
   850fa:	781a      	ldrb	r2, [r3, #0]
   850fc:	3201      	adds	r2, #1
   850fe:	701a      	strb	r2, [r3, #0]
   85100:	e246      	b.n	85590 <_dtoa_r+0xb50>
   85102:	2200      	movs	r2, #0
   85104:	4b38      	ldr	r3, [pc, #224]	; (851e8 <_dtoa_r+0x7a8>)
   85106:	f001 fa4d 	bl	865a4 <__aeabi_dmul>
   8510a:	2200      	movs	r2, #0
   8510c:	2300      	movs	r3, #0
   8510e:	4606      	mov	r6, r0
   85110:	460f      	mov	r7, r1
   85112:	f001 fcaf 	bl	86a74 <__aeabi_dcmpeq>
   85116:	2800      	cmp	r0, #0
   85118:	d0a7      	beq.n	8506a <_dtoa_r+0x62a>
   8511a:	e239      	b.n	85590 <_dtoa_r+0xb50>
   8511c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8511e:	2f00      	cmp	r7, #0
   85120:	d030      	beq.n	85184 <_dtoa_r+0x744>
   85122:	9f24      	ldr	r7, [sp, #144]	; 0x90
   85124:	2f01      	cmp	r7, #1
   85126:	dc0a      	bgt.n	8513e <_dtoa_r+0x6fe>
   85128:	9f15      	ldr	r7, [sp, #84]	; 0x54
   8512a:	b117      	cbz	r7, 85132 <_dtoa_r+0x6f2>
   8512c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   85130:	e002      	b.n	85138 <_dtoa_r+0x6f8>
   85132:	9b18      	ldr	r3, [sp, #96]	; 0x60
   85134:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   85138:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   8513a:	9e08      	ldr	r6, [sp, #32]
   8513c:	e016      	b.n	8516c <_dtoa_r+0x72c>
   8513e:	9f07      	ldr	r7, [sp, #28]
   85140:	1e7d      	subs	r5, r7, #1
   85142:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   85144:	42af      	cmp	r7, r5
   85146:	db01      	blt.n	8514c <_dtoa_r+0x70c>
   85148:	1b7d      	subs	r5, r7, r5
   8514a:	e006      	b.n	8515a <_dtoa_r+0x71a>
   8514c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   8514e:	950e      	str	r5, [sp, #56]	; 0x38
   85150:	1beb      	subs	r3, r5, r7
   85152:	9f11      	ldr	r7, [sp, #68]	; 0x44
   85154:	2500      	movs	r5, #0
   85156:	441f      	add	r7, r3
   85158:	9711      	str	r7, [sp, #68]	; 0x44
   8515a:	9f07      	ldr	r7, [sp, #28]
   8515c:	2f00      	cmp	r7, #0
   8515e:	da03      	bge.n	85168 <_dtoa_r+0x728>
   85160:	9808      	ldr	r0, [sp, #32]
   85162:	2300      	movs	r3, #0
   85164:	1bc6      	subs	r6, r0, r7
   85166:	e001      	b.n	8516c <_dtoa_r+0x72c>
   85168:	9e08      	ldr	r6, [sp, #32]
   8516a:	9b07      	ldr	r3, [sp, #28]
   8516c:	9f08      	ldr	r7, [sp, #32]
   8516e:	4650      	mov	r0, sl
   85170:	441f      	add	r7, r3
   85172:	9708      	str	r7, [sp, #32]
   85174:	9f09      	ldr	r7, [sp, #36]	; 0x24
   85176:	2101      	movs	r1, #1
   85178:	441f      	add	r7, r3
   8517a:	9709      	str	r7, [sp, #36]	; 0x24
   8517c:	f000 fcc5 	bl	85b0a <__i2b>
   85180:	4604      	mov	r4, r0
   85182:	e002      	b.n	8518a <_dtoa_r+0x74a>
   85184:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   85186:	9e08      	ldr	r6, [sp, #32]
   85188:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8518a:	b16e      	cbz	r6, 851a8 <_dtoa_r+0x768>
   8518c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   8518e:	2f00      	cmp	r7, #0
   85190:	dd0a      	ble.n	851a8 <_dtoa_r+0x768>
   85192:	463b      	mov	r3, r7
   85194:	9f08      	ldr	r7, [sp, #32]
   85196:	42b3      	cmp	r3, r6
   85198:	bfa8      	it	ge
   8519a:	4633      	movge	r3, r6
   8519c:	1aff      	subs	r7, r7, r3
   8519e:	9708      	str	r7, [sp, #32]
   851a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   851a2:	1af6      	subs	r6, r6, r3
   851a4:	1aff      	subs	r7, r7, r3
   851a6:	9709      	str	r7, [sp, #36]	; 0x24
   851a8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   851aa:	2f00      	cmp	r7, #0
   851ac:	dd28      	ble.n	85200 <_dtoa_r+0x7c0>
   851ae:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   851b0:	b307      	cbz	r7, 851f4 <_dtoa_r+0x7b4>
   851b2:	2d00      	cmp	r5, #0
   851b4:	dd10      	ble.n	851d8 <_dtoa_r+0x798>
   851b6:	4621      	mov	r1, r4
   851b8:	462a      	mov	r2, r5
   851ba:	4650      	mov	r0, sl
   851bc:	f000 fd46 	bl	85c4c <__pow5mult>
   851c0:	4604      	mov	r4, r0
   851c2:	465a      	mov	r2, fp
   851c4:	4621      	mov	r1, r4
   851c6:	4650      	mov	r0, sl
   851c8:	f000 fca8 	bl	85b1c <__multiply>
   851cc:	4659      	mov	r1, fp
   851ce:	4607      	mov	r7, r0
   851d0:	4650      	mov	r0, sl
   851d2:	f000 fbfc 	bl	859ce <_Bfree>
   851d6:	46bb      	mov	fp, r7
   851d8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   851da:	1b7a      	subs	r2, r7, r5
   851dc:	d010      	beq.n	85200 <_dtoa_r+0x7c0>
   851de:	4650      	mov	r0, sl
   851e0:	4659      	mov	r1, fp
   851e2:	e00a      	b.n	851fa <_dtoa_r+0x7ba>
   851e4:	3fe00000 	.word	0x3fe00000
   851e8:	40240000 	.word	0x40240000
   851ec:	00087310 	.word	0x00087310
   851f0:	40140000 	.word	0x40140000
   851f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   851f6:	4650      	mov	r0, sl
   851f8:	4659      	mov	r1, fp
   851fa:	f000 fd27 	bl	85c4c <__pow5mult>
   851fe:	4683      	mov	fp, r0
   85200:	4650      	mov	r0, sl
   85202:	2101      	movs	r1, #1
   85204:	f000 fc81 	bl	85b0a <__i2b>
   85208:	9f11      	ldr	r7, [sp, #68]	; 0x44
   8520a:	4605      	mov	r5, r0
   8520c:	2f00      	cmp	r7, #0
   8520e:	dd05      	ble.n	8521c <_dtoa_r+0x7dc>
   85210:	4629      	mov	r1, r5
   85212:	4650      	mov	r0, sl
   85214:	463a      	mov	r2, r7
   85216:	f000 fd19 	bl	85c4c <__pow5mult>
   8521a:	4605      	mov	r5, r0
   8521c:	9f24      	ldr	r7, [sp, #144]	; 0x90
   8521e:	2f01      	cmp	r7, #1
   85220:	dc12      	bgt.n	85248 <_dtoa_r+0x808>
   85222:	9804      	ldr	r0, [sp, #16]
   85224:	b980      	cbnz	r0, 85248 <_dtoa_r+0x808>
   85226:	9905      	ldr	r1, [sp, #20]
   85228:	f3c1 0313 	ubfx	r3, r1, #0, #20
   8522c:	b973      	cbnz	r3, 8524c <_dtoa_r+0x80c>
   8522e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   85232:	0d3f      	lsrs	r7, r7, #20
   85234:	053f      	lsls	r7, r7, #20
   85236:	b157      	cbz	r7, 8524e <_dtoa_r+0x80e>
   85238:	9f08      	ldr	r7, [sp, #32]
   8523a:	3701      	adds	r7, #1
   8523c:	9708      	str	r7, [sp, #32]
   8523e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   85240:	3701      	adds	r7, #1
   85242:	9709      	str	r7, [sp, #36]	; 0x24
   85244:	2701      	movs	r7, #1
   85246:	e002      	b.n	8524e <_dtoa_r+0x80e>
   85248:	2700      	movs	r7, #0
   8524a:	e000      	b.n	8524e <_dtoa_r+0x80e>
   8524c:	9f04      	ldr	r7, [sp, #16]
   8524e:	9811      	ldr	r0, [sp, #68]	; 0x44
   85250:	b140      	cbz	r0, 85264 <_dtoa_r+0x824>
   85252:	692b      	ldr	r3, [r5, #16]
   85254:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   85258:	6918      	ldr	r0, [r3, #16]
   8525a:	f000 fc09 	bl	85a70 <__hi0bits>
   8525e:	f1c0 0020 	rsb	r0, r0, #32
   85262:	e000      	b.n	85266 <_dtoa_r+0x826>
   85264:	2001      	movs	r0, #1
   85266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85268:	4403      	add	r3, r0
   8526a:	f013 031f 	ands.w	r3, r3, #31
   8526e:	d00f      	beq.n	85290 <_dtoa_r+0x850>
   85270:	f1c3 0220 	rsb	r2, r3, #32
   85274:	2a04      	cmp	r2, #4
   85276:	dd09      	ble.n	8528c <_dtoa_r+0x84c>
   85278:	9908      	ldr	r1, [sp, #32]
   8527a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8527c:	f1c3 031c 	rsb	r3, r3, #28
   85280:	4419      	add	r1, r3
   85282:	441a      	add	r2, r3
   85284:	9108      	str	r1, [sp, #32]
   85286:	441e      	add	r6, r3
   85288:	9209      	str	r2, [sp, #36]	; 0x24
   8528a:	e009      	b.n	852a0 <_dtoa_r+0x860>
   8528c:	d008      	beq.n	852a0 <_dtoa_r+0x860>
   8528e:	4613      	mov	r3, r2
   85290:	9808      	ldr	r0, [sp, #32]
   85292:	9909      	ldr	r1, [sp, #36]	; 0x24
   85294:	331c      	adds	r3, #28
   85296:	4418      	add	r0, r3
   85298:	4419      	add	r1, r3
   8529a:	9008      	str	r0, [sp, #32]
   8529c:	441e      	add	r6, r3
   8529e:	9109      	str	r1, [sp, #36]	; 0x24
   852a0:	9a08      	ldr	r2, [sp, #32]
   852a2:	2a00      	cmp	r2, #0
   852a4:	dd04      	ble.n	852b0 <_dtoa_r+0x870>
   852a6:	4659      	mov	r1, fp
   852a8:	4650      	mov	r0, sl
   852aa:	f000 fd1d 	bl	85ce8 <__lshift>
   852ae:	4683      	mov	fp, r0
   852b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   852b2:	2b00      	cmp	r3, #0
   852b4:	dd05      	ble.n	852c2 <_dtoa_r+0x882>
   852b6:	4629      	mov	r1, r5
   852b8:	4650      	mov	r0, sl
   852ba:	461a      	mov	r2, r3
   852bc:	f000 fd14 	bl	85ce8 <__lshift>
   852c0:	4605      	mov	r5, r0
   852c2:	9814      	ldr	r0, [sp, #80]	; 0x50
   852c4:	b1e0      	cbz	r0, 85300 <_dtoa_r+0x8c0>
   852c6:	4658      	mov	r0, fp
   852c8:	4629      	mov	r1, r5
   852ca:	f000 fd60 	bl	85d8e <__mcmp>
   852ce:	2800      	cmp	r0, #0
   852d0:	da16      	bge.n	85300 <_dtoa_r+0x8c0>
   852d2:	4659      	mov	r1, fp
   852d4:	4650      	mov	r0, sl
   852d6:	220a      	movs	r2, #10
   852d8:	2300      	movs	r3, #0
   852da:	f000 fb8f 	bl	859fc <__multadd>
   852de:	990f      	ldr	r1, [sp, #60]	; 0x3c
   852e0:	f109 39ff 	add.w	r9, r9, #4294967295
   852e4:	4683      	mov	fp, r0
   852e6:	b149      	cbz	r1, 852fc <_dtoa_r+0x8bc>
   852e8:	4621      	mov	r1, r4
   852ea:	220a      	movs	r2, #10
   852ec:	4650      	mov	r0, sl
   852ee:	2300      	movs	r3, #0
   852f0:	f000 fb84 	bl	859fc <__multadd>
   852f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   852f6:	4604      	mov	r4, r0
   852f8:	9207      	str	r2, [sp, #28]
   852fa:	e001      	b.n	85300 <_dtoa_r+0x8c0>
   852fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   852fe:	9307      	str	r3, [sp, #28]
   85300:	9807      	ldr	r0, [sp, #28]
   85302:	2800      	cmp	r0, #0
   85304:	dc29      	bgt.n	8535a <_dtoa_r+0x91a>
   85306:	9924      	ldr	r1, [sp, #144]	; 0x90
   85308:	2902      	cmp	r1, #2
   8530a:	dd26      	ble.n	8535a <_dtoa_r+0x91a>
   8530c:	b988      	cbnz	r0, 85332 <_dtoa_r+0x8f2>
   8530e:	4629      	mov	r1, r5
   85310:	2205      	movs	r2, #5
   85312:	9b07      	ldr	r3, [sp, #28]
   85314:	4650      	mov	r0, sl
   85316:	f000 fb71 	bl	859fc <__multadd>
   8531a:	4605      	mov	r5, r0
   8531c:	4629      	mov	r1, r5
   8531e:	4658      	mov	r0, fp
   85320:	f000 fd35 	bl	85d8e <__mcmp>
   85324:	2800      	cmp	r0, #0
   85326:	dc0e      	bgt.n	85346 <_dtoa_r+0x906>
   85328:	e003      	b.n	85332 <_dtoa_r+0x8f2>
   8532a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8532c:	e000      	b.n	85330 <_dtoa_r+0x8f0>
   8532e:	2500      	movs	r5, #0
   85330:	462c      	mov	r4, r5
   85332:	9f25      	ldr	r7, [sp, #148]	; 0x94
   85334:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   85338:	ea6f 0907 	mvn.w	r9, r7
   8533c:	e00a      	b.n	85354 <_dtoa_r+0x914>
   8533e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   85340:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   85344:	462c      	mov	r4, r5
   85346:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   85348:	2331      	movs	r3, #49	; 0x31
   8534a:	f107 0801 	add.w	r8, r7, #1
   8534e:	703b      	strb	r3, [r7, #0]
   85350:	f109 0901 	add.w	r9, r9, #1
   85354:	4627      	mov	r7, r4
   85356:	2400      	movs	r4, #0
   85358:	e107      	b.n	8556a <_dtoa_r+0xb2a>
   8535a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8535c:	2800      	cmp	r0, #0
   8535e:	f000 80bb 	beq.w	854d8 <_dtoa_r+0xa98>
   85362:	2e00      	cmp	r6, #0
   85364:	dd05      	ble.n	85372 <_dtoa_r+0x932>
   85366:	4621      	mov	r1, r4
   85368:	4650      	mov	r0, sl
   8536a:	4632      	mov	r2, r6
   8536c:	f000 fcbc 	bl	85ce8 <__lshift>
   85370:	4604      	mov	r4, r0
   85372:	b19f      	cbz	r7, 8539c <_dtoa_r+0x95c>
   85374:	6861      	ldr	r1, [r4, #4]
   85376:	4650      	mov	r0, sl
   85378:	f000 faf4 	bl	85964 <_Balloc>
   8537c:	6922      	ldr	r2, [r4, #16]
   8537e:	4606      	mov	r6, r0
   85380:	3202      	adds	r2, #2
   85382:	f104 010c 	add.w	r1, r4, #12
   85386:	0092      	lsls	r2, r2, #2
   85388:	300c      	adds	r0, #12
   8538a:	f7fe fbdf 	bl	83b4c <memcpy>
   8538e:	4650      	mov	r0, sl
   85390:	4631      	mov	r1, r6
   85392:	2201      	movs	r2, #1
   85394:	f000 fca8 	bl	85ce8 <__lshift>
   85398:	4607      	mov	r7, r0
   8539a:	e000      	b.n	8539e <_dtoa_r+0x95e>
   8539c:	4627      	mov	r7, r4
   8539e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   853a0:	4629      	mov	r1, r5
   853a2:	4658      	mov	r0, fp
   853a4:	f7ff fabc 	bl	84920 <quorem>
   853a8:	4621      	mov	r1, r4
   853aa:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   853ae:	4680      	mov	r8, r0
   853b0:	4658      	mov	r0, fp
   853b2:	f8cd c008 	str.w	ip, [sp, #8]
   853b6:	f000 fcea 	bl	85d8e <__mcmp>
   853ba:	463a      	mov	r2, r7
   853bc:	9008      	str	r0, [sp, #32]
   853be:	4629      	mov	r1, r5
   853c0:	4650      	mov	r0, sl
   853c2:	f000 fd01 	bl	85dc8 <__mdiff>
   853c6:	68c3      	ldr	r3, [r0, #12]
   853c8:	4602      	mov	r2, r0
   853ca:	f8dd c008 	ldr.w	ip, [sp, #8]
   853ce:	b94b      	cbnz	r3, 853e4 <_dtoa_r+0x9a4>
   853d0:	4611      	mov	r1, r2
   853d2:	4658      	mov	r0, fp
   853d4:	9203      	str	r2, [sp, #12]
   853d6:	f000 fcda 	bl	85d8e <__mcmp>
   853da:	9a03      	ldr	r2, [sp, #12]
   853dc:	4603      	mov	r3, r0
   853de:	f8dd c008 	ldr.w	ip, [sp, #8]
   853e2:	e000      	b.n	853e6 <_dtoa_r+0x9a6>
   853e4:	2301      	movs	r3, #1
   853e6:	4650      	mov	r0, sl
   853e8:	4611      	mov	r1, r2
   853ea:	9303      	str	r3, [sp, #12]
   853ec:	f8cd c008 	str.w	ip, [sp, #8]
   853f0:	f000 faed 	bl	859ce <_Bfree>
   853f4:	9b03      	ldr	r3, [sp, #12]
   853f6:	f8dd c008 	ldr.w	ip, [sp, #8]
   853fa:	b963      	cbnz	r3, 85416 <_dtoa_r+0x9d6>
   853fc:	9924      	ldr	r1, [sp, #144]	; 0x90
   853fe:	b951      	cbnz	r1, 85416 <_dtoa_r+0x9d6>
   85400:	9804      	ldr	r0, [sp, #16]
   85402:	f000 0201 	and.w	r2, r0, #1
   85406:	b932      	cbnz	r2, 85416 <_dtoa_r+0x9d6>
   85408:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
   8540c:	d035      	beq.n	8547a <_dtoa_r+0xa3a>
   8540e:	9b08      	ldr	r3, [sp, #32]
   85410:	2b00      	cmp	r3, #0
   85412:	dc24      	bgt.n	8545e <_dtoa_r+0xa1e>
   85414:	e025      	b.n	85462 <_dtoa_r+0xa22>
   85416:	9808      	ldr	r0, [sp, #32]
   85418:	2800      	cmp	r0, #0
   8541a:	da02      	bge.n	85422 <_dtoa_r+0x9e2>
   8541c:	2b00      	cmp	r3, #0
   8541e:	dc08      	bgt.n	85432 <_dtoa_r+0x9f2>
   85420:	e01f      	b.n	85462 <_dtoa_r+0xa22>
   85422:	d123      	bne.n	8546c <_dtoa_r+0xa2c>
   85424:	9924      	ldr	r1, [sp, #144]	; 0x90
   85426:	bb09      	cbnz	r1, 8546c <_dtoa_r+0xa2c>
   85428:	9804      	ldr	r0, [sp, #16]
   8542a:	f000 0201 	and.w	r2, r0, #1
   8542e:	b9ea      	cbnz	r2, 8546c <_dtoa_r+0xa2c>
   85430:	e7f4      	b.n	8541c <_dtoa_r+0x9dc>
   85432:	4659      	mov	r1, fp
   85434:	2201      	movs	r2, #1
   85436:	4650      	mov	r0, sl
   85438:	f8cd c008 	str.w	ip, [sp, #8]
   8543c:	f000 fc54 	bl	85ce8 <__lshift>
   85440:	4629      	mov	r1, r5
   85442:	4683      	mov	fp, r0
   85444:	f000 fca3 	bl	85d8e <__mcmp>
   85448:	2800      	cmp	r0, #0
   8544a:	f8dd c008 	ldr.w	ip, [sp, #8]
   8544e:	dc03      	bgt.n	85458 <_dtoa_r+0xa18>
   85450:	d107      	bne.n	85462 <_dtoa_r+0xa22>
   85452:	f01c 0f01 	tst.w	ip, #1
   85456:	d004      	beq.n	85462 <_dtoa_r+0xa22>
   85458:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
   8545c:	d00d      	beq.n	8547a <_dtoa_r+0xa3a>
   8545e:	f108 0c31 	add.w	ip, r8, #49	; 0x31
   85462:	f106 0801 	add.w	r8, r6, #1
   85466:	f886 c000 	strb.w	ip, [r6]
   8546a:	e07e      	b.n	8556a <_dtoa_r+0xb2a>
   8546c:	2b00      	cmp	r3, #0
   8546e:	f106 0801 	add.w	r8, r6, #1
   85472:	dd09      	ble.n	85488 <_dtoa_r+0xa48>
   85474:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
   85478:	d103      	bne.n	85482 <_dtoa_r+0xa42>
   8547a:	2339      	movs	r3, #57	; 0x39
   8547c:	7033      	strb	r3, [r6, #0]
   8547e:	3601      	adds	r6, #1
   85480:	e05b      	b.n	8553a <_dtoa_r+0xafa>
   85482:	f10c 0301 	add.w	r3, ip, #1
   85486:	e068      	b.n	8555a <_dtoa_r+0xb1a>
   85488:	990a      	ldr	r1, [sp, #40]	; 0x28
   8548a:	9a07      	ldr	r2, [sp, #28]
   8548c:	ebc1 0308 	rsb	r3, r1, r8
   85490:	4646      	mov	r6, r8
   85492:	4293      	cmp	r3, r2
   85494:	f806 cc01 	strb.w	ip, [r6, #-1]
   85498:	d03c      	beq.n	85514 <_dtoa_r+0xad4>
   8549a:	4659      	mov	r1, fp
   8549c:	220a      	movs	r2, #10
   8549e:	2300      	movs	r3, #0
   854a0:	4650      	mov	r0, sl
   854a2:	f000 faab 	bl	859fc <__multadd>
   854a6:	42bc      	cmp	r4, r7
   854a8:	4683      	mov	fp, r0
   854aa:	4621      	mov	r1, r4
   854ac:	4650      	mov	r0, sl
   854ae:	f04f 020a 	mov.w	r2, #10
   854b2:	f04f 0300 	mov.w	r3, #0
   854b6:	d104      	bne.n	854c2 <_dtoa_r+0xa82>
   854b8:	f000 faa0 	bl	859fc <__multadd>
   854bc:	4604      	mov	r4, r0
   854be:	4607      	mov	r7, r0
   854c0:	e76e      	b.n	853a0 <_dtoa_r+0x960>
   854c2:	f000 fa9b 	bl	859fc <__multadd>
   854c6:	4639      	mov	r1, r7
   854c8:	4604      	mov	r4, r0
   854ca:	220a      	movs	r2, #10
   854cc:	4650      	mov	r0, sl
   854ce:	2300      	movs	r3, #0
   854d0:	f000 fa94 	bl	859fc <__multadd>
   854d4:	4607      	mov	r7, r0
   854d6:	e763      	b.n	853a0 <_dtoa_r+0x960>
   854d8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   854da:	4658      	mov	r0, fp
   854dc:	4629      	mov	r1, r5
   854de:	f7ff fa1f 	bl	84920 <quorem>
   854e2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   854e4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   854e8:	f807 c006 	strb.w	ip, [r7, r6]
   854ec:	9f07      	ldr	r7, [sp, #28]
   854ee:	3601      	adds	r6, #1
   854f0:	42be      	cmp	r6, r7
   854f2:	db07      	blt.n	85504 <_dtoa_r+0xac4>
   854f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   854f6:	2f01      	cmp	r7, #1
   854f8:	bfac      	ite	ge
   854fa:	19f6      	addge	r6, r6, r7
   854fc:	3601      	addlt	r6, #1
   854fe:	4627      	mov	r7, r4
   85500:	2400      	movs	r4, #0
   85502:	e007      	b.n	85514 <_dtoa_r+0xad4>
   85504:	4659      	mov	r1, fp
   85506:	4650      	mov	r0, sl
   85508:	220a      	movs	r2, #10
   8550a:	2300      	movs	r3, #0
   8550c:	f000 fa76 	bl	859fc <__multadd>
   85510:	4683      	mov	fp, r0
   85512:	e7e2      	b.n	854da <_dtoa_r+0xa9a>
   85514:	4659      	mov	r1, fp
   85516:	2201      	movs	r2, #1
   85518:	4650      	mov	r0, sl
   8551a:	f8cd c008 	str.w	ip, [sp, #8]
   8551e:	f000 fbe3 	bl	85ce8 <__lshift>
   85522:	4629      	mov	r1, r5
   85524:	4683      	mov	fp, r0
   85526:	f000 fc32 	bl	85d8e <__mcmp>
   8552a:	2800      	cmp	r0, #0
   8552c:	f8dd c008 	ldr.w	ip, [sp, #8]
   85530:	dc03      	bgt.n	8553a <_dtoa_r+0xafa>
   85532:	d114      	bne.n	8555e <_dtoa_r+0xb1e>
   85534:	f01c 0f01 	tst.w	ip, #1
   85538:	d011      	beq.n	8555e <_dtoa_r+0xb1e>
   8553a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   8553e:	46b0      	mov	r8, r6
   85540:	2b39      	cmp	r3, #57	; 0x39
   85542:	f106 36ff 	add.w	r6, r6, #4294967295
   85546:	d107      	bne.n	85558 <_dtoa_r+0xb18>
   85548:	980a      	ldr	r0, [sp, #40]	; 0x28
   8554a:	42b0      	cmp	r0, r6
   8554c:	d1f5      	bne.n	8553a <_dtoa_r+0xafa>
   8554e:	2331      	movs	r3, #49	; 0x31
   85550:	f109 0901 	add.w	r9, r9, #1
   85554:	7003      	strb	r3, [r0, #0]
   85556:	e008      	b.n	8556a <_dtoa_r+0xb2a>
   85558:	3301      	adds	r3, #1
   8555a:	7033      	strb	r3, [r6, #0]
   8555c:	e005      	b.n	8556a <_dtoa_r+0xb2a>
   8555e:	46b0      	mov	r8, r6
   85560:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   85564:	3e01      	subs	r6, #1
   85566:	2b30      	cmp	r3, #48	; 0x30
   85568:	d0f9      	beq.n	8555e <_dtoa_r+0xb1e>
   8556a:	4650      	mov	r0, sl
   8556c:	4629      	mov	r1, r5
   8556e:	f000 fa2e 	bl	859ce <_Bfree>
   85572:	b16f      	cbz	r7, 85590 <_dtoa_r+0xb50>
   85574:	b12c      	cbz	r4, 85582 <_dtoa_r+0xb42>
   85576:	42bc      	cmp	r4, r7
   85578:	d003      	beq.n	85582 <_dtoa_r+0xb42>
   8557a:	4650      	mov	r0, sl
   8557c:	4621      	mov	r1, r4
   8557e:	f000 fa26 	bl	859ce <_Bfree>
   85582:	4650      	mov	r0, sl
   85584:	4639      	mov	r1, r7
   85586:	f000 fa22 	bl	859ce <_Bfree>
   8558a:	e001      	b.n	85590 <_dtoa_r+0xb50>
   8558c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   85590:	4650      	mov	r0, sl
   85592:	4659      	mov	r1, fp
   85594:	f000 fa1b 	bl	859ce <_Bfree>
   85598:	2300      	movs	r3, #0
   8559a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8559c:	f888 3000 	strb.w	r3, [r8]
   855a0:	f109 0301 	add.w	r3, r9, #1
   855a4:	603b      	str	r3, [r7, #0]
   855a6:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   855a8:	b127      	cbz	r7, 855b4 <_dtoa_r+0xb74>
   855aa:	f8c7 8000 	str.w	r8, [r7]
   855ae:	e001      	b.n	855b4 <_dtoa_r+0xb74>
   855b0:	4802      	ldr	r0, [pc, #8]	; (855bc <_dtoa_r+0xb7c>)
   855b2:	e000      	b.n	855b6 <_dtoa_r+0xb76>
   855b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   855b6:	b01b      	add	sp, #108	; 0x6c
   855b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855bc:	00087275 	.word	0x00087275

000855c0 <__sflush_r>:
   855c0:	898a      	ldrh	r2, [r1, #12]
   855c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   855c6:	4605      	mov	r5, r0
   855c8:	0710      	lsls	r0, r2, #28
   855ca:	460c      	mov	r4, r1
   855cc:	d457      	bmi.n	8567e <__sflush_r+0xbe>
   855ce:	684b      	ldr	r3, [r1, #4]
   855d0:	2b00      	cmp	r3, #0
   855d2:	dc02      	bgt.n	855da <__sflush_r+0x1a>
   855d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   855d6:	2b00      	cmp	r3, #0
   855d8:	dd18      	ble.n	8560c <__sflush_r+0x4c>
   855da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   855dc:	b1b6      	cbz	r6, 8560c <__sflush_r+0x4c>
   855de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   855e2:	2300      	movs	r3, #0
   855e4:	b292      	uxth	r2, r2
   855e6:	682f      	ldr	r7, [r5, #0]
   855e8:	602b      	str	r3, [r5, #0]
   855ea:	b10a      	cbz	r2, 855f0 <__sflush_r+0x30>
   855ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
   855ee:	e010      	b.n	85612 <__sflush_r+0x52>
   855f0:	6a21      	ldr	r1, [r4, #32]
   855f2:	4628      	mov	r0, r5
   855f4:	2301      	movs	r3, #1
   855f6:	47b0      	blx	r6
   855f8:	1c41      	adds	r1, r0, #1
   855fa:	4602      	mov	r2, r0
   855fc:	d109      	bne.n	85612 <__sflush_r+0x52>
   855fe:	682b      	ldr	r3, [r5, #0]
   85600:	b13b      	cbz	r3, 85612 <__sflush_r+0x52>
   85602:	2b1d      	cmp	r3, #29
   85604:	d001      	beq.n	8560a <__sflush_r+0x4a>
   85606:	2b16      	cmp	r3, #22
   85608:	d146      	bne.n	85698 <__sflush_r+0xd8>
   8560a:	602f      	str	r7, [r5, #0]
   8560c:	2000      	movs	r0, #0
   8560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85612:	89a3      	ldrh	r3, [r4, #12]
   85614:	075b      	lsls	r3, r3, #29
   85616:	d505      	bpl.n	85624 <__sflush_r+0x64>
   85618:	6863      	ldr	r3, [r4, #4]
   8561a:	1ad2      	subs	r2, r2, r3
   8561c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8561e:	b10b      	cbz	r3, 85624 <__sflush_r+0x64>
   85620:	6c23      	ldr	r3, [r4, #64]	; 0x40
   85622:	1ad2      	subs	r2, r2, r3
   85624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   85626:	4628      	mov	r0, r5
   85628:	6a21      	ldr	r1, [r4, #32]
   8562a:	2300      	movs	r3, #0
   8562c:	47b0      	blx	r6
   8562e:	1c46      	adds	r6, r0, #1
   85630:	89a2      	ldrh	r2, [r4, #12]
   85632:	d105      	bne.n	85640 <__sflush_r+0x80>
   85634:	682b      	ldr	r3, [r5, #0]
   85636:	b11b      	cbz	r3, 85640 <__sflush_r+0x80>
   85638:	2b1d      	cmp	r3, #29
   8563a:	d001      	beq.n	85640 <__sflush_r+0x80>
   8563c:	2b16      	cmp	r3, #22
   8563e:	d119      	bne.n	85674 <__sflush_r+0xb4>
   85640:	2300      	movs	r3, #0
   85642:	6063      	str	r3, [r4, #4]
   85644:	6923      	ldr	r3, [r4, #16]
   85646:	04d1      	lsls	r1, r2, #19
   85648:	6023      	str	r3, [r4, #0]
   8564a:	d504      	bpl.n	85656 <__sflush_r+0x96>
   8564c:	1c42      	adds	r2, r0, #1
   8564e:	d101      	bne.n	85654 <__sflush_r+0x94>
   85650:	682b      	ldr	r3, [r5, #0]
   85652:	b903      	cbnz	r3, 85656 <__sflush_r+0x96>
   85654:	6560      	str	r0, [r4, #84]	; 0x54
   85656:	6b61      	ldr	r1, [r4, #52]	; 0x34
   85658:	602f      	str	r7, [r5, #0]
   8565a:	2900      	cmp	r1, #0
   8565c:	d0d6      	beq.n	8560c <__sflush_r+0x4c>
   8565e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   85662:	4299      	cmp	r1, r3
   85664:	d002      	beq.n	8566c <__sflush_r+0xac>
   85666:	4628      	mov	r0, r5
   85668:	f000 fc6e 	bl	85f48 <_free_r>
   8566c:	2000      	movs	r0, #0
   8566e:	6360      	str	r0, [r4, #52]	; 0x34
   85670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   85678:	81a2      	strh	r2, [r4, #12]
   8567a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8567e:	690e      	ldr	r6, [r1, #16]
   85680:	2e00      	cmp	r6, #0
   85682:	d0c3      	beq.n	8560c <__sflush_r+0x4c>
   85684:	680b      	ldr	r3, [r1, #0]
   85686:	600e      	str	r6, [r1, #0]
   85688:	ebc6 0803 	rsb	r8, r6, r3
   8568c:	0793      	lsls	r3, r2, #30
   8568e:	bf0c      	ite	eq
   85690:	694b      	ldreq	r3, [r1, #20]
   85692:	2300      	movne	r3, #0
   85694:	608b      	str	r3, [r1, #8]
   85696:	e012      	b.n	856be <__sflush_r+0xfe>
   85698:	89a3      	ldrh	r3, [r4, #12]
   8569a:	f04f 30ff 	mov.w	r0, #4294967295
   8569e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   856a2:	81a3      	strh	r3, [r4, #12]
   856a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   856a8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   856aa:	4628      	mov	r0, r5
   856ac:	6a21      	ldr	r1, [r4, #32]
   856ae:	4632      	mov	r2, r6
   856b0:	4643      	mov	r3, r8
   856b2:	47b8      	blx	r7
   856b4:	2800      	cmp	r0, #0
   856b6:	ddef      	ble.n	85698 <__sflush_r+0xd8>
   856b8:	4406      	add	r6, r0
   856ba:	ebc0 0808 	rsb	r8, r0, r8
   856be:	f1b8 0f00 	cmp.w	r8, #0
   856c2:	dcf1      	bgt.n	856a8 <__sflush_r+0xe8>
   856c4:	e7a2      	b.n	8560c <__sflush_r+0x4c>
	...

000856c8 <_fflush_r>:
   856c8:	b538      	push	{r3, r4, r5, lr}
   856ca:	690b      	ldr	r3, [r1, #16]
   856cc:	4605      	mov	r5, r0
   856ce:	460c      	mov	r4, r1
   856d0:	b1db      	cbz	r3, 8570a <_fflush_r+0x42>
   856d2:	b118      	cbz	r0, 856dc <_fflush_r+0x14>
   856d4:	6983      	ldr	r3, [r0, #24]
   856d6:	b90b      	cbnz	r3, 856dc <_fflush_r+0x14>
   856d8:	f000 f874 	bl	857c4 <__sinit>
   856dc:	4b0c      	ldr	r3, [pc, #48]	; (85710 <_fflush_r+0x48>)
   856de:	429c      	cmp	r4, r3
   856e0:	d101      	bne.n	856e6 <_fflush_r+0x1e>
   856e2:	686c      	ldr	r4, [r5, #4]
   856e4:	e008      	b.n	856f8 <_fflush_r+0x30>
   856e6:	4b0b      	ldr	r3, [pc, #44]	; (85714 <_fflush_r+0x4c>)
   856e8:	429c      	cmp	r4, r3
   856ea:	d101      	bne.n	856f0 <_fflush_r+0x28>
   856ec:	68ac      	ldr	r4, [r5, #8]
   856ee:	e003      	b.n	856f8 <_fflush_r+0x30>
   856f0:	4b09      	ldr	r3, [pc, #36]	; (85718 <_fflush_r+0x50>)
   856f2:	429c      	cmp	r4, r3
   856f4:	bf08      	it	eq
   856f6:	68ec      	ldreq	r4, [r5, #12]
   856f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   856fc:	b12b      	cbz	r3, 8570a <_fflush_r+0x42>
   856fe:	4628      	mov	r0, r5
   85700:	4621      	mov	r1, r4
   85702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85706:	f7ff bf5b 	b.w	855c0 <__sflush_r>
   8570a:	2000      	movs	r0, #0
   8570c:	bd38      	pop	{r3, r4, r5, pc}
   8570e:	bf00      	nop
   85710:	000872a8 	.word	0x000872a8
   85714:	000872c8 	.word	0x000872c8
   85718:	000872e8 	.word	0x000872e8

0008571c <_cleanup_r>:
   8571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8571e:	4607      	mov	r7, r0
   85720:	f100 0448 	add.w	r4, r0, #72	; 0x48
   85724:	b194      	cbz	r4, 8574c <_cleanup_r+0x30>
   85726:	68a5      	ldr	r5, [r4, #8]
   85728:	6866      	ldr	r6, [r4, #4]
   8572a:	3e01      	subs	r6, #1
   8572c:	d40c      	bmi.n	85748 <_cleanup_r+0x2c>
   8572e:	89ab      	ldrh	r3, [r5, #12]
   85730:	2b01      	cmp	r3, #1
   85732:	d907      	bls.n	85744 <_cleanup_r+0x28>
   85734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   85738:	3301      	adds	r3, #1
   8573a:	d003      	beq.n	85744 <_cleanup_r+0x28>
   8573c:	4638      	mov	r0, r7
   8573e:	4629      	mov	r1, r5
   85740:	f7ff ffc2 	bl	856c8 <_fflush_r>
   85744:	3568      	adds	r5, #104	; 0x68
   85746:	e7f0      	b.n	8572a <_cleanup_r+0xe>
   85748:	6824      	ldr	r4, [r4, #0]
   8574a:	e7eb      	b.n	85724 <_cleanup_r+0x8>
   8574c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00085750 <std.isra.0>:
   85750:	2300      	movs	r3, #0
   85752:	b510      	push	{r4, lr}
   85754:	4604      	mov	r4, r0
   85756:	6003      	str	r3, [r0, #0]
   85758:	6043      	str	r3, [r0, #4]
   8575a:	6083      	str	r3, [r0, #8]
   8575c:	8181      	strh	r1, [r0, #12]
   8575e:	6643      	str	r3, [r0, #100]	; 0x64
   85760:	81c2      	strh	r2, [r0, #14]
   85762:	6103      	str	r3, [r0, #16]
   85764:	6143      	str	r3, [r0, #20]
   85766:	6183      	str	r3, [r0, #24]
   85768:	4619      	mov	r1, r3
   8576a:	305c      	adds	r0, #92	; 0x5c
   8576c:	2208      	movs	r2, #8
   8576e:	f7fe f9f6 	bl	83b5e <memset>
   85772:	4b05      	ldr	r3, [pc, #20]	; (85788 <std.isra.0+0x38>)
   85774:	6224      	str	r4, [r4, #32]
   85776:	6263      	str	r3, [r4, #36]	; 0x24
   85778:	4b04      	ldr	r3, [pc, #16]	; (8578c <std.isra.0+0x3c>)
   8577a:	62a3      	str	r3, [r4, #40]	; 0x28
   8577c:	4b04      	ldr	r3, [pc, #16]	; (85790 <std.isra.0+0x40>)
   8577e:	62e3      	str	r3, [r4, #44]	; 0x2c
   85780:	4b04      	ldr	r3, [pc, #16]	; (85794 <std.isra.0+0x44>)
   85782:	6323      	str	r3, [r4, #48]	; 0x30
   85784:	bd10      	pop	{r4, pc}
   85786:	bf00      	nop
   85788:	000860dd 	.word	0x000860dd
   8578c:	000860ff 	.word	0x000860ff
   85790:	00086137 	.word	0x00086137
   85794:	0008615b 	.word	0x0008615b

00085798 <__sfmoreglue>:
   85798:	b570      	push	{r4, r5, r6, lr}
   8579a:	1e4b      	subs	r3, r1, #1
   8579c:	2568      	movs	r5, #104	; 0x68
   8579e:	435d      	muls	r5, r3
   857a0:	460e      	mov	r6, r1
   857a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
   857a6:	f000 fc13 	bl	85fd0 <_malloc_r>
   857aa:	4604      	mov	r4, r0
   857ac:	b140      	cbz	r0, 857c0 <__sfmoreglue+0x28>
   857ae:	2100      	movs	r1, #0
   857b0:	e880 0042 	stmia.w	r0, {r1, r6}
   857b4:	300c      	adds	r0, #12
   857b6:	60a0      	str	r0, [r4, #8]
   857b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
   857bc:	f7fe f9cf 	bl	83b5e <memset>
   857c0:	4620      	mov	r0, r4
   857c2:	bd70      	pop	{r4, r5, r6, pc}

000857c4 <__sinit>:
   857c4:	6983      	ldr	r3, [r0, #24]
   857c6:	b510      	push	{r4, lr}
   857c8:	4604      	mov	r4, r0
   857ca:	bb33      	cbnz	r3, 8581a <__sinit+0x56>
   857cc:	6483      	str	r3, [r0, #72]	; 0x48
   857ce:	64c3      	str	r3, [r0, #76]	; 0x4c
   857d0:	6503      	str	r3, [r0, #80]	; 0x50
   857d2:	4b12      	ldr	r3, [pc, #72]	; (8581c <__sinit+0x58>)
   857d4:	4a12      	ldr	r2, [pc, #72]	; (85820 <__sinit+0x5c>)
   857d6:	681b      	ldr	r3, [r3, #0]
   857d8:	6282      	str	r2, [r0, #40]	; 0x28
   857da:	4298      	cmp	r0, r3
   857dc:	bf04      	itt	eq
   857de:	2301      	moveq	r3, #1
   857e0:	6183      	streq	r3, [r0, #24]
   857e2:	f000 f81f 	bl	85824 <__sfp>
   857e6:	6060      	str	r0, [r4, #4]
   857e8:	4620      	mov	r0, r4
   857ea:	f000 f81b 	bl	85824 <__sfp>
   857ee:	60a0      	str	r0, [r4, #8]
   857f0:	4620      	mov	r0, r4
   857f2:	f000 f817 	bl	85824 <__sfp>
   857f6:	2104      	movs	r1, #4
   857f8:	60e0      	str	r0, [r4, #12]
   857fa:	2200      	movs	r2, #0
   857fc:	6860      	ldr	r0, [r4, #4]
   857fe:	f7ff ffa7 	bl	85750 <std.isra.0>
   85802:	68a0      	ldr	r0, [r4, #8]
   85804:	2109      	movs	r1, #9
   85806:	2201      	movs	r2, #1
   85808:	f7ff ffa2 	bl	85750 <std.isra.0>
   8580c:	68e0      	ldr	r0, [r4, #12]
   8580e:	2112      	movs	r1, #18
   85810:	2202      	movs	r2, #2
   85812:	f7ff ff9d 	bl	85750 <std.isra.0>
   85816:	2301      	movs	r3, #1
   85818:	61a3      	str	r3, [r4, #24]
   8581a:	bd10      	pop	{r4, pc}
   8581c:	00087250 	.word	0x00087250
   85820:	0008571d 	.word	0x0008571d

00085824 <__sfp>:
   85824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85826:	4b1b      	ldr	r3, [pc, #108]	; (85894 <__sfp+0x70>)
   85828:	4607      	mov	r7, r0
   8582a:	681e      	ldr	r6, [r3, #0]
   8582c:	69b3      	ldr	r3, [r6, #24]
   8582e:	b913      	cbnz	r3, 85836 <__sfp+0x12>
   85830:	4630      	mov	r0, r6
   85832:	f7ff ffc7 	bl	857c4 <__sinit>
   85836:	3648      	adds	r6, #72	; 0x48
   85838:	68b4      	ldr	r4, [r6, #8]
   8583a:	6873      	ldr	r3, [r6, #4]
   8583c:	3b01      	subs	r3, #1
   8583e:	d404      	bmi.n	8584a <__sfp+0x26>
   85840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   85844:	b175      	cbz	r5, 85864 <__sfp+0x40>
   85846:	3468      	adds	r4, #104	; 0x68
   85848:	e7f8      	b.n	8583c <__sfp+0x18>
   8584a:	6833      	ldr	r3, [r6, #0]
   8584c:	b92b      	cbnz	r3, 8585a <__sfp+0x36>
   8584e:	4638      	mov	r0, r7
   85850:	2104      	movs	r1, #4
   85852:	f7ff ffa1 	bl	85798 <__sfmoreglue>
   85856:	6030      	str	r0, [r6, #0]
   85858:	b108      	cbz	r0, 8585e <__sfp+0x3a>
   8585a:	6836      	ldr	r6, [r6, #0]
   8585c:	e7ec      	b.n	85838 <__sfp+0x14>
   8585e:	230c      	movs	r3, #12
   85860:	603b      	str	r3, [r7, #0]
   85862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85864:	f64f 73ff 	movw	r3, #65535	; 0xffff
   85868:	81e3      	strh	r3, [r4, #14]
   8586a:	2301      	movs	r3, #1
   8586c:	81a3      	strh	r3, [r4, #12]
   8586e:	6665      	str	r5, [r4, #100]	; 0x64
   85870:	6025      	str	r5, [r4, #0]
   85872:	60a5      	str	r5, [r4, #8]
   85874:	6065      	str	r5, [r4, #4]
   85876:	6125      	str	r5, [r4, #16]
   85878:	6165      	str	r5, [r4, #20]
   8587a:	61a5      	str	r5, [r4, #24]
   8587c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   85880:	4629      	mov	r1, r5
   85882:	2208      	movs	r2, #8
   85884:	f7fe f96b 	bl	83b5e <memset>
   85888:	6365      	str	r5, [r4, #52]	; 0x34
   8588a:	63a5      	str	r5, [r4, #56]	; 0x38
   8588c:	64a5      	str	r5, [r4, #72]	; 0x48
   8588e:	64e5      	str	r5, [r4, #76]	; 0x4c
   85890:	4620      	mov	r0, r4
   85892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85894:	00087250 	.word	0x00087250

00085898 <_localeconv_r>:
   85898:	4800      	ldr	r0, [pc, #0]	; (8589c <_localeconv_r+0x4>)
   8589a:	4770      	bx	lr
   8589c:	200701b4 	.word	0x200701b4

000858a0 <__smakebuf_r>:
   858a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   858a2:	898b      	ldrh	r3, [r1, #12]
   858a4:	b091      	sub	sp, #68	; 0x44
   858a6:	079e      	lsls	r6, r3, #30
   858a8:	4605      	mov	r5, r0
   858aa:	460c      	mov	r4, r1
   858ac:	d425      	bmi.n	858fa <__smakebuf_r+0x5a>
   858ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   858b2:	2900      	cmp	r1, #0
   858b4:	da08      	bge.n	858c8 <__smakebuf_r+0x28>
   858b6:	89a3      	ldrh	r3, [r4, #12]
   858b8:	2700      	movs	r7, #0
   858ba:	f013 0f80 	tst.w	r3, #128	; 0x80
   858be:	bf14      	ite	ne
   858c0:	2640      	movne	r6, #64	; 0x40
   858c2:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   858c6:	e00d      	b.n	858e4 <__smakebuf_r+0x44>
   858c8:	aa01      	add	r2, sp, #4
   858ca:	f000 fc6d 	bl	861a8 <_fstat_r>
   858ce:	2800      	cmp	r0, #0
   858d0:	dbf1      	blt.n	858b6 <__smakebuf_r+0x16>
   858d2:	9f02      	ldr	r7, [sp, #8]
   858d4:	f44f 6680 	mov.w	r6, #1024	; 0x400
   858d8:	f407 4770 	and.w	r7, r7, #61440	; 0xf000
   858dc:	f5b7 5100 	subs.w	r1, r7, #8192	; 0x2000
   858e0:	424f      	negs	r7, r1
   858e2:	414f      	adcs	r7, r1
   858e4:	4628      	mov	r0, r5
   858e6:	4631      	mov	r1, r6
   858e8:	f000 fb72 	bl	85fd0 <_malloc_r>
   858ec:	b960      	cbnz	r0, 85908 <__smakebuf_r+0x68>
   858ee:	89a3      	ldrh	r3, [r4, #12]
   858f0:	059a      	lsls	r2, r3, #22
   858f2:	d41d      	bmi.n	85930 <__smakebuf_r+0x90>
   858f4:	f043 0302 	orr.w	r3, r3, #2
   858f8:	81a3      	strh	r3, [r4, #12]
   858fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
   858fe:	6023      	str	r3, [r4, #0]
   85900:	6123      	str	r3, [r4, #16]
   85902:	2301      	movs	r3, #1
   85904:	6163      	str	r3, [r4, #20]
   85906:	e013      	b.n	85930 <__smakebuf_r+0x90>
   85908:	4b0a      	ldr	r3, [pc, #40]	; (85934 <__smakebuf_r+0x94>)
   8590a:	62ab      	str	r3, [r5, #40]	; 0x28
   8590c:	89a3      	ldrh	r3, [r4, #12]
   8590e:	6020      	str	r0, [r4, #0]
   85910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85914:	81a3      	strh	r3, [r4, #12]
   85916:	6120      	str	r0, [r4, #16]
   85918:	6166      	str	r6, [r4, #20]
   8591a:	b14f      	cbz	r7, 85930 <__smakebuf_r+0x90>
   8591c:	4628      	mov	r0, r5
   8591e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85922:	f000 fc53 	bl	861cc <_isatty_r>
   85926:	b118      	cbz	r0, 85930 <__smakebuf_r+0x90>
   85928:	89a3      	ldrh	r3, [r4, #12]
   8592a:	f043 0301 	orr.w	r3, r3, #1
   8592e:	81a3      	strh	r3, [r4, #12]
   85930:	b011      	add	sp, #68	; 0x44
   85932:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85934:	0008571d 	.word	0x0008571d

00085938 <malloc>:
   85938:	4b02      	ldr	r3, [pc, #8]	; (85944 <malloc+0xc>)
   8593a:	4601      	mov	r1, r0
   8593c:	6818      	ldr	r0, [r3, #0]
   8593e:	f000 bb47 	b.w	85fd0 <_malloc_r>
   85942:	bf00      	nop
   85944:	200701b0 	.word	0x200701b0

00085948 <memchr>:
   85948:	b510      	push	{r4, lr}
   8594a:	b2c9      	uxtb	r1, r1
   8594c:	4402      	add	r2, r0
   8594e:	4290      	cmp	r0, r2
   85950:	4603      	mov	r3, r0
   85952:	d005      	beq.n	85960 <memchr+0x18>
   85954:	781c      	ldrb	r4, [r3, #0]
   85956:	3001      	adds	r0, #1
   85958:	428c      	cmp	r4, r1
   8595a:	d1f8      	bne.n	8594e <memchr+0x6>
   8595c:	4618      	mov	r0, r3
   8595e:	bd10      	pop	{r4, pc}
   85960:	2000      	movs	r0, #0
   85962:	bd10      	pop	{r4, pc}

00085964 <_Balloc>:
   85964:	b570      	push	{r4, r5, r6, lr}
   85966:	6a45      	ldr	r5, [r0, #36]	; 0x24
   85968:	4604      	mov	r4, r0
   8596a:	460e      	mov	r6, r1
   8596c:	b93d      	cbnz	r5, 8597e <_Balloc+0x1a>
   8596e:	2010      	movs	r0, #16
   85970:	f7ff ffe2 	bl	85938 <malloc>
   85974:	6260      	str	r0, [r4, #36]	; 0x24
   85976:	6045      	str	r5, [r0, #4]
   85978:	6085      	str	r5, [r0, #8]
   8597a:	6005      	str	r5, [r0, #0]
   8597c:	60c5      	str	r5, [r0, #12]
   8597e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   85980:	68eb      	ldr	r3, [r5, #12]
   85982:	b143      	cbz	r3, 85996 <_Balloc+0x32>
   85984:	6a63      	ldr	r3, [r4, #36]	; 0x24
   85986:	68da      	ldr	r2, [r3, #12]
   85988:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
   8598c:	b178      	cbz	r0, 859ae <_Balloc+0x4a>
   8598e:	6801      	ldr	r1, [r0, #0]
   85990:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
   85994:	e017      	b.n	859c6 <_Balloc+0x62>
   85996:	4620      	mov	r0, r4
   85998:	2104      	movs	r1, #4
   8599a:	2221      	movs	r2, #33	; 0x21
   8599c:	f000 fac5 	bl	85f2a <_calloc_r>
   859a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   859a2:	60e8      	str	r0, [r5, #12]
   859a4:	68db      	ldr	r3, [r3, #12]
   859a6:	2b00      	cmp	r3, #0
   859a8:	d1ec      	bne.n	85984 <_Balloc+0x20>
   859aa:	2000      	movs	r0, #0
   859ac:	bd70      	pop	{r4, r5, r6, pc}
   859ae:	2101      	movs	r1, #1
   859b0:	fa01 f506 	lsl.w	r5, r1, r6
   859b4:	1d6a      	adds	r2, r5, #5
   859b6:	4620      	mov	r0, r4
   859b8:	0092      	lsls	r2, r2, #2
   859ba:	f000 fab6 	bl	85f2a <_calloc_r>
   859be:	2800      	cmp	r0, #0
   859c0:	d0f3      	beq.n	859aa <_Balloc+0x46>
   859c2:	6046      	str	r6, [r0, #4]
   859c4:	6085      	str	r5, [r0, #8]
   859c6:	2200      	movs	r2, #0
   859c8:	6102      	str	r2, [r0, #16]
   859ca:	60c2      	str	r2, [r0, #12]
   859cc:	bd70      	pop	{r4, r5, r6, pc}

000859ce <_Bfree>:
   859ce:	b570      	push	{r4, r5, r6, lr}
   859d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
   859d2:	4606      	mov	r6, r0
   859d4:	460d      	mov	r5, r1
   859d6:	b93c      	cbnz	r4, 859e8 <_Bfree+0x1a>
   859d8:	2010      	movs	r0, #16
   859da:	f7ff ffad 	bl	85938 <malloc>
   859de:	6270      	str	r0, [r6, #36]	; 0x24
   859e0:	6044      	str	r4, [r0, #4]
   859e2:	6084      	str	r4, [r0, #8]
   859e4:	6004      	str	r4, [r0, #0]
   859e6:	60c4      	str	r4, [r0, #12]
   859e8:	b13d      	cbz	r5, 859fa <_Bfree+0x2c>
   859ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
   859ec:	686a      	ldr	r2, [r5, #4]
   859ee:	68db      	ldr	r3, [r3, #12]
   859f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   859f4:	6029      	str	r1, [r5, #0]
   859f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   859fa:	bd70      	pop	{r4, r5, r6, pc}

000859fc <__multadd>:
   859fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a00:	460c      	mov	r4, r1
   85a02:	461e      	mov	r6, r3
   85a04:	690d      	ldr	r5, [r1, #16]
   85a06:	4607      	mov	r7, r0
   85a08:	3114      	adds	r1, #20
   85a0a:	2300      	movs	r3, #0
   85a0c:	6808      	ldr	r0, [r1, #0]
   85a0e:	3301      	adds	r3, #1
   85a10:	fa1f fc80 	uxth.w	ip, r0
   85a14:	0c00      	lsrs	r0, r0, #16
   85a16:	fb02 6c0c 	mla	ip, r2, ip, r6
   85a1a:	4350      	muls	r0, r2
   85a1c:	eb00 401c 	add.w	r0, r0, ip, lsr #16
   85a20:	fa1f fc8c 	uxth.w	ip, ip
   85a24:	0c06      	lsrs	r6, r0, #16
   85a26:	42ab      	cmp	r3, r5
   85a28:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
   85a2c:	f841 0b04 	str.w	r0, [r1], #4
   85a30:	dbec      	blt.n	85a0c <__multadd+0x10>
   85a32:	b1d6      	cbz	r6, 85a6a <__multadd+0x6e>
   85a34:	68a3      	ldr	r3, [r4, #8]
   85a36:	429d      	cmp	r5, r3
   85a38:	db12      	blt.n	85a60 <__multadd+0x64>
   85a3a:	6861      	ldr	r1, [r4, #4]
   85a3c:	4638      	mov	r0, r7
   85a3e:	3101      	adds	r1, #1
   85a40:	f7ff ff90 	bl	85964 <_Balloc>
   85a44:	6922      	ldr	r2, [r4, #16]
   85a46:	f104 010c 	add.w	r1, r4, #12
   85a4a:	3202      	adds	r2, #2
   85a4c:	4680      	mov	r8, r0
   85a4e:	0092      	lsls	r2, r2, #2
   85a50:	300c      	adds	r0, #12
   85a52:	f7fe f87b 	bl	83b4c <memcpy>
   85a56:	4621      	mov	r1, r4
   85a58:	4638      	mov	r0, r7
   85a5a:	f7ff ffb8 	bl	859ce <_Bfree>
   85a5e:	4644      	mov	r4, r8
   85a60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   85a64:	3501      	adds	r5, #1
   85a66:	615e      	str	r6, [r3, #20]
   85a68:	6125      	str	r5, [r4, #16]
   85a6a:	4620      	mov	r0, r4
   85a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085a70 <__hi0bits>:
   85a70:	0c03      	lsrs	r3, r0, #16
   85a72:	041b      	lsls	r3, r3, #16
   85a74:	b913      	cbnz	r3, 85a7c <__hi0bits+0xc>
   85a76:	0400      	lsls	r0, r0, #16
   85a78:	2310      	movs	r3, #16
   85a7a:	e000      	b.n	85a7e <__hi0bits+0xe>
   85a7c:	2300      	movs	r3, #0
   85a7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   85a82:	bf04      	itt	eq
   85a84:	0200      	lsleq	r0, r0, #8
   85a86:	3308      	addeq	r3, #8
   85a88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   85a8c:	bf04      	itt	eq
   85a8e:	0100      	lsleq	r0, r0, #4
   85a90:	3304      	addeq	r3, #4
   85a92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   85a96:	bf04      	itt	eq
   85a98:	0080      	lsleq	r0, r0, #2
   85a9a:	3302      	addeq	r3, #2
   85a9c:	2800      	cmp	r0, #0
   85a9e:	db03      	blt.n	85aa8 <__hi0bits+0x38>
   85aa0:	0042      	lsls	r2, r0, #1
   85aa2:	d503      	bpl.n	85aac <__hi0bits+0x3c>
   85aa4:	1c58      	adds	r0, r3, #1
   85aa6:	4770      	bx	lr
   85aa8:	4618      	mov	r0, r3
   85aaa:	4770      	bx	lr
   85aac:	2020      	movs	r0, #32
   85aae:	4770      	bx	lr

00085ab0 <__lo0bits>:
   85ab0:	6803      	ldr	r3, [r0, #0]
   85ab2:	f013 0207 	ands.w	r2, r3, #7
   85ab6:	d00b      	beq.n	85ad0 <__lo0bits+0x20>
   85ab8:	07d9      	lsls	r1, r3, #31
   85aba:	d422      	bmi.n	85b02 <__lo0bits+0x52>
   85abc:	079a      	lsls	r2, r3, #30
   85abe:	d503      	bpl.n	85ac8 <__lo0bits+0x18>
   85ac0:	085b      	lsrs	r3, r3, #1
   85ac2:	6003      	str	r3, [r0, #0]
   85ac4:	2001      	movs	r0, #1
   85ac6:	4770      	bx	lr
   85ac8:	089b      	lsrs	r3, r3, #2
   85aca:	6003      	str	r3, [r0, #0]
   85acc:	2002      	movs	r0, #2
   85ace:	4770      	bx	lr
   85ad0:	b299      	uxth	r1, r3
   85ad2:	b909      	cbnz	r1, 85ad8 <__lo0bits+0x28>
   85ad4:	0c1b      	lsrs	r3, r3, #16
   85ad6:	2210      	movs	r2, #16
   85ad8:	f013 0fff 	tst.w	r3, #255	; 0xff
   85adc:	bf04      	itt	eq
   85ade:	0a1b      	lsreq	r3, r3, #8
   85ae0:	3208      	addeq	r2, #8
   85ae2:	0719      	lsls	r1, r3, #28
   85ae4:	bf04      	itt	eq
   85ae6:	091b      	lsreq	r3, r3, #4
   85ae8:	3204      	addeq	r2, #4
   85aea:	0799      	lsls	r1, r3, #30
   85aec:	bf04      	itt	eq
   85aee:	089b      	lsreq	r3, r3, #2
   85af0:	3202      	addeq	r2, #2
   85af2:	07d9      	lsls	r1, r3, #31
   85af4:	d402      	bmi.n	85afc <__lo0bits+0x4c>
   85af6:	085b      	lsrs	r3, r3, #1
   85af8:	d005      	beq.n	85b06 <__lo0bits+0x56>
   85afa:	3201      	adds	r2, #1
   85afc:	6003      	str	r3, [r0, #0]
   85afe:	4610      	mov	r0, r2
   85b00:	4770      	bx	lr
   85b02:	2000      	movs	r0, #0
   85b04:	4770      	bx	lr
   85b06:	2020      	movs	r0, #32
   85b08:	4770      	bx	lr

00085b0a <__i2b>:
   85b0a:	b510      	push	{r4, lr}
   85b0c:	460c      	mov	r4, r1
   85b0e:	2101      	movs	r1, #1
   85b10:	f7ff ff28 	bl	85964 <_Balloc>
   85b14:	2201      	movs	r2, #1
   85b16:	6144      	str	r4, [r0, #20]
   85b18:	6102      	str	r2, [r0, #16]
   85b1a:	bd10      	pop	{r4, pc}

00085b1c <__multiply>:
   85b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85b20:	4616      	mov	r6, r2
   85b22:	6933      	ldr	r3, [r6, #16]
   85b24:	690a      	ldr	r2, [r1, #16]
   85b26:	b085      	sub	sp, #20
   85b28:	429a      	cmp	r2, r3
   85b2a:	460d      	mov	r5, r1
   85b2c:	da01      	bge.n	85b32 <__multiply+0x16>
   85b2e:	4635      	mov	r5, r6
   85b30:	460e      	mov	r6, r1
   85b32:	f8d5 8010 	ldr.w	r8, [r5, #16]
   85b36:	6937      	ldr	r7, [r6, #16]
   85b38:	68ab      	ldr	r3, [r5, #8]
   85b3a:	6869      	ldr	r1, [r5, #4]
   85b3c:	eb08 0407 	add.w	r4, r8, r7
   85b40:	429c      	cmp	r4, r3
   85b42:	bfc8      	it	gt
   85b44:	3101      	addgt	r1, #1
   85b46:	f7ff ff0d 	bl	85964 <_Balloc>
   85b4a:	f100 0314 	add.w	r3, r0, #20
   85b4e:	eb03 0184 	add.w	r1, r3, r4, lsl #2
   85b52:	9101      	str	r1, [sp, #4]
   85b54:	461a      	mov	r2, r3
   85b56:	f8dd a004 	ldr.w	sl, [sp, #4]
   85b5a:	4552      	cmp	r2, sl
   85b5c:	d203      	bcs.n	85b66 <__multiply+0x4a>
   85b5e:	2100      	movs	r1, #0
   85b60:	f842 1b04 	str.w	r1, [r2], #4
   85b64:	e7f7      	b.n	85b56 <__multiply+0x3a>
   85b66:	f105 0114 	add.w	r1, r5, #20
   85b6a:	f106 0214 	add.w	r2, r6, #20
   85b6e:	eb01 0888 	add.w	r8, r1, r8, lsl #2
   85b72:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   85b76:	f8cd 8008 	str.w	r8, [sp, #8]
   85b7a:	9703      	str	r7, [sp, #12]
   85b7c:	9e03      	ldr	r6, [sp, #12]
   85b7e:	4615      	mov	r5, r2
   85b80:	42b2      	cmp	r2, r6
   85b82:	d256      	bcs.n	85c32 <__multiply+0x116>
   85b84:	f8b5 c000 	ldrh.w	ip, [r5]
   85b88:	3204      	adds	r2, #4
   85b8a:	f1bc 0f00 	cmp.w	ip, #0
   85b8e:	d025      	beq.n	85bdc <__multiply+0xc0>
   85b90:	460f      	mov	r7, r1
   85b92:	461d      	mov	r5, r3
   85b94:	2600      	movs	r6, #0
   85b96:	f857 9b04 	ldr.w	r9, [r7], #4
   85b9a:	f8d5 8000 	ldr.w	r8, [r5]
   85b9e:	fa1f fb89 	uxth.w	fp, r9
   85ba2:	fa1f fa88 	uxth.w	sl, r8
   85ba6:	fb0c aa0b 	mla	sl, ip, fp, sl
   85baa:	ea4f 4919 	mov.w	r9, r9, lsr #16
   85bae:	ea4f 4818 	mov.w	r8, r8, lsr #16
   85bb2:	fb0c 8809 	mla	r8, ip, r9, r8
   85bb6:	44b2      	add	sl, r6
   85bb8:	eb08 481a 	add.w	r8, r8, sl, lsr #16
   85bbc:	fa1f fa8a 	uxth.w	sl, sl
   85bc0:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
   85bc4:	ea4f 4618 	mov.w	r6, r8, lsr #16
   85bc8:	f8dd 8008 	ldr.w	r8, [sp, #8]
   85bcc:	46ab      	mov	fp, r5
   85bce:	45b8      	cmp	r8, r7
   85bd0:	f84b ab04 	str.w	sl, [fp], #4
   85bd4:	d901      	bls.n	85bda <__multiply+0xbe>
   85bd6:	465d      	mov	r5, fp
   85bd8:	e7dd      	b.n	85b96 <__multiply+0x7a>
   85bda:	606e      	str	r6, [r5, #4]
   85bdc:	f832 8c02 	ldrh.w	r8, [r2, #-2]
   85be0:	f1b8 0f00 	cmp.w	r8, #0
   85be4:	d023      	beq.n	85c2e <__multiply+0x112>
   85be6:	681e      	ldr	r6, [r3, #0]
   85be8:	460f      	mov	r7, r1
   85bea:	461d      	mov	r5, r3
   85bec:	f04f 0900 	mov.w	r9, #0
   85bf0:	f8b7 a000 	ldrh.w	sl, [r7]
   85bf4:	f8b5 c002 	ldrh.w	ip, [r5, #2]
   85bf8:	b2b6      	uxth	r6, r6
   85bfa:	fb08 cc0a 	mla	ip, r8, sl, ip
   85bfe:	44e1      	add	r9, ip
   85c00:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
   85c04:	46ac      	mov	ip, r5
   85c06:	f84c 6b04 	str.w	r6, [ip], #4
   85c0a:	f857 6b04 	ldr.w	r6, [r7], #4
   85c0e:	f8b5 a004 	ldrh.w	sl, [r5, #4]
   85c12:	0c36      	lsrs	r6, r6, #16
   85c14:	fb08 a606 	mla	r6, r8, r6, sl
   85c18:	f8dd a008 	ldr.w	sl, [sp, #8]
   85c1c:	eb06 4619 	add.w	r6, r6, r9, lsr #16
   85c20:	4557      	cmp	r7, sl
   85c22:	ea4f 4916 	mov.w	r9, r6, lsr #16
   85c26:	d201      	bcs.n	85c2c <__multiply+0x110>
   85c28:	4665      	mov	r5, ip
   85c2a:	e7e1      	b.n	85bf0 <__multiply+0xd4>
   85c2c:	606e      	str	r6, [r5, #4]
   85c2e:	3304      	adds	r3, #4
   85c30:	e7a4      	b.n	85b7c <__multiply+0x60>
   85c32:	9b01      	ldr	r3, [sp, #4]
   85c34:	2c00      	cmp	r4, #0
   85c36:	dc03      	bgt.n	85c40 <__multiply+0x124>
   85c38:	6104      	str	r4, [r0, #16]
   85c3a:	b005      	add	sp, #20
   85c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   85c44:	2a00      	cmp	r2, #0
   85c46:	d1f7      	bne.n	85c38 <__multiply+0x11c>
   85c48:	3c01      	subs	r4, #1
   85c4a:	e7f3      	b.n	85c34 <__multiply+0x118>

00085c4c <__pow5mult>:
   85c4c:	f012 0303 	ands.w	r3, r2, #3
   85c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85c54:	4605      	mov	r5, r0
   85c56:	460e      	mov	r6, r1
   85c58:	4617      	mov	r7, r2
   85c5a:	d007      	beq.n	85c6c <__pow5mult+0x20>
   85c5c:	4a21      	ldr	r2, [pc, #132]	; (85ce4 <__pow5mult+0x98>)
   85c5e:	3b01      	subs	r3, #1
   85c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   85c64:	2300      	movs	r3, #0
   85c66:	f7ff fec9 	bl	859fc <__multadd>
   85c6a:	4606      	mov	r6, r0
   85c6c:	10bf      	asrs	r7, r7, #2
   85c6e:	d035      	beq.n	85cdc <__pow5mult+0x90>
   85c70:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   85c72:	b93c      	cbnz	r4, 85c84 <__pow5mult+0x38>
   85c74:	2010      	movs	r0, #16
   85c76:	f7ff fe5f 	bl	85938 <malloc>
   85c7a:	6268      	str	r0, [r5, #36]	; 0x24
   85c7c:	6044      	str	r4, [r0, #4]
   85c7e:	6084      	str	r4, [r0, #8]
   85c80:	6004      	str	r4, [r0, #0]
   85c82:	60c4      	str	r4, [r0, #12]
   85c84:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   85c88:	f8d8 4008 	ldr.w	r4, [r8, #8]
   85c8c:	b97c      	cbnz	r4, 85cae <__pow5mult+0x62>
   85c8e:	4628      	mov	r0, r5
   85c90:	f240 2171 	movw	r1, #625	; 0x271
   85c94:	f7ff ff39 	bl	85b0a <__i2b>
   85c98:	2300      	movs	r3, #0
   85c9a:	f8c8 0008 	str.w	r0, [r8, #8]
   85c9e:	4604      	mov	r4, r0
   85ca0:	6003      	str	r3, [r0, #0]
   85ca2:	e004      	b.n	85cae <__pow5mult+0x62>
   85ca4:	107f      	asrs	r7, r7, #1
   85ca6:	d019      	beq.n	85cdc <__pow5mult+0x90>
   85ca8:	6820      	ldr	r0, [r4, #0]
   85caa:	b170      	cbz	r0, 85cca <__pow5mult+0x7e>
   85cac:	4604      	mov	r4, r0
   85cae:	07fb      	lsls	r3, r7, #31
   85cb0:	d5f8      	bpl.n	85ca4 <__pow5mult+0x58>
   85cb2:	4631      	mov	r1, r6
   85cb4:	4622      	mov	r2, r4
   85cb6:	4628      	mov	r0, r5
   85cb8:	f7ff ff30 	bl	85b1c <__multiply>
   85cbc:	4631      	mov	r1, r6
   85cbe:	4680      	mov	r8, r0
   85cc0:	4628      	mov	r0, r5
   85cc2:	f7ff fe84 	bl	859ce <_Bfree>
   85cc6:	4646      	mov	r6, r8
   85cc8:	e7ec      	b.n	85ca4 <__pow5mult+0x58>
   85cca:	4628      	mov	r0, r5
   85ccc:	4621      	mov	r1, r4
   85cce:	4622      	mov	r2, r4
   85cd0:	f7ff ff24 	bl	85b1c <__multiply>
   85cd4:	2300      	movs	r3, #0
   85cd6:	6020      	str	r0, [r4, #0]
   85cd8:	6003      	str	r3, [r0, #0]
   85cda:	e7e7      	b.n	85cac <__pow5mult+0x60>
   85cdc:	4630      	mov	r0, r6
   85cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ce2:	bf00      	nop
   85ce4:	00087400 	.word	0x00087400

00085ce8 <__lshift>:
   85ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85cec:	460c      	mov	r4, r1
   85cee:	6923      	ldr	r3, [r4, #16]
   85cf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   85cf4:	eb0a 0903 	add.w	r9, sl, r3
   85cf8:	6849      	ldr	r1, [r1, #4]
   85cfa:	68a3      	ldr	r3, [r4, #8]
   85cfc:	4680      	mov	r8, r0
   85cfe:	4615      	mov	r5, r2
   85d00:	f109 0701 	add.w	r7, r9, #1
   85d04:	429f      	cmp	r7, r3
   85d06:	dd02      	ble.n	85d0e <__lshift+0x26>
   85d08:	3101      	adds	r1, #1
   85d0a:	005b      	lsls	r3, r3, #1
   85d0c:	e7fa      	b.n	85d04 <__lshift+0x1c>
   85d0e:	4640      	mov	r0, r8
   85d10:	f7ff fe28 	bl	85964 <_Balloc>
   85d14:	2300      	movs	r3, #0
   85d16:	4606      	mov	r6, r0
   85d18:	f100 0214 	add.w	r2, r0, #20
   85d1c:	4553      	cmp	r3, sl
   85d1e:	da04      	bge.n	85d2a <__lshift+0x42>
   85d20:	2100      	movs	r1, #0
   85d22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   85d26:	3301      	adds	r3, #1
   85d28:	e7f8      	b.n	85d1c <__lshift+0x34>
   85d2a:	6920      	ldr	r0, [r4, #16]
   85d2c:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
   85d30:	f104 0314 	add.w	r3, r4, #20
   85d34:	f015 0c1f 	ands.w	ip, r5, #31
   85d38:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   85d3c:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
   85d40:	d016      	beq.n	85d70 <__lshift+0x88>
   85d42:	f1cc 0a20 	rsb	sl, ip, #32
   85d46:	2500      	movs	r5, #0
   85d48:	6818      	ldr	r0, [r3, #0]
   85d4a:	460a      	mov	r2, r1
   85d4c:	fa00 f00c 	lsl.w	r0, r0, ip
   85d50:	4305      	orrs	r5, r0
   85d52:	f842 5b04 	str.w	r5, [r2], #4
   85d56:	f853 5b04 	ldr.w	r5, [r3], #4
   85d5a:	4573      	cmp	r3, lr
   85d5c:	fa25 f50a 	lsr.w	r5, r5, sl
   85d60:	d201      	bcs.n	85d66 <__lshift+0x7e>
   85d62:	4611      	mov	r1, r2
   85d64:	e7f0      	b.n	85d48 <__lshift+0x60>
   85d66:	604d      	str	r5, [r1, #4]
   85d68:	b145      	cbz	r5, 85d7c <__lshift+0x94>
   85d6a:	f109 0702 	add.w	r7, r9, #2
   85d6e:	e005      	b.n	85d7c <__lshift+0x94>
   85d70:	f853 2b04 	ldr.w	r2, [r3], #4
   85d74:	4573      	cmp	r3, lr
   85d76:	f841 2b04 	str.w	r2, [r1], #4
   85d7a:	d3f9      	bcc.n	85d70 <__lshift+0x88>
   85d7c:	3f01      	subs	r7, #1
   85d7e:	4640      	mov	r0, r8
   85d80:	6137      	str	r7, [r6, #16]
   85d82:	4621      	mov	r1, r4
   85d84:	f7ff fe23 	bl	859ce <_Bfree>
   85d88:	4630      	mov	r0, r6
   85d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00085d8e <__mcmp>:
   85d8e:	6902      	ldr	r2, [r0, #16]
   85d90:	690b      	ldr	r3, [r1, #16]
   85d92:	b510      	push	{r4, lr}
   85d94:	1ad2      	subs	r2, r2, r3
   85d96:	d113      	bne.n	85dc0 <__mcmp+0x32>
   85d98:	009c      	lsls	r4, r3, #2
   85d9a:	3014      	adds	r0, #20
   85d9c:	f101 0214 	add.w	r2, r1, #20
   85da0:	1903      	adds	r3, r0, r4
   85da2:	4422      	add	r2, r4
   85da4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   85da8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   85dac:	428c      	cmp	r4, r1
   85dae:	d003      	beq.n	85db8 <__mcmp+0x2a>
   85db0:	d208      	bcs.n	85dc4 <__mcmp+0x36>
   85db2:	f04f 30ff 	mov.w	r0, #4294967295
   85db6:	bd10      	pop	{r4, pc}
   85db8:	4298      	cmp	r0, r3
   85dba:	d3f3      	bcc.n	85da4 <__mcmp+0x16>
   85dbc:	2000      	movs	r0, #0
   85dbe:	bd10      	pop	{r4, pc}
   85dc0:	4610      	mov	r0, r2
   85dc2:	bd10      	pop	{r4, pc}
   85dc4:	2001      	movs	r0, #1
   85dc6:	bd10      	pop	{r4, pc}

00085dc8 <__mdiff>:
   85dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85dcc:	4606      	mov	r6, r0
   85dce:	460c      	mov	r4, r1
   85dd0:	4608      	mov	r0, r1
   85dd2:	4611      	mov	r1, r2
   85dd4:	4615      	mov	r5, r2
   85dd6:	f7ff ffda 	bl	85d8e <__mcmp>
   85dda:	1e07      	subs	r7, r0, #0
   85ddc:	d108      	bne.n	85df0 <__mdiff+0x28>
   85dde:	4630      	mov	r0, r6
   85de0:	4639      	mov	r1, r7
   85de2:	f7ff fdbf 	bl	85964 <_Balloc>
   85de6:	2301      	movs	r3, #1
   85de8:	6103      	str	r3, [r0, #16]
   85dea:	6147      	str	r7, [r0, #20]
   85dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85df0:	db01      	blt.n	85df6 <__mdiff+0x2e>
   85df2:	2700      	movs	r7, #0
   85df4:	e003      	b.n	85dfe <__mdiff+0x36>
   85df6:	4623      	mov	r3, r4
   85df8:	2701      	movs	r7, #1
   85dfa:	462c      	mov	r4, r5
   85dfc:	461d      	mov	r5, r3
   85dfe:	6861      	ldr	r1, [r4, #4]
   85e00:	4630      	mov	r0, r6
   85e02:	f7ff fdaf 	bl	85964 <_Balloc>
   85e06:	6922      	ldr	r2, [r4, #16]
   85e08:	692b      	ldr	r3, [r5, #16]
   85e0a:	3414      	adds	r4, #20
   85e0c:	f105 0614 	add.w	r6, r5, #20
   85e10:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
   85e14:	60c7      	str	r7, [r0, #12]
   85e16:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
   85e1a:	f100 0314 	add.w	r3, r0, #20
   85e1e:	2100      	movs	r1, #0
   85e20:	f854 7b04 	ldr.w	r7, [r4], #4
   85e24:	f856 9b04 	ldr.w	r9, [r6], #4
   85e28:	fa1f f887 	uxth.w	r8, r7
   85e2c:	fa1f f589 	uxth.w	r5, r9
   85e30:	4441      	add	r1, r8
   85e32:	ea4f 4919 	mov.w	r9, r9, lsr #16
   85e36:	ebc5 0801 	rsb	r8, r5, r1
   85e3a:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
   85e3e:	eb07 4728 	add.w	r7, r7, r8, asr #16
   85e42:	fa1f f888 	uxth.w	r8, r8
   85e46:	1439      	asrs	r1, r7, #16
   85e48:	45b2      	cmp	sl, r6
   85e4a:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   85e4e:	4625      	mov	r5, r4
   85e50:	f843 7b04 	str.w	r7, [r3], #4
   85e54:	d8e4      	bhi.n	85e20 <__mdiff+0x58>
   85e56:	4565      	cmp	r5, ip
   85e58:	d20d      	bcs.n	85e76 <__mdiff+0xae>
   85e5a:	f855 4b04 	ldr.w	r4, [r5], #4
   85e5e:	b2a6      	uxth	r6, r4
   85e60:	440e      	add	r6, r1
   85e62:	0c24      	lsrs	r4, r4, #16
   85e64:	eb04 4426 	add.w	r4, r4, r6, asr #16
   85e68:	b2b6      	uxth	r6, r6
   85e6a:	1421      	asrs	r1, r4, #16
   85e6c:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   85e70:	f843 4b04 	str.w	r4, [r3], #4
   85e74:	e7ef      	b.n	85e56 <__mdiff+0x8e>
   85e76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   85e7a:	b909      	cbnz	r1, 85e80 <__mdiff+0xb8>
   85e7c:	3a01      	subs	r2, #1
   85e7e:	e7fa      	b.n	85e76 <__mdiff+0xae>
   85e80:	6102      	str	r2, [r0, #16]
   85e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00085e86 <__d2b>:
   85e86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   85e8a:	2101      	movs	r1, #1
   85e8c:	461d      	mov	r5, r3
   85e8e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85e92:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   85e96:	4614      	mov	r4, r2
   85e98:	f7ff fd64 	bl	85964 <_Balloc>
   85e9c:	f3c5 570a 	ubfx	r7, r5, #20, #11
   85ea0:	4606      	mov	r6, r0
   85ea2:	f3c5 0313 	ubfx	r3, r5, #0, #20
   85ea6:	b10f      	cbz	r7, 85eac <__d2b+0x26>
   85ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   85eac:	9301      	str	r3, [sp, #4]
   85eae:	b1d4      	cbz	r4, 85ee6 <__d2b+0x60>
   85eb0:	a802      	add	r0, sp, #8
   85eb2:	f840 4d08 	str.w	r4, [r0, #-8]!
   85eb6:	4668      	mov	r0, sp
   85eb8:	f7ff fdfa 	bl	85ab0 <__lo0bits>
   85ebc:	9b00      	ldr	r3, [sp, #0]
   85ebe:	b148      	cbz	r0, 85ed4 <__d2b+0x4e>
   85ec0:	9a01      	ldr	r2, [sp, #4]
   85ec2:	f1c0 0120 	rsb	r1, r0, #32
   85ec6:	fa02 f101 	lsl.w	r1, r2, r1
   85eca:	40c2      	lsrs	r2, r0
   85ecc:	430b      	orrs	r3, r1
   85ece:	6173      	str	r3, [r6, #20]
   85ed0:	9201      	str	r2, [sp, #4]
   85ed2:	e000      	b.n	85ed6 <__d2b+0x50>
   85ed4:	6173      	str	r3, [r6, #20]
   85ed6:	9b01      	ldr	r3, [sp, #4]
   85ed8:	2b00      	cmp	r3, #0
   85eda:	bf0c      	ite	eq
   85edc:	2401      	moveq	r4, #1
   85ede:	2402      	movne	r4, #2
   85ee0:	61b3      	str	r3, [r6, #24]
   85ee2:	6134      	str	r4, [r6, #16]
   85ee4:	e007      	b.n	85ef6 <__d2b+0x70>
   85ee6:	a801      	add	r0, sp, #4
   85ee8:	f7ff fde2 	bl	85ab0 <__lo0bits>
   85eec:	9b01      	ldr	r3, [sp, #4]
   85eee:	2401      	movs	r4, #1
   85ef0:	6173      	str	r3, [r6, #20]
   85ef2:	6134      	str	r4, [r6, #16]
   85ef4:	3020      	adds	r0, #32
   85ef6:	b13f      	cbz	r7, 85f08 <__d2b+0x82>
   85ef8:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   85efc:	4407      	add	r7, r0
   85efe:	f8c9 7000 	str.w	r7, [r9]
   85f02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   85f06:	e00a      	b.n	85f1e <__d2b+0x98>
   85f08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   85f0c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   85f10:	f8c9 0000 	str.w	r0, [r9]
   85f14:	6918      	ldr	r0, [r3, #16]
   85f16:	f7ff fdab 	bl	85a70 <__hi0bits>
   85f1a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   85f1e:	f8c8 0000 	str.w	r0, [r8]
   85f22:	4630      	mov	r0, r6
   85f24:	b003      	add	sp, #12
   85f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00085f2a <_calloc_r>:
   85f2a:	b538      	push	{r3, r4, r5, lr}
   85f2c:	fb02 f401 	mul.w	r4, r2, r1
   85f30:	4621      	mov	r1, r4
   85f32:	f000 f84d 	bl	85fd0 <_malloc_r>
   85f36:	4605      	mov	r5, r0
   85f38:	b118      	cbz	r0, 85f42 <_calloc_r+0x18>
   85f3a:	2100      	movs	r1, #0
   85f3c:	4622      	mov	r2, r4
   85f3e:	f7fd fe0e 	bl	83b5e <memset>
   85f42:	4628      	mov	r0, r5
   85f44:	bd38      	pop	{r3, r4, r5, pc}
	...

00085f48 <_free_r>:
   85f48:	b530      	push	{r4, r5, lr}
   85f4a:	2900      	cmp	r1, #0
   85f4c:	d03c      	beq.n	85fc8 <_free_r+0x80>
   85f4e:	f851 2c04 	ldr.w	r2, [r1, #-4]
   85f52:	1f0b      	subs	r3, r1, #4
   85f54:	491d      	ldr	r1, [pc, #116]	; (85fcc <_free_r+0x84>)
   85f56:	2a00      	cmp	r2, #0
   85f58:	bfb8      	it	lt
   85f5a:	189b      	addlt	r3, r3, r2
   85f5c:	680a      	ldr	r2, [r1, #0]
   85f5e:	460c      	mov	r4, r1
   85f60:	b912      	cbnz	r2, 85f68 <_free_r+0x20>
   85f62:	605a      	str	r2, [r3, #4]
   85f64:	600b      	str	r3, [r1, #0]
   85f66:	bd30      	pop	{r4, r5, pc}
   85f68:	4293      	cmp	r3, r2
   85f6a:	d20d      	bcs.n	85f88 <_free_r+0x40>
   85f6c:	6819      	ldr	r1, [r3, #0]
   85f6e:	1858      	adds	r0, r3, r1
   85f70:	4290      	cmp	r0, r2
   85f72:	d103      	bne.n	85f7c <_free_r+0x34>
   85f74:	585a      	ldr	r2, [r3, r1]
   85f76:	4411      	add	r1, r2
   85f78:	6842      	ldr	r2, [r0, #4]
   85f7a:	6019      	str	r1, [r3, #0]
   85f7c:	605a      	str	r2, [r3, #4]
   85f7e:	6023      	str	r3, [r4, #0]
   85f80:	bd30      	pop	{r4, r5, pc}
   85f82:	4299      	cmp	r1, r3
   85f84:	d803      	bhi.n	85f8e <_free_r+0x46>
   85f86:	460a      	mov	r2, r1
   85f88:	6851      	ldr	r1, [r2, #4]
   85f8a:	2900      	cmp	r1, #0
   85f8c:	d1f9      	bne.n	85f82 <_free_r+0x3a>
   85f8e:	6814      	ldr	r4, [r2, #0]
   85f90:	1915      	adds	r5, r2, r4
   85f92:	429d      	cmp	r5, r3
   85f94:	d10a      	bne.n	85fac <_free_r+0x64>
   85f96:	681b      	ldr	r3, [r3, #0]
   85f98:	4423      	add	r3, r4
   85f9a:	18d0      	adds	r0, r2, r3
   85f9c:	4288      	cmp	r0, r1
   85f9e:	6013      	str	r3, [r2, #0]
   85fa0:	d112      	bne.n	85fc8 <_free_r+0x80>
   85fa2:	6808      	ldr	r0, [r1, #0]
   85fa4:	4403      	add	r3, r0
   85fa6:	6013      	str	r3, [r2, #0]
   85fa8:	684b      	ldr	r3, [r1, #4]
   85faa:	e00c      	b.n	85fc6 <_free_r+0x7e>
   85fac:	d902      	bls.n	85fb4 <_free_r+0x6c>
   85fae:	230c      	movs	r3, #12
   85fb0:	6003      	str	r3, [r0, #0]
   85fb2:	bd30      	pop	{r4, r5, pc}
   85fb4:	6818      	ldr	r0, [r3, #0]
   85fb6:	181c      	adds	r4, r3, r0
   85fb8:	428c      	cmp	r4, r1
   85fba:	d103      	bne.n	85fc4 <_free_r+0x7c>
   85fbc:	680c      	ldr	r4, [r1, #0]
   85fbe:	6849      	ldr	r1, [r1, #4]
   85fc0:	4420      	add	r0, r4
   85fc2:	6018      	str	r0, [r3, #0]
   85fc4:	6059      	str	r1, [r3, #4]
   85fc6:	6053      	str	r3, [r2, #4]
   85fc8:	bd30      	pop	{r4, r5, pc}
   85fca:	bf00      	nop
   85fcc:	20078530 	.word	0x20078530

00085fd0 <_malloc_r>:
   85fd0:	b570      	push	{r4, r5, r6, lr}
   85fd2:	1ccd      	adds	r5, r1, #3
   85fd4:	f025 0503 	bic.w	r5, r5, #3
   85fd8:	3508      	adds	r5, #8
   85fda:	2d0c      	cmp	r5, #12
   85fdc:	bf38      	it	cc
   85fde:	250c      	movcc	r5, #12
   85fe0:	2d00      	cmp	r5, #0
   85fe2:	4606      	mov	r6, r0
   85fe4:	db3f      	blt.n	86066 <_malloc_r+0x96>
   85fe6:	428d      	cmp	r5, r1
   85fe8:	d33d      	bcc.n	86066 <_malloc_r+0x96>
   85fea:	4b21      	ldr	r3, [pc, #132]	; (86070 <_malloc_r+0xa0>)
   85fec:	681c      	ldr	r4, [r3, #0]
   85fee:	4618      	mov	r0, r3
   85ff0:	4621      	mov	r1, r4
   85ff2:	b1a1      	cbz	r1, 8601e <_malloc_r+0x4e>
   85ff4:	680b      	ldr	r3, [r1, #0]
   85ff6:	1b5b      	subs	r3, r3, r5
   85ff8:	d40e      	bmi.n	86018 <_malloc_r+0x48>
   85ffa:	2b0b      	cmp	r3, #11
   85ffc:	d903      	bls.n	86006 <_malloc_r+0x36>
   85ffe:	600b      	str	r3, [r1, #0]
   86000:	18cc      	adds	r4, r1, r3
   86002:	50cd      	str	r5, [r1, r3]
   86004:	e01f      	b.n	86046 <_malloc_r+0x76>
   86006:	428c      	cmp	r4, r1
   86008:	d102      	bne.n	86010 <_malloc_r+0x40>
   8600a:	6862      	ldr	r2, [r4, #4]
   8600c:	6002      	str	r2, [r0, #0]
   8600e:	e01a      	b.n	86046 <_malloc_r+0x76>
   86010:	684b      	ldr	r3, [r1, #4]
   86012:	6063      	str	r3, [r4, #4]
   86014:	460c      	mov	r4, r1
   86016:	e016      	b.n	86046 <_malloc_r+0x76>
   86018:	460c      	mov	r4, r1
   8601a:	6849      	ldr	r1, [r1, #4]
   8601c:	e7e9      	b.n	85ff2 <_malloc_r+0x22>
   8601e:	4c15      	ldr	r4, [pc, #84]	; (86074 <_malloc_r+0xa4>)
   86020:	6823      	ldr	r3, [r4, #0]
   86022:	b91b      	cbnz	r3, 8602c <_malloc_r+0x5c>
   86024:	4630      	mov	r0, r6
   86026:	f000 f849 	bl	860bc <_sbrk_r>
   8602a:	6020      	str	r0, [r4, #0]
   8602c:	4629      	mov	r1, r5
   8602e:	4630      	mov	r0, r6
   86030:	f000 f844 	bl	860bc <_sbrk_r>
   86034:	1c43      	adds	r3, r0, #1
   86036:	4601      	mov	r1, r0
   86038:	d015      	beq.n	86066 <_malloc_r+0x96>
   8603a:	1cc4      	adds	r4, r0, #3
   8603c:	f024 0403 	bic.w	r4, r4, #3
   86040:	4284      	cmp	r4, r0
   86042:	d10a      	bne.n	8605a <_malloc_r+0x8a>
   86044:	6025      	str	r5, [r4, #0]
   86046:	f104 000b 	add.w	r0, r4, #11
   8604a:	1d23      	adds	r3, r4, #4
   8604c:	f020 0007 	bic.w	r0, r0, #7
   86050:	1ac3      	subs	r3, r0, r3
   86052:	d00b      	beq.n	8606c <_malloc_r+0x9c>
   86054:	425a      	negs	r2, r3
   86056:	50e2      	str	r2, [r4, r3]
   86058:	bd70      	pop	{r4, r5, r6, pc}
   8605a:	4630      	mov	r0, r6
   8605c:	1a61      	subs	r1, r4, r1
   8605e:	f000 f82d 	bl	860bc <_sbrk_r>
   86062:	3001      	adds	r0, #1
   86064:	d1ee      	bne.n	86044 <_malloc_r+0x74>
   86066:	230c      	movs	r3, #12
   86068:	6033      	str	r3, [r6, #0]
   8606a:	2000      	movs	r0, #0
   8606c:	bd70      	pop	{r4, r5, r6, pc}
   8606e:	bf00      	nop
   86070:	20078530 	.word	0x20078530
   86074:	2007852c 	.word	0x2007852c

00086078 <__fpclassifyd>:
   86078:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   8607c:	b510      	push	{r4, lr}
   8607e:	d100      	bne.n	86082 <__fpclassifyd+0xa>
   86080:	b178      	cbz	r0, 860a2 <__fpclassifyd+0x2a>
   86082:	4a0c      	ldr	r2, [pc, #48]	; (860b4 <__fpclassifyd+0x3c>)
   86084:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   86088:	4294      	cmp	r4, r2
   8608a:	d90c      	bls.n	860a6 <__fpclassifyd+0x2e>
   8608c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   86090:	d30b      	bcc.n	860aa <__fpclassifyd+0x32>
   86092:	4a09      	ldr	r2, [pc, #36]	; (860b8 <__fpclassifyd+0x40>)
   86094:	4293      	cmp	r3, r2
   86096:	d10a      	bne.n	860ae <__fpclassifyd+0x36>
   86098:	f1d0 0001 	rsbs	r0, r0, #1
   8609c:	bf38      	it	cc
   8609e:	2000      	movcc	r0, #0
   860a0:	bd10      	pop	{r4, pc}
   860a2:	2002      	movs	r0, #2
   860a4:	bd10      	pop	{r4, pc}
   860a6:	2004      	movs	r0, #4
   860a8:	bd10      	pop	{r4, pc}
   860aa:	2003      	movs	r0, #3
   860ac:	bd10      	pop	{r4, pc}
   860ae:	2000      	movs	r0, #0
   860b0:	bd10      	pop	{r4, pc}
   860b2:	bf00      	nop
   860b4:	7fdfffff 	.word	0x7fdfffff
   860b8:	7ff00000 	.word	0x7ff00000

000860bc <_sbrk_r>:
   860bc:	b538      	push	{r3, r4, r5, lr}
   860be:	4c06      	ldr	r4, [pc, #24]	; (860d8 <_sbrk_r+0x1c>)
   860c0:	2300      	movs	r3, #0
   860c2:	4605      	mov	r5, r0
   860c4:	4608      	mov	r0, r1
   860c6:	6023      	str	r3, [r4, #0]
   860c8:	f7fc f814 	bl	820f4 <_sbrk>
   860cc:	1c43      	adds	r3, r0, #1
   860ce:	d102      	bne.n	860d6 <_sbrk_r+0x1a>
   860d0:	6823      	ldr	r3, [r4, #0]
   860d2:	b103      	cbz	r3, 860d6 <_sbrk_r+0x1a>
   860d4:	602b      	str	r3, [r5, #0]
   860d6:	bd38      	pop	{r3, r4, r5, pc}
   860d8:	200785b8 	.word	0x200785b8

000860dc <__sread>:
   860dc:	b510      	push	{r4, lr}
   860de:	460c      	mov	r4, r1
   860e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   860e4:	f000 f894 	bl	86210 <_read_r>
   860e8:	2800      	cmp	r0, #0
   860ea:	db03      	blt.n	860f4 <__sread+0x18>
   860ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
   860ee:	4403      	add	r3, r0
   860f0:	6563      	str	r3, [r4, #84]	; 0x54
   860f2:	bd10      	pop	{r4, pc}
   860f4:	89a3      	ldrh	r3, [r4, #12]
   860f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   860fa:	81a3      	strh	r3, [r4, #12]
   860fc:	bd10      	pop	{r4, pc}

000860fe <__swrite>:
   860fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86102:	461d      	mov	r5, r3
   86104:	898b      	ldrh	r3, [r1, #12]
   86106:	4607      	mov	r7, r0
   86108:	05db      	lsls	r3, r3, #23
   8610a:	460c      	mov	r4, r1
   8610c:	4616      	mov	r6, r2
   8610e:	d505      	bpl.n	8611c <__swrite+0x1e>
   86110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86114:	2200      	movs	r2, #0
   86116:	2302      	movs	r3, #2
   86118:	f000 f868 	bl	861ec <_lseek_r>
   8611c:	89a3      	ldrh	r3, [r4, #12]
   8611e:	4638      	mov	r0, r7
   86120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86124:	81a3      	strh	r3, [r4, #12]
   86126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8612a:	4632      	mov	r2, r6
   8612c:	462b      	mov	r3, r5
   8612e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86132:	f000 b817 	b.w	86164 <_write_r>

00086136 <__sseek>:
   86136:	b510      	push	{r4, lr}
   86138:	460c      	mov	r4, r1
   8613a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8613e:	f000 f855 	bl	861ec <_lseek_r>
   86142:	1c43      	adds	r3, r0, #1
   86144:	89a3      	ldrh	r3, [r4, #12]
   86146:	d103      	bne.n	86150 <__sseek+0x1a>
   86148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8614c:	81a3      	strh	r3, [r4, #12]
   8614e:	bd10      	pop	{r4, pc}
   86150:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   86154:	81a3      	strh	r3, [r4, #12]
   86156:	6560      	str	r0, [r4, #84]	; 0x54
   86158:	bd10      	pop	{r4, pc}

0008615a <__sclose>:
   8615a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8615e:	f000 b813 	b.w	86188 <_close_r>
	...

00086164 <_write_r>:
   86164:	b538      	push	{r3, r4, r5, lr}
   86166:	4c07      	ldr	r4, [pc, #28]	; (86184 <_write_r+0x20>)
   86168:	4605      	mov	r5, r0
   8616a:	2000      	movs	r0, #0
   8616c:	6020      	str	r0, [r4, #0]
   8616e:	4608      	mov	r0, r1
   86170:	4611      	mov	r1, r2
   86172:	461a      	mov	r2, r3
   86174:	f7fb fa60 	bl	81638 <_write>
   86178:	1c43      	adds	r3, r0, #1
   8617a:	d102      	bne.n	86182 <_write_r+0x1e>
   8617c:	6823      	ldr	r3, [r4, #0]
   8617e:	b103      	cbz	r3, 86182 <_write_r+0x1e>
   86180:	602b      	str	r3, [r5, #0]
   86182:	bd38      	pop	{r3, r4, r5, pc}
   86184:	200785b8 	.word	0x200785b8

00086188 <_close_r>:
   86188:	b538      	push	{r3, r4, r5, lr}
   8618a:	4c06      	ldr	r4, [pc, #24]	; (861a4 <_close_r+0x1c>)
   8618c:	2300      	movs	r3, #0
   8618e:	4605      	mov	r5, r0
   86190:	4608      	mov	r0, r1
   86192:	6023      	str	r3, [r4, #0]
   86194:	f7fb ffc8 	bl	82128 <_close>
   86198:	1c43      	adds	r3, r0, #1
   8619a:	d102      	bne.n	861a2 <_close_r+0x1a>
   8619c:	6823      	ldr	r3, [r4, #0]
   8619e:	b103      	cbz	r3, 861a2 <_close_r+0x1a>
   861a0:	602b      	str	r3, [r5, #0]
   861a2:	bd38      	pop	{r3, r4, r5, pc}
   861a4:	200785b8 	.word	0x200785b8

000861a8 <_fstat_r>:
   861a8:	b538      	push	{r3, r4, r5, lr}
   861aa:	4c07      	ldr	r4, [pc, #28]	; (861c8 <_fstat_r+0x20>)
   861ac:	2300      	movs	r3, #0
   861ae:	4605      	mov	r5, r0
   861b0:	4608      	mov	r0, r1
   861b2:	4611      	mov	r1, r2
   861b4:	6023      	str	r3, [r4, #0]
   861b6:	f7fb ffbb 	bl	82130 <_fstat>
   861ba:	1c43      	adds	r3, r0, #1
   861bc:	d102      	bne.n	861c4 <_fstat_r+0x1c>
   861be:	6823      	ldr	r3, [r4, #0]
   861c0:	b103      	cbz	r3, 861c4 <_fstat_r+0x1c>
   861c2:	602b      	str	r3, [r5, #0]
   861c4:	bd38      	pop	{r3, r4, r5, pc}
   861c6:	bf00      	nop
   861c8:	200785b8 	.word	0x200785b8

000861cc <_isatty_r>:
   861cc:	b538      	push	{r3, r4, r5, lr}
   861ce:	4c06      	ldr	r4, [pc, #24]	; (861e8 <_isatty_r+0x1c>)
   861d0:	2300      	movs	r3, #0
   861d2:	4605      	mov	r5, r0
   861d4:	4608      	mov	r0, r1
   861d6:	6023      	str	r3, [r4, #0]
   861d8:	f7fb ffb0 	bl	8213c <_isatty>
   861dc:	1c43      	adds	r3, r0, #1
   861de:	d102      	bne.n	861e6 <_isatty_r+0x1a>
   861e0:	6823      	ldr	r3, [r4, #0]
   861e2:	b103      	cbz	r3, 861e6 <_isatty_r+0x1a>
   861e4:	602b      	str	r3, [r5, #0]
   861e6:	bd38      	pop	{r3, r4, r5, pc}
   861e8:	200785b8 	.word	0x200785b8

000861ec <_lseek_r>:
   861ec:	b538      	push	{r3, r4, r5, lr}
   861ee:	4c07      	ldr	r4, [pc, #28]	; (8620c <_lseek_r+0x20>)
   861f0:	4605      	mov	r5, r0
   861f2:	2000      	movs	r0, #0
   861f4:	6020      	str	r0, [r4, #0]
   861f6:	4608      	mov	r0, r1
   861f8:	4611      	mov	r1, r2
   861fa:	461a      	mov	r2, r3
   861fc:	f7fb ffa0 	bl	82140 <_lseek>
   86200:	1c43      	adds	r3, r0, #1
   86202:	d102      	bne.n	8620a <_lseek_r+0x1e>
   86204:	6823      	ldr	r3, [r4, #0]
   86206:	b103      	cbz	r3, 8620a <_lseek_r+0x1e>
   86208:	602b      	str	r3, [r5, #0]
   8620a:	bd38      	pop	{r3, r4, r5, pc}
   8620c:	200785b8 	.word	0x200785b8

00086210 <_read_r>:
   86210:	b538      	push	{r3, r4, r5, lr}
   86212:	4c07      	ldr	r4, [pc, #28]	; (86230 <_read_r+0x20>)
   86214:	4605      	mov	r5, r0
   86216:	2000      	movs	r0, #0
   86218:	6020      	str	r0, [r4, #0]
   8621a:	4608      	mov	r0, r1
   8621c:	4611      	mov	r1, r2
   8621e:	461a      	mov	r2, r3
   86220:	f7fb f9ea 	bl	815f8 <_read>
   86224:	1c43      	adds	r3, r0, #1
   86226:	d102      	bne.n	8622e <_read_r+0x1e>
   86228:	6823      	ldr	r3, [r4, #0]
   8622a:	b103      	cbz	r3, 8622e <_read_r+0x1e>
   8622c:	602b      	str	r3, [r5, #0]
   8622e:	bd38      	pop	{r3, r4, r5, pc}
   86230:	200785b8 	.word	0x200785b8

00086234 <__aeabi_drsub>:
   86234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   86238:	e002      	b.n	86240 <__adddf3>
   8623a:	bf00      	nop

0008623c <__aeabi_dsub>:
   8623c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00086240 <__adddf3>:
   86240:	b530      	push	{r4, r5, lr}
   86242:	ea4f 0441 	mov.w	r4, r1, lsl #1
   86246:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8624a:	ea94 0f05 	teq	r4, r5
   8624e:	bf08      	it	eq
   86250:	ea90 0f02 	teqeq	r0, r2
   86254:	bf1f      	itttt	ne
   86256:	ea54 0c00 	orrsne.w	ip, r4, r0
   8625a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8625e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   86262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   86266:	f000 80e2 	beq.w	8642e <__adddf3+0x1ee>
   8626a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8626e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   86272:	bfb8      	it	lt
   86274:	426d      	neglt	r5, r5
   86276:	dd0c      	ble.n	86292 <__adddf3+0x52>
   86278:	442c      	add	r4, r5
   8627a:	ea80 0202 	eor.w	r2, r0, r2
   8627e:	ea81 0303 	eor.w	r3, r1, r3
   86282:	ea82 0000 	eor.w	r0, r2, r0
   86286:	ea83 0101 	eor.w	r1, r3, r1
   8628a:	ea80 0202 	eor.w	r2, r0, r2
   8628e:	ea81 0303 	eor.w	r3, r1, r3
   86292:	2d36      	cmp	r5, #54	; 0x36
   86294:	bf88      	it	hi
   86296:	bd30      	pophi	{r4, r5, pc}
   86298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8629c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   862a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   862a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   862a8:	d002      	beq.n	862b0 <__adddf3+0x70>
   862aa:	4240      	negs	r0, r0
   862ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   862b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   862b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   862b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   862bc:	d002      	beq.n	862c4 <__adddf3+0x84>
   862be:	4252      	negs	r2, r2
   862c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   862c4:	ea94 0f05 	teq	r4, r5
   862c8:	f000 80a7 	beq.w	8641a <__adddf3+0x1da>
   862cc:	f1a4 0401 	sub.w	r4, r4, #1
   862d0:	f1d5 0e20 	rsbs	lr, r5, #32
   862d4:	db0d      	blt.n	862f2 <__adddf3+0xb2>
   862d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   862da:	fa22 f205 	lsr.w	r2, r2, r5
   862de:	1880      	adds	r0, r0, r2
   862e0:	f141 0100 	adc.w	r1, r1, #0
   862e4:	fa03 f20e 	lsl.w	r2, r3, lr
   862e8:	1880      	adds	r0, r0, r2
   862ea:	fa43 f305 	asr.w	r3, r3, r5
   862ee:	4159      	adcs	r1, r3
   862f0:	e00e      	b.n	86310 <__adddf3+0xd0>
   862f2:	f1a5 0520 	sub.w	r5, r5, #32
   862f6:	f10e 0e20 	add.w	lr, lr, #32
   862fa:	2a01      	cmp	r2, #1
   862fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   86300:	bf28      	it	cs
   86302:	f04c 0c02 	orrcs.w	ip, ip, #2
   86306:	fa43 f305 	asr.w	r3, r3, r5
   8630a:	18c0      	adds	r0, r0, r3
   8630c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   86310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   86314:	d507      	bpl.n	86326 <__adddf3+0xe6>
   86316:	f04f 0e00 	mov.w	lr, #0
   8631a:	f1dc 0c00 	rsbs	ip, ip, #0
   8631e:	eb7e 0000 	sbcs.w	r0, lr, r0
   86322:	eb6e 0101 	sbc.w	r1, lr, r1
   86326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8632a:	d31b      	bcc.n	86364 <__adddf3+0x124>
   8632c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   86330:	d30c      	bcc.n	8634c <__adddf3+0x10c>
   86332:	0849      	lsrs	r1, r1, #1
   86334:	ea5f 0030 	movs.w	r0, r0, rrx
   86338:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8633c:	f104 0401 	add.w	r4, r4, #1
   86340:	ea4f 5244 	mov.w	r2, r4, lsl #21
   86344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   86348:	f080 809a 	bcs.w	86480 <__adddf3+0x240>
   8634c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   86350:	bf08      	it	eq
   86352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   86356:	f150 0000 	adcs.w	r0, r0, #0
   8635a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8635e:	ea41 0105 	orr.w	r1, r1, r5
   86362:	bd30      	pop	{r4, r5, pc}
   86364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   86368:	4140      	adcs	r0, r0
   8636a:	eb41 0101 	adc.w	r1, r1, r1
   8636e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86372:	f1a4 0401 	sub.w	r4, r4, #1
   86376:	d1e9      	bne.n	8634c <__adddf3+0x10c>
   86378:	f091 0f00 	teq	r1, #0
   8637c:	bf04      	itt	eq
   8637e:	4601      	moveq	r1, r0
   86380:	2000      	moveq	r0, #0
   86382:	fab1 f381 	clz	r3, r1
   86386:	bf08      	it	eq
   86388:	3320      	addeq	r3, #32
   8638a:	f1a3 030b 	sub.w	r3, r3, #11
   8638e:	f1b3 0220 	subs.w	r2, r3, #32
   86392:	da0c      	bge.n	863ae <__adddf3+0x16e>
   86394:	320c      	adds	r2, #12
   86396:	dd08      	ble.n	863aa <__adddf3+0x16a>
   86398:	f102 0c14 	add.w	ip, r2, #20
   8639c:	f1c2 020c 	rsb	r2, r2, #12
   863a0:	fa01 f00c 	lsl.w	r0, r1, ip
   863a4:	fa21 f102 	lsr.w	r1, r1, r2
   863a8:	e00c      	b.n	863c4 <__adddf3+0x184>
   863aa:	f102 0214 	add.w	r2, r2, #20
   863ae:	bfd8      	it	le
   863b0:	f1c2 0c20 	rsble	ip, r2, #32
   863b4:	fa01 f102 	lsl.w	r1, r1, r2
   863b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   863bc:	bfdc      	itt	le
   863be:	ea41 010c 	orrle.w	r1, r1, ip
   863c2:	4090      	lslle	r0, r2
   863c4:	1ae4      	subs	r4, r4, r3
   863c6:	bfa2      	ittt	ge
   863c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   863cc:	4329      	orrge	r1, r5
   863ce:	bd30      	popge	{r4, r5, pc}
   863d0:	ea6f 0404 	mvn.w	r4, r4
   863d4:	3c1f      	subs	r4, #31
   863d6:	da1c      	bge.n	86412 <__adddf3+0x1d2>
   863d8:	340c      	adds	r4, #12
   863da:	dc0e      	bgt.n	863fa <__adddf3+0x1ba>
   863dc:	f104 0414 	add.w	r4, r4, #20
   863e0:	f1c4 0220 	rsb	r2, r4, #32
   863e4:	fa20 f004 	lsr.w	r0, r0, r4
   863e8:	fa01 f302 	lsl.w	r3, r1, r2
   863ec:	ea40 0003 	orr.w	r0, r0, r3
   863f0:	fa21 f304 	lsr.w	r3, r1, r4
   863f4:	ea45 0103 	orr.w	r1, r5, r3
   863f8:	bd30      	pop	{r4, r5, pc}
   863fa:	f1c4 040c 	rsb	r4, r4, #12
   863fe:	f1c4 0220 	rsb	r2, r4, #32
   86402:	fa20 f002 	lsr.w	r0, r0, r2
   86406:	fa01 f304 	lsl.w	r3, r1, r4
   8640a:	ea40 0003 	orr.w	r0, r0, r3
   8640e:	4629      	mov	r1, r5
   86410:	bd30      	pop	{r4, r5, pc}
   86412:	fa21 f004 	lsr.w	r0, r1, r4
   86416:	4629      	mov	r1, r5
   86418:	bd30      	pop	{r4, r5, pc}
   8641a:	f094 0f00 	teq	r4, #0
   8641e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   86422:	bf06      	itte	eq
   86424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   86428:	3401      	addeq	r4, #1
   8642a:	3d01      	subne	r5, #1
   8642c:	e74e      	b.n	862cc <__adddf3+0x8c>
   8642e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   86432:	bf18      	it	ne
   86434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   86438:	d029      	beq.n	8648e <__adddf3+0x24e>
   8643a:	ea94 0f05 	teq	r4, r5
   8643e:	bf08      	it	eq
   86440:	ea90 0f02 	teqeq	r0, r2
   86444:	d005      	beq.n	86452 <__adddf3+0x212>
   86446:	ea54 0c00 	orrs.w	ip, r4, r0
   8644a:	bf04      	itt	eq
   8644c:	4619      	moveq	r1, r3
   8644e:	4610      	moveq	r0, r2
   86450:	bd30      	pop	{r4, r5, pc}
   86452:	ea91 0f03 	teq	r1, r3
   86456:	bf1e      	ittt	ne
   86458:	2100      	movne	r1, #0
   8645a:	2000      	movne	r0, #0
   8645c:	bd30      	popne	{r4, r5, pc}
   8645e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   86462:	d105      	bne.n	86470 <__adddf3+0x230>
   86464:	0040      	lsls	r0, r0, #1
   86466:	4149      	adcs	r1, r1
   86468:	bf28      	it	cs
   8646a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8646e:	bd30      	pop	{r4, r5, pc}
   86470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   86474:	bf3c      	itt	cc
   86476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8647a:	bd30      	popcc	{r4, r5, pc}
   8647c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   86480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   86484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   86488:	f04f 0000 	mov.w	r0, #0
   8648c:	bd30      	pop	{r4, r5, pc}
   8648e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   86492:	bf1a      	itte	ne
   86494:	4619      	movne	r1, r3
   86496:	4610      	movne	r0, r2
   86498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8649c:	bf1c      	itt	ne
   8649e:	460b      	movne	r3, r1
   864a0:	4602      	movne	r2, r0
   864a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   864a6:	bf06      	itte	eq
   864a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   864ac:	ea91 0f03 	teqeq	r1, r3
   864b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   864b4:	bd30      	pop	{r4, r5, pc}
   864b6:	bf00      	nop

000864b8 <__aeabi_ui2d>:
   864b8:	f090 0f00 	teq	r0, #0
   864bc:	bf04      	itt	eq
   864be:	2100      	moveq	r1, #0
   864c0:	4770      	bxeq	lr
   864c2:	b530      	push	{r4, r5, lr}
   864c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   864c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   864cc:	f04f 0500 	mov.w	r5, #0
   864d0:	f04f 0100 	mov.w	r1, #0
   864d4:	e750      	b.n	86378 <__adddf3+0x138>
   864d6:	bf00      	nop

000864d8 <__aeabi_i2d>:
   864d8:	f090 0f00 	teq	r0, #0
   864dc:	bf04      	itt	eq
   864de:	2100      	moveq	r1, #0
   864e0:	4770      	bxeq	lr
   864e2:	b530      	push	{r4, r5, lr}
   864e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   864e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   864ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   864f0:	bf48      	it	mi
   864f2:	4240      	negmi	r0, r0
   864f4:	f04f 0100 	mov.w	r1, #0
   864f8:	e73e      	b.n	86378 <__adddf3+0x138>
   864fa:	bf00      	nop

000864fc <__aeabi_f2d>:
   864fc:	0042      	lsls	r2, r0, #1
   864fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   86502:	ea4f 0131 	mov.w	r1, r1, rrx
   86506:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8650a:	bf1f      	itttt	ne
   8650c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   86510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   86514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   86518:	4770      	bxne	lr
   8651a:	f092 0f00 	teq	r2, #0
   8651e:	bf14      	ite	ne
   86520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   86524:	4770      	bxeq	lr
   86526:	b530      	push	{r4, r5, lr}
   86528:	f44f 7460 	mov.w	r4, #896	; 0x380
   8652c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   86530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   86534:	e720      	b.n	86378 <__adddf3+0x138>
   86536:	bf00      	nop

00086538 <__aeabi_ul2d>:
   86538:	ea50 0201 	orrs.w	r2, r0, r1
   8653c:	bf08      	it	eq
   8653e:	4770      	bxeq	lr
   86540:	b530      	push	{r4, r5, lr}
   86542:	f04f 0500 	mov.w	r5, #0
   86546:	e00a      	b.n	8655e <__aeabi_l2d+0x16>

00086548 <__aeabi_l2d>:
   86548:	ea50 0201 	orrs.w	r2, r0, r1
   8654c:	bf08      	it	eq
   8654e:	4770      	bxeq	lr
   86550:	b530      	push	{r4, r5, lr}
   86552:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   86556:	d502      	bpl.n	8655e <__aeabi_l2d+0x16>
   86558:	4240      	negs	r0, r0
   8655a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8655e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   86562:	f104 0432 	add.w	r4, r4, #50	; 0x32
   86566:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8656a:	f43f aedc 	beq.w	86326 <__adddf3+0xe6>
   8656e:	f04f 0203 	mov.w	r2, #3
   86572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   86576:	bf18      	it	ne
   86578:	3203      	addne	r2, #3
   8657a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8657e:	bf18      	it	ne
   86580:	3203      	addne	r2, #3
   86582:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   86586:	f1c2 0320 	rsb	r3, r2, #32
   8658a:	fa00 fc03 	lsl.w	ip, r0, r3
   8658e:	fa20 f002 	lsr.w	r0, r0, r2
   86592:	fa01 fe03 	lsl.w	lr, r1, r3
   86596:	ea40 000e 	orr.w	r0, r0, lr
   8659a:	fa21 f102 	lsr.w	r1, r1, r2
   8659e:	4414      	add	r4, r2
   865a0:	e6c1      	b.n	86326 <__adddf3+0xe6>
   865a2:	bf00      	nop

000865a4 <__aeabi_dmul>:
   865a4:	b570      	push	{r4, r5, r6, lr}
   865a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   865aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   865ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   865b2:	bf1d      	ittte	ne
   865b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   865b8:	ea94 0f0c 	teqne	r4, ip
   865bc:	ea95 0f0c 	teqne	r5, ip
   865c0:	f000 f8de 	bleq	86780 <__aeabi_dmul+0x1dc>
   865c4:	442c      	add	r4, r5
   865c6:	ea81 0603 	eor.w	r6, r1, r3
   865ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   865ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   865d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   865d6:	bf18      	it	ne
   865d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   865dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   865e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   865e4:	d038      	beq.n	86658 <__aeabi_dmul+0xb4>
   865e6:	fba0 ce02 	umull	ip, lr, r0, r2
   865ea:	f04f 0500 	mov.w	r5, #0
   865ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   865f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   865f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   865fa:	f04f 0600 	mov.w	r6, #0
   865fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   86602:	f09c 0f00 	teq	ip, #0
   86606:	bf18      	it	ne
   86608:	f04e 0e01 	orrne.w	lr, lr, #1
   8660c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   86610:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   86614:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   86618:	d204      	bcs.n	86624 <__aeabi_dmul+0x80>
   8661a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8661e:	416d      	adcs	r5, r5
   86620:	eb46 0606 	adc.w	r6, r6, r6
   86624:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   86628:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8662c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   86630:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   86634:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   86638:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8663c:	bf88      	it	hi
   8663e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   86642:	d81e      	bhi.n	86682 <__aeabi_dmul+0xde>
   86644:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   86648:	bf08      	it	eq
   8664a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8664e:	f150 0000 	adcs.w	r0, r0, #0
   86652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   86656:	bd70      	pop	{r4, r5, r6, pc}
   86658:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8665c:	ea46 0101 	orr.w	r1, r6, r1
   86660:	ea40 0002 	orr.w	r0, r0, r2
   86664:	ea81 0103 	eor.w	r1, r1, r3
   86668:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8666c:	bfc2      	ittt	gt
   8666e:	ebd4 050c 	rsbsgt	r5, r4, ip
   86672:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   86676:	bd70      	popgt	{r4, r5, r6, pc}
   86678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8667c:	f04f 0e00 	mov.w	lr, #0
   86680:	3c01      	subs	r4, #1
   86682:	f300 80ab 	bgt.w	867dc <__aeabi_dmul+0x238>
   86686:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8668a:	bfde      	ittt	le
   8668c:	2000      	movle	r0, #0
   8668e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   86692:	bd70      	pople	{r4, r5, r6, pc}
   86694:	f1c4 0400 	rsb	r4, r4, #0
   86698:	3c20      	subs	r4, #32
   8669a:	da35      	bge.n	86708 <__aeabi_dmul+0x164>
   8669c:	340c      	adds	r4, #12
   8669e:	dc1b      	bgt.n	866d8 <__aeabi_dmul+0x134>
   866a0:	f104 0414 	add.w	r4, r4, #20
   866a4:	f1c4 0520 	rsb	r5, r4, #32
   866a8:	fa00 f305 	lsl.w	r3, r0, r5
   866ac:	fa20 f004 	lsr.w	r0, r0, r4
   866b0:	fa01 f205 	lsl.w	r2, r1, r5
   866b4:	ea40 0002 	orr.w	r0, r0, r2
   866b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   866bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   866c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   866c4:	fa21 f604 	lsr.w	r6, r1, r4
   866c8:	eb42 0106 	adc.w	r1, r2, r6
   866cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   866d0:	bf08      	it	eq
   866d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   866d6:	bd70      	pop	{r4, r5, r6, pc}
   866d8:	f1c4 040c 	rsb	r4, r4, #12
   866dc:	f1c4 0520 	rsb	r5, r4, #32
   866e0:	fa00 f304 	lsl.w	r3, r0, r4
   866e4:	fa20 f005 	lsr.w	r0, r0, r5
   866e8:	fa01 f204 	lsl.w	r2, r1, r4
   866ec:	ea40 0002 	orr.w	r0, r0, r2
   866f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   866f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   866f8:	f141 0100 	adc.w	r1, r1, #0
   866fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86700:	bf08      	it	eq
   86702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   86706:	bd70      	pop	{r4, r5, r6, pc}
   86708:	f1c4 0520 	rsb	r5, r4, #32
   8670c:	fa00 f205 	lsl.w	r2, r0, r5
   86710:	ea4e 0e02 	orr.w	lr, lr, r2
   86714:	fa20 f304 	lsr.w	r3, r0, r4
   86718:	fa01 f205 	lsl.w	r2, r1, r5
   8671c:	ea43 0302 	orr.w	r3, r3, r2
   86720:	fa21 f004 	lsr.w	r0, r1, r4
   86724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86728:	fa21 f204 	lsr.w	r2, r1, r4
   8672c:	ea20 0002 	bic.w	r0, r0, r2
   86730:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   86734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86738:	bf08      	it	eq
   8673a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8673e:	bd70      	pop	{r4, r5, r6, pc}
   86740:	f094 0f00 	teq	r4, #0
   86744:	d10f      	bne.n	86766 <__aeabi_dmul+0x1c2>
   86746:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8674a:	0040      	lsls	r0, r0, #1
   8674c:	eb41 0101 	adc.w	r1, r1, r1
   86750:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86754:	bf08      	it	eq
   86756:	3c01      	subeq	r4, #1
   86758:	d0f7      	beq.n	8674a <__aeabi_dmul+0x1a6>
   8675a:	ea41 0106 	orr.w	r1, r1, r6
   8675e:	f095 0f00 	teq	r5, #0
   86762:	bf18      	it	ne
   86764:	4770      	bxne	lr
   86766:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8676a:	0052      	lsls	r2, r2, #1
   8676c:	eb43 0303 	adc.w	r3, r3, r3
   86770:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   86774:	bf08      	it	eq
   86776:	3d01      	subeq	r5, #1
   86778:	d0f7      	beq.n	8676a <__aeabi_dmul+0x1c6>
   8677a:	ea43 0306 	orr.w	r3, r3, r6
   8677e:	4770      	bx	lr
   86780:	ea94 0f0c 	teq	r4, ip
   86784:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   86788:	bf18      	it	ne
   8678a:	ea95 0f0c 	teqne	r5, ip
   8678e:	d00c      	beq.n	867aa <__aeabi_dmul+0x206>
   86790:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   86794:	bf18      	it	ne
   86796:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8679a:	d1d1      	bne.n	86740 <__aeabi_dmul+0x19c>
   8679c:	ea81 0103 	eor.w	r1, r1, r3
   867a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   867a4:	f04f 0000 	mov.w	r0, #0
   867a8:	bd70      	pop	{r4, r5, r6, pc}
   867aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   867ae:	bf06      	itte	eq
   867b0:	4610      	moveq	r0, r2
   867b2:	4619      	moveq	r1, r3
   867b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   867b8:	d019      	beq.n	867ee <__aeabi_dmul+0x24a>
   867ba:	ea94 0f0c 	teq	r4, ip
   867be:	d102      	bne.n	867c6 <__aeabi_dmul+0x222>
   867c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   867c4:	d113      	bne.n	867ee <__aeabi_dmul+0x24a>
   867c6:	ea95 0f0c 	teq	r5, ip
   867ca:	d105      	bne.n	867d8 <__aeabi_dmul+0x234>
   867cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   867d0:	bf1c      	itt	ne
   867d2:	4610      	movne	r0, r2
   867d4:	4619      	movne	r1, r3
   867d6:	d10a      	bne.n	867ee <__aeabi_dmul+0x24a>
   867d8:	ea81 0103 	eor.w	r1, r1, r3
   867dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   867e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   867e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   867e8:	f04f 0000 	mov.w	r0, #0
   867ec:	bd70      	pop	{r4, r5, r6, pc}
   867ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   867f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   867f6:	bd70      	pop	{r4, r5, r6, pc}

000867f8 <__aeabi_ddiv>:
   867f8:	b570      	push	{r4, r5, r6, lr}
   867fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   867fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   86802:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   86806:	bf1d      	ittte	ne
   86808:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8680c:	ea94 0f0c 	teqne	r4, ip
   86810:	ea95 0f0c 	teqne	r5, ip
   86814:	f000 f8a7 	bleq	86966 <__aeabi_ddiv+0x16e>
   86818:	eba4 0405 	sub.w	r4, r4, r5
   8681c:	ea81 0e03 	eor.w	lr, r1, r3
   86820:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   86824:	ea4f 3101 	mov.w	r1, r1, lsl #12
   86828:	f000 8088 	beq.w	8693c <__aeabi_ddiv+0x144>
   8682c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   86830:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   86834:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   86838:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8683c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   86840:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   86844:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   86848:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8684c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   86850:	429d      	cmp	r5, r3
   86852:	bf08      	it	eq
   86854:	4296      	cmpeq	r6, r2
   86856:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8685a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8685e:	d202      	bcs.n	86866 <__aeabi_ddiv+0x6e>
   86860:	085b      	lsrs	r3, r3, #1
   86862:	ea4f 0232 	mov.w	r2, r2, rrx
   86866:	1ab6      	subs	r6, r6, r2
   86868:	eb65 0503 	sbc.w	r5, r5, r3
   8686c:	085b      	lsrs	r3, r3, #1
   8686e:	ea4f 0232 	mov.w	r2, r2, rrx
   86872:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   86876:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8687a:	ebb6 0e02 	subs.w	lr, r6, r2
   8687e:	eb75 0e03 	sbcs.w	lr, r5, r3
   86882:	bf22      	ittt	cs
   86884:	1ab6      	subcs	r6, r6, r2
   86886:	4675      	movcs	r5, lr
   86888:	ea40 000c 	orrcs.w	r0, r0, ip
   8688c:	085b      	lsrs	r3, r3, #1
   8688e:	ea4f 0232 	mov.w	r2, r2, rrx
   86892:	ebb6 0e02 	subs.w	lr, r6, r2
   86896:	eb75 0e03 	sbcs.w	lr, r5, r3
   8689a:	bf22      	ittt	cs
   8689c:	1ab6      	subcs	r6, r6, r2
   8689e:	4675      	movcs	r5, lr
   868a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   868a4:	085b      	lsrs	r3, r3, #1
   868a6:	ea4f 0232 	mov.w	r2, r2, rrx
   868aa:	ebb6 0e02 	subs.w	lr, r6, r2
   868ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   868b2:	bf22      	ittt	cs
   868b4:	1ab6      	subcs	r6, r6, r2
   868b6:	4675      	movcs	r5, lr
   868b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   868bc:	085b      	lsrs	r3, r3, #1
   868be:	ea4f 0232 	mov.w	r2, r2, rrx
   868c2:	ebb6 0e02 	subs.w	lr, r6, r2
   868c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   868ca:	bf22      	ittt	cs
   868cc:	1ab6      	subcs	r6, r6, r2
   868ce:	4675      	movcs	r5, lr
   868d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   868d4:	ea55 0e06 	orrs.w	lr, r5, r6
   868d8:	d018      	beq.n	8690c <__aeabi_ddiv+0x114>
   868da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   868de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   868e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   868e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   868ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   868ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   868f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   868f6:	d1c0      	bne.n	8687a <__aeabi_ddiv+0x82>
   868f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   868fc:	d10b      	bne.n	86916 <__aeabi_ddiv+0x11e>
   868fe:	ea41 0100 	orr.w	r1, r1, r0
   86902:	f04f 0000 	mov.w	r0, #0
   86906:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8690a:	e7b6      	b.n	8687a <__aeabi_ddiv+0x82>
   8690c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86910:	bf04      	itt	eq
   86912:	4301      	orreq	r1, r0
   86914:	2000      	moveq	r0, #0
   86916:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8691a:	bf88      	it	hi
   8691c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   86920:	f63f aeaf 	bhi.w	86682 <__aeabi_dmul+0xde>
   86924:	ebb5 0c03 	subs.w	ip, r5, r3
   86928:	bf04      	itt	eq
   8692a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8692e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   86932:	f150 0000 	adcs.w	r0, r0, #0
   86936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8693a:	bd70      	pop	{r4, r5, r6, pc}
   8693c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   86940:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   86944:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   86948:	bfc2      	ittt	gt
   8694a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8694e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   86952:	bd70      	popgt	{r4, r5, r6, pc}
   86954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   86958:	f04f 0e00 	mov.w	lr, #0
   8695c:	3c01      	subs	r4, #1
   8695e:	e690      	b.n	86682 <__aeabi_dmul+0xde>
   86960:	ea45 0e06 	orr.w	lr, r5, r6
   86964:	e68d      	b.n	86682 <__aeabi_dmul+0xde>
   86966:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8696a:	ea94 0f0c 	teq	r4, ip
   8696e:	bf08      	it	eq
   86970:	ea95 0f0c 	teqeq	r5, ip
   86974:	f43f af3b 	beq.w	867ee <__aeabi_dmul+0x24a>
   86978:	ea94 0f0c 	teq	r4, ip
   8697c:	d10a      	bne.n	86994 <__aeabi_ddiv+0x19c>
   8697e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   86982:	f47f af34 	bne.w	867ee <__aeabi_dmul+0x24a>
   86986:	ea95 0f0c 	teq	r5, ip
   8698a:	f47f af25 	bne.w	867d8 <__aeabi_dmul+0x234>
   8698e:	4610      	mov	r0, r2
   86990:	4619      	mov	r1, r3
   86992:	e72c      	b.n	867ee <__aeabi_dmul+0x24a>
   86994:	ea95 0f0c 	teq	r5, ip
   86998:	d106      	bne.n	869a8 <__aeabi_ddiv+0x1b0>
   8699a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8699e:	f43f aefd 	beq.w	8679c <__aeabi_dmul+0x1f8>
   869a2:	4610      	mov	r0, r2
   869a4:	4619      	mov	r1, r3
   869a6:	e722      	b.n	867ee <__aeabi_dmul+0x24a>
   869a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   869ac:	bf18      	it	ne
   869ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   869b2:	f47f aec5 	bne.w	86740 <__aeabi_dmul+0x19c>
   869b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   869ba:	f47f af0d 	bne.w	867d8 <__aeabi_dmul+0x234>
   869be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   869c2:	f47f aeeb 	bne.w	8679c <__aeabi_dmul+0x1f8>
   869c6:	e712      	b.n	867ee <__aeabi_dmul+0x24a>

000869c8 <__gedf2>:
   869c8:	f04f 3cff 	mov.w	ip, #4294967295
   869cc:	e006      	b.n	869dc <__cmpdf2+0x4>
   869ce:	bf00      	nop

000869d0 <__ledf2>:
   869d0:	f04f 0c01 	mov.w	ip, #1
   869d4:	e002      	b.n	869dc <__cmpdf2+0x4>
   869d6:	bf00      	nop

000869d8 <__cmpdf2>:
   869d8:	f04f 0c01 	mov.w	ip, #1
   869dc:	f84d cd04 	str.w	ip, [sp, #-4]!
   869e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   869e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   869e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   869ec:	bf18      	it	ne
   869ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   869f2:	d01b      	beq.n	86a2c <__cmpdf2+0x54>
   869f4:	b001      	add	sp, #4
   869f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   869fa:	bf0c      	ite	eq
   869fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   86a00:	ea91 0f03 	teqne	r1, r3
   86a04:	bf02      	ittt	eq
   86a06:	ea90 0f02 	teqeq	r0, r2
   86a0a:	2000      	moveq	r0, #0
   86a0c:	4770      	bxeq	lr
   86a0e:	f110 0f00 	cmn.w	r0, #0
   86a12:	ea91 0f03 	teq	r1, r3
   86a16:	bf58      	it	pl
   86a18:	4299      	cmppl	r1, r3
   86a1a:	bf08      	it	eq
   86a1c:	4290      	cmpeq	r0, r2
   86a1e:	bf2c      	ite	cs
   86a20:	17d8      	asrcs	r0, r3, #31
   86a22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   86a26:	f040 0001 	orr.w	r0, r0, #1
   86a2a:	4770      	bx	lr
   86a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   86a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86a34:	d102      	bne.n	86a3c <__cmpdf2+0x64>
   86a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   86a3a:	d107      	bne.n	86a4c <__cmpdf2+0x74>
   86a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   86a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86a44:	d1d6      	bne.n	869f4 <__cmpdf2+0x1c>
   86a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   86a4a:	d0d3      	beq.n	869f4 <__cmpdf2+0x1c>
   86a4c:	f85d 0b04 	ldr.w	r0, [sp], #4
   86a50:	4770      	bx	lr
   86a52:	bf00      	nop

00086a54 <__aeabi_cdrcmple>:
   86a54:	4684      	mov	ip, r0
   86a56:	4610      	mov	r0, r2
   86a58:	4662      	mov	r2, ip
   86a5a:	468c      	mov	ip, r1
   86a5c:	4619      	mov	r1, r3
   86a5e:	4663      	mov	r3, ip
   86a60:	e000      	b.n	86a64 <__aeabi_cdcmpeq>
   86a62:	bf00      	nop

00086a64 <__aeabi_cdcmpeq>:
   86a64:	b501      	push	{r0, lr}
   86a66:	f7ff ffb7 	bl	869d8 <__cmpdf2>
   86a6a:	2800      	cmp	r0, #0
   86a6c:	bf48      	it	mi
   86a6e:	f110 0f00 	cmnmi.w	r0, #0
   86a72:	bd01      	pop	{r0, pc}

00086a74 <__aeabi_dcmpeq>:
   86a74:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a78:	f7ff fff4 	bl	86a64 <__aeabi_cdcmpeq>
   86a7c:	bf0c      	ite	eq
   86a7e:	2001      	moveq	r0, #1
   86a80:	2000      	movne	r0, #0
   86a82:	f85d fb08 	ldr.w	pc, [sp], #8
   86a86:	bf00      	nop

00086a88 <__aeabi_dcmplt>:
   86a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a8c:	f7ff ffea 	bl	86a64 <__aeabi_cdcmpeq>
   86a90:	bf34      	ite	cc
   86a92:	2001      	movcc	r0, #1
   86a94:	2000      	movcs	r0, #0
   86a96:	f85d fb08 	ldr.w	pc, [sp], #8
   86a9a:	bf00      	nop

00086a9c <__aeabi_dcmple>:
   86a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86aa0:	f7ff ffe0 	bl	86a64 <__aeabi_cdcmpeq>
   86aa4:	bf94      	ite	ls
   86aa6:	2001      	movls	r0, #1
   86aa8:	2000      	movhi	r0, #0
   86aaa:	f85d fb08 	ldr.w	pc, [sp], #8
   86aae:	bf00      	nop

00086ab0 <__aeabi_dcmpge>:
   86ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   86ab4:	f7ff ffce 	bl	86a54 <__aeabi_cdrcmple>
   86ab8:	bf94      	ite	ls
   86aba:	2001      	movls	r0, #1
   86abc:	2000      	movhi	r0, #0
   86abe:	f85d fb08 	ldr.w	pc, [sp], #8
   86ac2:	bf00      	nop

00086ac4 <__aeabi_dcmpgt>:
   86ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   86ac8:	f7ff ffc4 	bl	86a54 <__aeabi_cdrcmple>
   86acc:	bf34      	ite	cc
   86ace:	2001      	movcc	r0, #1
   86ad0:	2000      	movcs	r0, #0
   86ad2:	f85d fb08 	ldr.w	pc, [sp], #8
   86ad6:	bf00      	nop

00086ad8 <__aeabi_d2iz>:
   86ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   86adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   86ae0:	d215      	bcs.n	86b0e <__aeabi_d2iz+0x36>
   86ae2:	d511      	bpl.n	86b08 <__aeabi_d2iz+0x30>
   86ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   86ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   86aec:	d912      	bls.n	86b14 <__aeabi_d2iz+0x3c>
   86aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   86af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   86af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   86afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   86afe:	fa23 f002 	lsr.w	r0, r3, r2
   86b02:	bf18      	it	ne
   86b04:	4240      	negne	r0, r0
   86b06:	4770      	bx	lr
   86b08:	f04f 0000 	mov.w	r0, #0
   86b0c:	4770      	bx	lr
   86b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   86b12:	d105      	bne.n	86b20 <__aeabi_d2iz+0x48>
   86b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   86b18:	bf08      	it	eq
   86b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   86b1e:	4770      	bx	lr
   86b20:	f04f 0000 	mov.w	r0, #0
   86b24:	4770      	bx	lr
   86b26:	bf00      	nop

00086b28 <__aeabi_frsub>:
   86b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   86b2c:	e002      	b.n	86b34 <__addsf3>
   86b2e:	bf00      	nop

00086b30 <__aeabi_fsub>:
   86b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00086b34 <__addsf3>:
   86b34:	0042      	lsls	r2, r0, #1
   86b36:	bf1f      	itttt	ne
   86b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   86b3c:	ea92 0f03 	teqne	r2, r3
   86b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   86b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86b48:	d06a      	beq.n	86c20 <__addsf3+0xec>
   86b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   86b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   86b52:	bfc1      	itttt	gt
   86b54:	18d2      	addgt	r2, r2, r3
   86b56:	4041      	eorgt	r1, r0
   86b58:	4048      	eorgt	r0, r1
   86b5a:	4041      	eorgt	r1, r0
   86b5c:	bfb8      	it	lt
   86b5e:	425b      	neglt	r3, r3
   86b60:	2b19      	cmp	r3, #25
   86b62:	bf88      	it	hi
   86b64:	4770      	bxhi	lr
   86b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   86b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   86b72:	bf18      	it	ne
   86b74:	4240      	negne	r0, r0
   86b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   86b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   86b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   86b82:	bf18      	it	ne
   86b84:	4249      	negne	r1, r1
   86b86:	ea92 0f03 	teq	r2, r3
   86b8a:	d03f      	beq.n	86c0c <__addsf3+0xd8>
   86b8c:	f1a2 0201 	sub.w	r2, r2, #1
   86b90:	fa41 fc03 	asr.w	ip, r1, r3
   86b94:	eb10 000c 	adds.w	r0, r0, ip
   86b98:	f1c3 0320 	rsb	r3, r3, #32
   86b9c:	fa01 f103 	lsl.w	r1, r1, r3
   86ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86ba4:	d502      	bpl.n	86bac <__addsf3+0x78>
   86ba6:	4249      	negs	r1, r1
   86ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   86bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   86bb0:	d313      	bcc.n	86bda <__addsf3+0xa6>
   86bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   86bb6:	d306      	bcc.n	86bc6 <__addsf3+0x92>
   86bb8:	0840      	lsrs	r0, r0, #1
   86bba:	ea4f 0131 	mov.w	r1, r1, rrx
   86bbe:	f102 0201 	add.w	r2, r2, #1
   86bc2:	2afe      	cmp	r2, #254	; 0xfe
   86bc4:	d251      	bcs.n	86c6a <__addsf3+0x136>
   86bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   86bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86bce:	bf08      	it	eq
   86bd0:	f020 0001 	biceq.w	r0, r0, #1
   86bd4:	ea40 0003 	orr.w	r0, r0, r3
   86bd8:	4770      	bx	lr
   86bda:	0049      	lsls	r1, r1, #1
   86bdc:	eb40 0000 	adc.w	r0, r0, r0
   86be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   86be4:	f1a2 0201 	sub.w	r2, r2, #1
   86be8:	d1ed      	bne.n	86bc6 <__addsf3+0x92>
   86bea:	fab0 fc80 	clz	ip, r0
   86bee:	f1ac 0c08 	sub.w	ip, ip, #8
   86bf2:	ebb2 020c 	subs.w	r2, r2, ip
   86bf6:	fa00 f00c 	lsl.w	r0, r0, ip
   86bfa:	bfaa      	itet	ge
   86bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   86c00:	4252      	neglt	r2, r2
   86c02:	4318      	orrge	r0, r3
   86c04:	bfbc      	itt	lt
   86c06:	40d0      	lsrlt	r0, r2
   86c08:	4318      	orrlt	r0, r3
   86c0a:	4770      	bx	lr
   86c0c:	f092 0f00 	teq	r2, #0
   86c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   86c14:	bf06      	itte	eq
   86c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   86c1a:	3201      	addeq	r2, #1
   86c1c:	3b01      	subne	r3, #1
   86c1e:	e7b5      	b.n	86b8c <__addsf3+0x58>
   86c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86c28:	bf18      	it	ne
   86c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86c2e:	d021      	beq.n	86c74 <__addsf3+0x140>
   86c30:	ea92 0f03 	teq	r2, r3
   86c34:	d004      	beq.n	86c40 <__addsf3+0x10c>
   86c36:	f092 0f00 	teq	r2, #0
   86c3a:	bf08      	it	eq
   86c3c:	4608      	moveq	r0, r1
   86c3e:	4770      	bx	lr
   86c40:	ea90 0f01 	teq	r0, r1
   86c44:	bf1c      	itt	ne
   86c46:	2000      	movne	r0, #0
   86c48:	4770      	bxne	lr
   86c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   86c4e:	d104      	bne.n	86c5a <__addsf3+0x126>
   86c50:	0040      	lsls	r0, r0, #1
   86c52:	bf28      	it	cs
   86c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   86c58:	4770      	bx	lr
   86c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   86c5e:	bf3c      	itt	cc
   86c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   86c64:	4770      	bxcc	lr
   86c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   86c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86c72:	4770      	bx	lr
   86c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
   86c78:	bf16      	itet	ne
   86c7a:	4608      	movne	r0, r1
   86c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   86c80:	4601      	movne	r1, r0
   86c82:	0242      	lsls	r2, r0, #9
   86c84:	bf06      	itte	eq
   86c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   86c8a:	ea90 0f01 	teqeq	r0, r1
   86c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   86c92:	4770      	bx	lr

00086c94 <__aeabi_ui2f>:
   86c94:	f04f 0300 	mov.w	r3, #0
   86c98:	e004      	b.n	86ca4 <__aeabi_i2f+0x8>
   86c9a:	bf00      	nop

00086c9c <__aeabi_i2f>:
   86c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   86ca0:	bf48      	it	mi
   86ca2:	4240      	negmi	r0, r0
   86ca4:	ea5f 0c00 	movs.w	ip, r0
   86ca8:	bf08      	it	eq
   86caa:	4770      	bxeq	lr
   86cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   86cb0:	4601      	mov	r1, r0
   86cb2:	f04f 0000 	mov.w	r0, #0
   86cb6:	e01c      	b.n	86cf2 <__aeabi_l2f+0x2a>

00086cb8 <__aeabi_ul2f>:
   86cb8:	ea50 0201 	orrs.w	r2, r0, r1
   86cbc:	bf08      	it	eq
   86cbe:	4770      	bxeq	lr
   86cc0:	f04f 0300 	mov.w	r3, #0
   86cc4:	e00a      	b.n	86cdc <__aeabi_l2f+0x14>
   86cc6:	bf00      	nop

00086cc8 <__aeabi_l2f>:
   86cc8:	ea50 0201 	orrs.w	r2, r0, r1
   86ccc:	bf08      	it	eq
   86cce:	4770      	bxeq	lr
   86cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   86cd4:	d502      	bpl.n	86cdc <__aeabi_l2f+0x14>
   86cd6:	4240      	negs	r0, r0
   86cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86cdc:	ea5f 0c01 	movs.w	ip, r1
   86ce0:	bf02      	ittt	eq
   86ce2:	4684      	moveq	ip, r0
   86ce4:	4601      	moveq	r1, r0
   86ce6:	2000      	moveq	r0, #0
   86ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   86cec:	bf08      	it	eq
   86cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   86cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   86cf6:	fabc f28c 	clz	r2, ip
   86cfa:	3a08      	subs	r2, #8
   86cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   86d00:	db10      	blt.n	86d24 <__aeabi_l2f+0x5c>
   86d02:	fa01 fc02 	lsl.w	ip, r1, r2
   86d06:	4463      	add	r3, ip
   86d08:	fa00 fc02 	lsl.w	ip, r0, r2
   86d0c:	f1c2 0220 	rsb	r2, r2, #32
   86d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   86d14:	fa20 f202 	lsr.w	r2, r0, r2
   86d18:	eb43 0002 	adc.w	r0, r3, r2
   86d1c:	bf08      	it	eq
   86d1e:	f020 0001 	biceq.w	r0, r0, #1
   86d22:	4770      	bx	lr
   86d24:	f102 0220 	add.w	r2, r2, #32
   86d28:	fa01 fc02 	lsl.w	ip, r1, r2
   86d2c:	f1c2 0220 	rsb	r2, r2, #32
   86d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   86d34:	fa21 f202 	lsr.w	r2, r1, r2
   86d38:	eb43 0002 	adc.w	r0, r3, r2
   86d3c:	bf08      	it	eq
   86d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   86d42:	4770      	bx	lr

00086d44 <__aeabi_fmul>:
   86d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86d4c:	bf1e      	ittt	ne
   86d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   86d52:	ea92 0f0c 	teqne	r2, ip
   86d56:	ea93 0f0c 	teqne	r3, ip
   86d5a:	d06f      	beq.n	86e3c <__aeabi_fmul+0xf8>
   86d5c:	441a      	add	r2, r3
   86d5e:	ea80 0c01 	eor.w	ip, r0, r1
   86d62:	0240      	lsls	r0, r0, #9
   86d64:	bf18      	it	ne
   86d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   86d6a:	d01e      	beq.n	86daa <__aeabi_fmul+0x66>
   86d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   86d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   86d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   86d78:	fba0 3101 	umull	r3, r1, r0, r1
   86d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   86d84:	bf3e      	ittt	cc
   86d86:	0049      	lslcc	r1, r1, #1
   86d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   86d8c:	005b      	lslcc	r3, r3, #1
   86d8e:	ea40 0001 	orr.w	r0, r0, r1
   86d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   86d96:	2afd      	cmp	r2, #253	; 0xfd
   86d98:	d81d      	bhi.n	86dd6 <__aeabi_fmul+0x92>
   86d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   86d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86da2:	bf08      	it	eq
   86da4:	f020 0001 	biceq.w	r0, r0, #1
   86da8:	4770      	bx	lr
   86daa:	f090 0f00 	teq	r0, #0
   86dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   86db2:	bf08      	it	eq
   86db4:	0249      	lsleq	r1, r1, #9
   86db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   86dbe:	3a7f      	subs	r2, #127	; 0x7f
   86dc0:	bfc2      	ittt	gt
   86dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   86dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86dca:	4770      	bxgt	lr
   86dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86dd0:	f04f 0300 	mov.w	r3, #0
   86dd4:	3a01      	subs	r2, #1
   86dd6:	dc5d      	bgt.n	86e94 <__aeabi_fmul+0x150>
   86dd8:	f112 0f19 	cmn.w	r2, #25
   86ddc:	bfdc      	itt	le
   86dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   86de2:	4770      	bxle	lr
   86de4:	f1c2 0200 	rsb	r2, r2, #0
   86de8:	0041      	lsls	r1, r0, #1
   86dea:	fa21 f102 	lsr.w	r1, r1, r2
   86dee:	f1c2 0220 	rsb	r2, r2, #32
   86df2:	fa00 fc02 	lsl.w	ip, r0, r2
   86df6:	ea5f 0031 	movs.w	r0, r1, rrx
   86dfa:	f140 0000 	adc.w	r0, r0, #0
   86dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   86e02:	bf08      	it	eq
   86e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   86e08:	4770      	bx	lr
   86e0a:	f092 0f00 	teq	r2, #0
   86e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   86e12:	bf02      	ittt	eq
   86e14:	0040      	lsleq	r0, r0, #1
   86e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86e1a:	3a01      	subeq	r2, #1
   86e1c:	d0f9      	beq.n	86e12 <__aeabi_fmul+0xce>
   86e1e:	ea40 000c 	orr.w	r0, r0, ip
   86e22:	f093 0f00 	teq	r3, #0
   86e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86e2a:	bf02      	ittt	eq
   86e2c:	0049      	lsleq	r1, r1, #1
   86e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   86e32:	3b01      	subeq	r3, #1
   86e34:	d0f9      	beq.n	86e2a <__aeabi_fmul+0xe6>
   86e36:	ea41 010c 	orr.w	r1, r1, ip
   86e3a:	e78f      	b.n	86d5c <__aeabi_fmul+0x18>
   86e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86e40:	ea92 0f0c 	teq	r2, ip
   86e44:	bf18      	it	ne
   86e46:	ea93 0f0c 	teqne	r3, ip
   86e4a:	d00a      	beq.n	86e62 <__aeabi_fmul+0x11e>
   86e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   86e50:	bf18      	it	ne
   86e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86e56:	d1d8      	bne.n	86e0a <__aeabi_fmul+0xc6>
   86e58:	ea80 0001 	eor.w	r0, r0, r1
   86e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   86e60:	4770      	bx	lr
   86e62:	f090 0f00 	teq	r0, #0
   86e66:	bf17      	itett	ne
   86e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   86e6c:	4608      	moveq	r0, r1
   86e6e:	f091 0f00 	teqne	r1, #0
   86e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   86e76:	d014      	beq.n	86ea2 <__aeabi_fmul+0x15e>
   86e78:	ea92 0f0c 	teq	r2, ip
   86e7c:	d101      	bne.n	86e82 <__aeabi_fmul+0x13e>
   86e7e:	0242      	lsls	r2, r0, #9
   86e80:	d10f      	bne.n	86ea2 <__aeabi_fmul+0x15e>
   86e82:	ea93 0f0c 	teq	r3, ip
   86e86:	d103      	bne.n	86e90 <__aeabi_fmul+0x14c>
   86e88:	024b      	lsls	r3, r1, #9
   86e8a:	bf18      	it	ne
   86e8c:	4608      	movne	r0, r1
   86e8e:	d108      	bne.n	86ea2 <__aeabi_fmul+0x15e>
   86e90:	ea80 0001 	eor.w	r0, r0, r1
   86e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   86e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86ea0:	4770      	bx	lr
   86ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   86eaa:	4770      	bx	lr

00086eac <__aeabi_fdiv>:
   86eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86eb4:	bf1e      	ittt	ne
   86eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   86eba:	ea92 0f0c 	teqne	r2, ip
   86ebe:	ea93 0f0c 	teqne	r3, ip
   86ec2:	d069      	beq.n	86f98 <__aeabi_fdiv+0xec>
   86ec4:	eba2 0203 	sub.w	r2, r2, r3
   86ec8:	ea80 0c01 	eor.w	ip, r0, r1
   86ecc:	0249      	lsls	r1, r1, #9
   86ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
   86ed2:	d037      	beq.n	86f44 <__aeabi_fdiv+0x98>
   86ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   86ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   86edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   86ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86ee4:	428b      	cmp	r3, r1
   86ee6:	bf38      	it	cc
   86ee8:	005b      	lslcc	r3, r3, #1
   86eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   86eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   86ef2:	428b      	cmp	r3, r1
   86ef4:	bf24      	itt	cs
   86ef6:	1a5b      	subcs	r3, r3, r1
   86ef8:	ea40 000c 	orrcs.w	r0, r0, ip
   86efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   86f00:	bf24      	itt	cs
   86f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   86f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   86f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   86f0e:	bf24      	itt	cs
   86f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   86f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   86f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   86f1c:	bf24      	itt	cs
   86f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   86f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   86f26:	011b      	lsls	r3, r3, #4
   86f28:	bf18      	it	ne
   86f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   86f2e:	d1e0      	bne.n	86ef2 <__aeabi_fdiv+0x46>
   86f30:	2afd      	cmp	r2, #253	; 0xfd
   86f32:	f63f af50 	bhi.w	86dd6 <__aeabi_fmul+0x92>
   86f36:	428b      	cmp	r3, r1
   86f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86f3c:	bf08      	it	eq
   86f3e:	f020 0001 	biceq.w	r0, r0, #1
   86f42:	4770      	bx	lr
   86f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   86f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86f4c:	327f      	adds	r2, #127	; 0x7f
   86f4e:	bfc2      	ittt	gt
   86f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   86f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86f58:	4770      	bxgt	lr
   86f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86f5e:	f04f 0300 	mov.w	r3, #0
   86f62:	3a01      	subs	r2, #1
   86f64:	e737      	b.n	86dd6 <__aeabi_fmul+0x92>
   86f66:	f092 0f00 	teq	r2, #0
   86f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   86f6e:	bf02      	ittt	eq
   86f70:	0040      	lsleq	r0, r0, #1
   86f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86f76:	3a01      	subeq	r2, #1
   86f78:	d0f9      	beq.n	86f6e <__aeabi_fdiv+0xc2>
   86f7a:	ea40 000c 	orr.w	r0, r0, ip
   86f7e:	f093 0f00 	teq	r3, #0
   86f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86f86:	bf02      	ittt	eq
   86f88:	0049      	lsleq	r1, r1, #1
   86f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   86f8e:	3b01      	subeq	r3, #1
   86f90:	d0f9      	beq.n	86f86 <__aeabi_fdiv+0xda>
   86f92:	ea41 010c 	orr.w	r1, r1, ip
   86f96:	e795      	b.n	86ec4 <__aeabi_fdiv+0x18>
   86f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86f9c:	ea92 0f0c 	teq	r2, ip
   86fa0:	d108      	bne.n	86fb4 <__aeabi_fdiv+0x108>
   86fa2:	0242      	lsls	r2, r0, #9
   86fa4:	f47f af7d 	bne.w	86ea2 <__aeabi_fmul+0x15e>
   86fa8:	ea93 0f0c 	teq	r3, ip
   86fac:	f47f af70 	bne.w	86e90 <__aeabi_fmul+0x14c>
   86fb0:	4608      	mov	r0, r1
   86fb2:	e776      	b.n	86ea2 <__aeabi_fmul+0x15e>
   86fb4:	ea93 0f0c 	teq	r3, ip
   86fb8:	d104      	bne.n	86fc4 <__aeabi_fdiv+0x118>
   86fba:	024b      	lsls	r3, r1, #9
   86fbc:	f43f af4c 	beq.w	86e58 <__aeabi_fmul+0x114>
   86fc0:	4608      	mov	r0, r1
   86fc2:	e76e      	b.n	86ea2 <__aeabi_fmul+0x15e>
   86fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   86fc8:	bf18      	it	ne
   86fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86fce:	d1ca      	bne.n	86f66 <__aeabi_fdiv+0xba>
   86fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   86fd4:	f47f af5c 	bne.w	86e90 <__aeabi_fmul+0x14c>
   86fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   86fdc:	f47f af3c 	bne.w	86e58 <__aeabi_fmul+0x114>
   86fe0:	e75f      	b.n	86ea2 <__aeabi_fmul+0x15e>
   86fe2:	bf00      	nop

00086fe4 <__gesf2>:
   86fe4:	f04f 3cff 	mov.w	ip, #4294967295
   86fe8:	e006      	b.n	86ff8 <__cmpsf2+0x4>
   86fea:	bf00      	nop

00086fec <__lesf2>:
   86fec:	f04f 0c01 	mov.w	ip, #1
   86ff0:	e002      	b.n	86ff8 <__cmpsf2+0x4>
   86ff2:	bf00      	nop

00086ff4 <__cmpsf2>:
   86ff4:	f04f 0c01 	mov.w	ip, #1
   86ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
   86ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   87000:	ea4f 0341 	mov.w	r3, r1, lsl #1
   87004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   87008:	bf18      	it	ne
   8700a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8700e:	d011      	beq.n	87034 <__cmpsf2+0x40>
   87010:	b001      	add	sp, #4
   87012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   87016:	bf18      	it	ne
   87018:	ea90 0f01 	teqne	r0, r1
   8701c:	bf58      	it	pl
   8701e:	ebb2 0003 	subspl.w	r0, r2, r3
   87022:	bf88      	it	hi
   87024:	17c8      	asrhi	r0, r1, #31
   87026:	bf38      	it	cc
   87028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   8702c:	bf18      	it	ne
   8702e:	f040 0001 	orrne.w	r0, r0, #1
   87032:	4770      	bx	lr
   87034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   87038:	d102      	bne.n	87040 <__cmpsf2+0x4c>
   8703a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   8703e:	d105      	bne.n	8704c <__cmpsf2+0x58>
   87040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   87044:	d1e4      	bne.n	87010 <__cmpsf2+0x1c>
   87046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   8704a:	d0e1      	beq.n	87010 <__cmpsf2+0x1c>
   8704c:	f85d 0b04 	ldr.w	r0, [sp], #4
   87050:	4770      	bx	lr
   87052:	bf00      	nop

00087054 <__aeabi_cfrcmple>:
   87054:	4684      	mov	ip, r0
   87056:	4608      	mov	r0, r1
   87058:	4661      	mov	r1, ip
   8705a:	e7ff      	b.n	8705c <__aeabi_cfcmpeq>

0008705c <__aeabi_cfcmpeq>:
   8705c:	b50f      	push	{r0, r1, r2, r3, lr}
   8705e:	f7ff ffc9 	bl	86ff4 <__cmpsf2>
   87062:	2800      	cmp	r0, #0
   87064:	bf48      	it	mi
   87066:	f110 0f00 	cmnmi.w	r0, #0
   8706a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0008706c <__aeabi_fcmpeq>:
   8706c:	f84d ed08 	str.w	lr, [sp, #-8]!
   87070:	f7ff fff4 	bl	8705c <__aeabi_cfcmpeq>
   87074:	bf0c      	ite	eq
   87076:	2001      	moveq	r0, #1
   87078:	2000      	movne	r0, #0
   8707a:	f85d fb08 	ldr.w	pc, [sp], #8
   8707e:	bf00      	nop

00087080 <__aeabi_fcmplt>:
   87080:	f84d ed08 	str.w	lr, [sp, #-8]!
   87084:	f7ff ffea 	bl	8705c <__aeabi_cfcmpeq>
   87088:	bf34      	ite	cc
   8708a:	2001      	movcc	r0, #1
   8708c:	2000      	movcs	r0, #0
   8708e:	f85d fb08 	ldr.w	pc, [sp], #8
   87092:	bf00      	nop

00087094 <__aeabi_fcmple>:
   87094:	f84d ed08 	str.w	lr, [sp, #-8]!
   87098:	f7ff ffe0 	bl	8705c <__aeabi_cfcmpeq>
   8709c:	bf94      	ite	ls
   8709e:	2001      	movls	r0, #1
   870a0:	2000      	movhi	r0, #0
   870a2:	f85d fb08 	ldr.w	pc, [sp], #8
   870a6:	bf00      	nop

000870a8 <__aeabi_fcmpge>:
   870a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   870ac:	f7ff ffd2 	bl	87054 <__aeabi_cfrcmple>
   870b0:	bf94      	ite	ls
   870b2:	2001      	movls	r0, #1
   870b4:	2000      	movhi	r0, #0
   870b6:	f85d fb08 	ldr.w	pc, [sp], #8
   870ba:	bf00      	nop

000870bc <__aeabi_fcmpgt>:
   870bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   870c0:	f7ff ffc8 	bl	87054 <__aeabi_cfrcmple>
   870c4:	bf34      	ite	cc
   870c6:	2001      	movcc	r0, #1
   870c8:	2000      	movcs	r0, #0
   870ca:	f85d fb08 	ldr.w	pc, [sp], #8
   870ce:	bf00      	nop

000870d0 <__aeabi_f2iz>:
   870d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   870d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   870d8:	d30f      	bcc.n	870fa <__aeabi_f2iz+0x2a>
   870da:	f04f 039e 	mov.w	r3, #158	; 0x9e
   870de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   870e2:	d90d      	bls.n	87100 <__aeabi_f2iz+0x30>
   870e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   870e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   870ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   870f0:	fa23 f002 	lsr.w	r0, r3, r2
   870f4:	bf18      	it	ne
   870f6:	4240      	negne	r0, r0
   870f8:	4770      	bx	lr
   870fa:	f04f 0000 	mov.w	r0, #0
   870fe:	4770      	bx	lr
   87100:	f112 0f61 	cmn.w	r2, #97	; 0x61
   87104:	d101      	bne.n	8710a <__aeabi_f2iz+0x3a>
   87106:	0242      	lsls	r2, r0, #9
   87108:	d105      	bne.n	87116 <__aeabi_f2iz+0x46>
   8710a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   8710e:	bf08      	it	eq
   87110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   87114:	4770      	bx	lr
   87116:	f04f 0000 	mov.w	r0, #0
   8711a:	4770      	bx	lr
   8711c:	000a6425 	.word	0x000a6425
   87120:	00000001 	.word	0x00000001
   87124:	00000002 	.word	0x00000002
   87128:	00000004 	.word	0x00000004
   8712c:	00000008 	.word	0x00000008
   87130:	00000010 	.word	0x00000010
   87134:	00000020 	.word	0x00000020
   87138:	00000040 	.word	0x00000040
   8713c:	00000080 	.word	0x00000080
   87140:	00000100 	.word	0x00000100
   87144:	00000200 	.word	0x00000200
   87148:	00000400 	.word	0x00000400
   8714c:	09097325 	.word	0x09097325
   87150:	25096325 	.word	0x25096325
   87154:	75250975 	.word	0x75250975
   87158:	0d752509 	.word	0x0d752509
   8715c:	0000000a 	.word	0x0000000a
   87160:	454c4449 	.word	0x454c4449
   87164:	00000000 	.word	0x00000000
   87168:	00000a0d 	.word	0x00000a0d
   8716c:	20726d54 	.word	0x20726d54
   87170:	00637653 	.word	0x00637653
   87174:	6b736154 	.word	0x6b736154
   87178:	76697244 	.word	0x76697244
   8717c:	00000065 	.word	0x00000065
   87180:	6c696146 	.word	0x6c696146
   87184:	74206465 	.word	0x74206465
   87188:	7263206f 	.word	0x7263206f
   8718c:	65746165 	.word	0x65746165
   87190:	73615420 	.word	0x73615420
   87194:	6972446b 	.word	0x6972446b
   87198:	654c6576 	.word	0x654c6576
   8719c:	69527466 	.word	0x69527466
   871a0:	0a746867 	.word	0x0a746867
   871a4:	00000000 	.word	0x00000000
   871a8:	6b736154 	.word	0x6b736154
   871ac:	6c74614d 	.word	0x6c74614d
   871b0:	00006261 	.word	0x00006261
   871b4:	6c696146 	.word	0x6c696146
   871b8:	74206465 	.word	0x74206465
   871bc:	7263206f 	.word	0x7263206f
   871c0:	65746165 	.word	0x65746165
   871c4:	73615420 	.word	0x73615420
   871c8:	6972446b 	.word	0x6972446b
   871cc:	6f466576 	.word	0x6f466576
   871d0:	72617772 	.word	0x72617772
   871d4:	00000a64 	.word	0x00000a64
   871d8:	6b736154 	.word	0x6b736154
   871dc:	4c444950 	.word	0x4c444950
   871e0:	00746665 	.word	0x00746665
   871e4:	6b736154 	.word	0x6b736154
   871e8:	52444950 	.word	0x52444950
   871ec:	74686769 	.word	0x74686769
   871f0:	00000000 	.word	0x00000000
   871f4:	6b736154 	.word	0x6b736154
   871f8:	636c6143 	.word	0x636c6143
   871fc:	7466654c 	.word	0x7466654c
   87200:	00000000 	.word	0x00000000
   87204:	6c696146 	.word	0x6c696146
   87208:	74206465 	.word	0x74206465
   8720c:	7263206f 	.word	0x7263206f
   87210:	65746165 	.word	0x65746165
   87214:	73615420 	.word	0x73615420
   87218:	6c61436b 	.word	0x6c61436b
   8721c:	616c7563 	.word	0x616c7563
   87220:	654c6574 	.word	0x654c6574
   87224:	68577466 	.word	0x68577466
   87228:	0a6c6565 	.word	0x0a6c6565
   8722c:	00000000 	.word	0x00000000
   87230:	6b736154 	.word	0x6b736154
   87234:	636c6143 	.word	0x636c6143
   87238:	68676952 	.word	0x68676952
   8723c:	00000074 	.word	0x00000074
   87240:	6b736154 	.word	0x6b736154
   87244:	72746c55 	.word	0x72746c55
   87248:	00000061 	.word	0x00000061
   8724c:	00000043 	.word	0x00000043

00087250 <_global_impure_ptr>:
   87250:	20070150 2b302d23 6c680020 6665004c     P.. #-0+ .hlL.ef
   87260:	47464567 464e4900 666e6900 4e414e00     gEFG.INF.inf.NAN
   87270:	6e616e00 30003000 34333231 38373635     .nan.0.012345678
   87280:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
   87290:	62613938 66656463 666e4900 74696e69     89abcdef.Infinit
   872a0:	614e0079 0000004e                       y.NaN...

000872a8 <__sf_fake_stdin>:
	...

000872c8 <__sf_fake_stdout>:
	...

000872e8 <__sf_fake_stderr>:
	...
   87308:	49534f50 002e0058                       POSIX...

00087310 <__mprec_tens>:
   87310:	00000000 3ff00000 00000000 40240000     .......?......$@
   87320:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   87330:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   87340:	00000000 412e8480 00000000 416312d0     .......A......cA
   87350:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   87360:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   87370:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   87380:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   87390:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   873a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   873b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   873c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   873d0:	79d99db4 44ea7843                       ...yCx.D

000873d8 <__mprec_bigtens>:
   873d8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   873e8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   873f8:	7f73bf3c 75154fdd                       <.s..O.u

00087400 <p05.5281>:
   87400:	00000005 00000019 0000007d              ........}...

0008740c <_init>:
   8740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8740e:	bf00      	nop
   87410:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87412:	bc08      	pop	{r3}
   87414:	469e      	mov	lr, r3
   87416:	4770      	bx	lr

00087418 <__init_array_start>:
   87418:	00080119 	.word	0x00080119

0008741c <_fini>:
   8741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8741e:	bf00      	nop
   87420:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87422:	bc08      	pop	{r3}
   87424:	469e      	mov	lr, r3
   87426:	4770      	bx	lr

00087428 <__fini_array_start>:
   87428:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070140 	.word	0x20070140

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <omkretsHjul>:
2007012c:	3ee66666                                ff.>

20070130 <hzforcpu>:
20070130:	00280de8                                ..(.

20070134 <omkretsHjulRight>:
20070134:	3ee66666                                ff.>

20070138 <hzforcpuRight>:
20070138:	00280de8                                ..(.

2007013c <g_interrupt_enabled>:
2007013c:	00000001                                ....

20070140 <SystemCoreClock>:
20070140:	003d0900                                ..=.

20070144 <uxCriticalNesting>:
20070144:	aaaaaaaa                                ....

20070148 <xFreeBytesRemaining>:
20070148:	00008000                                ....

2007014c <xNextTaskUnblockTime>:
2007014c:	ffffffff                                ....

20070150 <impure_data>:
20070150:	00000000 000872a8 000872c8 000872e8     .....r...r...r..
	...
20070170:	0008724c 00000000 00000000 00000000     Lr..............
	...

200701b0 <_impure_ptr>:
200701b0:	20070150                                P.. 

200701b4 <lconv>:
200701b4:	0008730e 00087259 00087259 00087259     .s..Yr..Yr..Yr..
200701c4:	00087259 00087259 00087259 00087259     Yr..Yr..Yr..Yr..
200701d4:	00087259 00087259 ffffffff ffffffff     Yr..Yr..........
200701e4:	ffffffff 0000ffff                       ........
